#ifndef lint
static const char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif

#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYPATCH 20130925

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)

#define YYPREFIX "yy"

#define YYPURE 0

#line 2 "blog.yacc"
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <tuple>
#include "BLOGSymbol.h"
#include "../absyn/Absyn.h"
#include "../absyn/ArrayExpr.h"
#include "../absyn/BoolLiteral.h"
#include "../absyn/BlogProgram.h"
#include "../absyn/CardinalityExpr.h"
#include "../absyn/CondSet.h"
#include "../absyn/Decl.h"
#include "../absyn/DistinctDecl.h"
#include "../absyn/DistrExpr.h"
#include "../absyn/DoubleLiteral.h"
#include "../absyn/Evidence.h"
#include "../absyn/Expr.h"
#include "../absyn/FuncApp.h"
#include "../absyn/FuncDecl.h"
#include "../absyn/IfExpr.h"
#include "../absyn/IntLiteral.h"
#include "../absyn/Literal.h"
#include "../absyn/ListSet.h"
#include "../absyn/MapExpr.h"
#include "../absyn/NullLiteral.h"
#include "../absyn/NumStDecl.h"
#include "../absyn/OpExpr.h"
#include "../absyn/OriginDecl.h"
#include "../absyn/QuantExpr.h"
#include "../absyn/Query.h"
#include "../absyn/SetExpr.h"
#include "../absyn/Stmt.h"
#include "../absyn/StringLiteral.h"
#include "../absyn/Symbol.h"
#include "../absyn/TimeStampLiteral.h"
#include "../absyn/Ty.h"
#include "../absyn/TypDecl.h"
#include "../absyn/VarDecl.h"
#include "../absyn/VarRef.h"
#include "../absyn/CaseExpr.h"
#include "../absyn/TupleSetExpr.h"
using namespace std;
using namespace swift::absyn;

/* stuff from flex that bison needs to know about: */
extern "C" int yylex();
extern "C" int yyparse();
extern "C" FILE *yyin;
extern "C" int yylineno;
extern "C" int curr_line;
extern "C" int curr_col;

void yyerror(const char *s);
BlogProgram *blog;

BlogProgram* parse(const char* inp) {
  blog = new BlogProgram(0, 0);
  /* open a file handle to a particular file:*/
  FILE *myfile = fopen(inp, "r");
  /* make sure it is valid:*/
  if (!myfile) {
    cout << "I can't open input.in" << endl;
    exit(0);
    /*return -1;*/
  }
  /* set flex to read from it instead of defaulting to STDIN:*/
  yyin = myfile;
  /* parse through the input until there is no more:*/
  do {
    yyparse();
  } while (!feof(yyin));
  return blog;  
}
#line 79 "blog.yacc"
#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#endif
#ifndef YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
typedef union {
  int i;
  class BLOGSymbol<int>* ival;
  class BLOGSymbol<double>* dblval;
  class BLOGSymbol<char>* chrval;
  class BLOGSymbol<bool>* boolval;
  class BLOGSymbol<string>* sval;
  vector<tuple<string,int>>* symbintvect;
  tuple<string,int>* symbintpair;
  class Absyn* ast;
  class ArrayExpr* arrayexp;
  class BoolLiteral* boollit;
  class BlogProgram* bprog;
  class CardinalityExpr* cardexp;
  class CondSet* cset;
  class Decl* dec;
  class DistinctDecl* distdec;
  class DistrExpr* distrexp;
  class DoubleLiteral* doublelit;
  class Evidence* evid;
  class Expr* exp;
  class FuncApp* fapp;
  class FuncDecl* funcdec;
  class IfExpr* ifexp;
  class IntLiteral* intlit;
  class Literal* lit;
  class ListSet* lset;
  class MapExpr* mapexp;
  class NullLiteral* nullit;
  class NumStDecl* numstdec;
  class OpExpr* opexp;
  class OriginDecl* origdec;
  class QuantExpr* quantexp;
  class Query* query;
  class SetExpr* setexp;
  class Stmt* stmt;
  class StringLiteral* stringlit;
  class Symbol* symb;
  class Ty* typ;
  class TypDecl* typdec;
  class VarDecl* vardec;
  class VarRef* varref;
  void *compexp[3];
  void *pair[2];
  vector<VarDecl>* varlist;
  vector<tuple<Expr*, Expr*>>* exptuplst;
  vector<Expr*>* explst;
  vector<tuple<Symbol, Symbol>>* varlst;
} YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
#line 152 "parser.cpp"

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define ELSE 257
#define IF 258
#define THEN 259
#define TYPE 260
#define RANDOM 261
#define FIXED 262
#define ORIGIN 263
#define DISTINCT 264
#define QUERY 265
#define OBS 266
#define PARAM 267
#define LIST 268
#define MAP 269
#define DISTRIBUTION 270
#define CASE 271
#define IN 272
#define EXISTS_ 273
#define FORALL_ 274
#define FOR 275
#define NULLITY 276
#define INT_LITERAL 277
#define DOUBLE_LITERAL 278
#define BOOLEAN_LITERAL 279
#define CHAR_LITERAL 280
#define STRING_LITERAL 281
#define ID 282
#define PARFACTOR 283
#define FACTOR 284
#define ERROR 285
#define ELSEIF 286
#define AT_ 287
#define PLUS_ 288
#define MULT_ 289
#define DIV_ 290
#define MOD_ 291
#define POWER_ 292
#define MINUS_ 293
#define UMINUS 294
#define LST 295
#define LT_ 296
#define GT_ 297
#define LEQ_ 298
#define GEQ_ 299
#define EQEQ_ 300
#define NEQ_ 301
#define EQ_ 302
#define DISTRIB 303
#define NOT_ 304
#define AND_ 305
#define OR_ 306
#define DOUBLERIGHTARROW 307
#define COMMA 308
#define SEMI 309
#define COLON 310
#define DOT 311
#define NUMSIGN 312
#define RIGHTARROW 313
#define LPAREN 314
#define RPAREN 315
#define LBRACE 316
#define RBRACE 317
#define LBRACKET 318
#define RBRACKET 319
#define YYERRCODE 256
static const short yylhs[] = {                           -1,
    0,   46,   46,   47,   47,   47,   47,    1,    1,    1,
    1,    2,    2,    2,    2,    2,    2,    2,    2,    3,
    3,   35,   35,   45,   36,   36,   38,   38,   38,   38,
   43,   48,   48,   37,   37,   37,   37,   37,   10,   10,
   11,   11,   11,    8,    8,    8,    8,    8,   39,   39,
   40,   40,   40,   40,   40,   40,    9,    9,    9,    9,
    9,   12,   42,   42,   42,   42,   41,   41,    4,   44,
   44,   27,    5,    5,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   16,   16,   16,   16,   16,   16,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   18,   18,   18,
   18,   19,   19,   20,   20,   20,   22,   22,   23,   32,
   32,   33,   33,   33,   21,   21,   31,   31,   26,   34,
   34,   25,   25,   25,   28,   28,   29,   24,   24,   30,
    6,    6,   13,   14,   14,   14,    7,    7,
};
static const short yylen[] = {                            2,
    1,    0,    1,    3,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    1,    1,    2,    2,    3,    0,    2,    3,    1,
    2,    2,    2,    3,    1,    3,    2,    3,    6,    2,
    5,    3,    2,    4,    3,    5,    3,    2,    3,    0,
    5,    5,    5,    4,    3,    2,    6,    6,    5,    5,
    2,    3,    1,    3,    2,    3,    1,    4,    7,    1,
    3,    2,    3,    5,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    4,    1,    2,    2,    2,
    3,    4,    4,    4,    1,    3,    6,    4,    4,    1,
    0,    3,    3,    1,    3,    3,    3,    3,    3,    5,
    3,    2,    2,    2,    1,    1,    3,    5,    3,    3,
    2,    2,    1,    3,    3,    3,    2,    2,
};
static const short yydefred[] = {                         0,
   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    8,   12,   19,   18,    9,   10,   16,
   15,   13,   14,   17,    1,    0,   21,   20,    0,    0,
    0,    0,    0,    0,   40,    0,   61,    0,    0,  148,
    0,    0,    0,    0,   90,   87,   88,   89,   86,   85,
    0,    0,    0,    0,    0,    0,    0,    0,   76,   75,
  107,   80,   77,   78,   83,   84,   82,   79,   81,  135,
  136,    0,    0,  141,  143,    0,    0,    0,   48,    0,
    0,    0,    5,    0,    0,   42,    0,    0,    0,   24,
   25,    0,    0,    0,    0,   63,    0,    0,    0,    0,
    0,    0,    0,    0,  134,    0,  132,  133,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   45,   47,    0,    4,    0,   71,    0,    0,    0,
    0,   35,   26,    0,    0,    0,    0,    0,    0,   65,
    0,    0,    0,    0,    0,  111,    0,  140,  137,    0,
    0,    0,    0,  129,  126,  125,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  116,    0,    0,    0,  146,    0,    0,
    0,   56,    0,    0,    0,   49,    0,    0,   44,   28,
    0,   31,    0,   37,    0,   41,    0,    0,    0,   60,
   59,    0,   32,   64,   33,   66,    0,    0,  119,    0,
    0,    0,    0,    0,    0,    0,  127,    0,  106,  114,
    0,    0,   55,    0,    0,    0,   46,   29,   38,   34,
   36,    0,   58,   57,   68,    0,    0,    0,    0,    0,
   54,    0,    0,    0,    0,    0,   69,   53,   51,   52,
};
static const short yydgoto[] = {                         12,
   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   23,   24,   74,   75,  115,   59,   60,   61,   62,   63,
   64,   65,   66,  111,   67,   68,   86,   69,   70,   71,
  116,  112,  113,  114,  149,   32,  150,  151,   81,  141,
   96,   97,  152,   72,   34,   25,   26,  172,
};
static const short yysindex[] = {                      -216,
    0, -246, -243, -125,  -96, -265, 1704, 1753, -265, -261,
 -244,    0, -281,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -216,    0,    0, -214, -224,
 -183, -199, -195, -168,    0, -180,    0, -273, -155,    0,
 2062, 2062, -265, -265,    0,    0,    0,    0,    0,    0,
 2062, 2062, 2062, -250, 2062, 2062, 2062, 2256,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -159, -141,    0,    0, 2140, -120, -139,    0, -112,
 -214, -230,    0, -130, 2062,    0, -265, -197, -137,    0,
    0, -197, -196, -265, -134,    0, -116, 1651, 2093,  -91,
  -80, -100, -100, -100,    0, 2062,    0,    0, 2163, 2194,
  -86,  -85, -248, -292, 2256,  -83,  -82, -274, 2062, 2062,
 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062,
 2062, 2062, 2062, 2062, 1816, 2062, 1869,  -76, -265, -192,
 -253,    0,    0,  -65,    0, 2256,    0, -206,  -43, -114,
 -214,    0,    0,  -55,  -47,  -75,  -73,  -32,  -67,    0,
  -62, 2062,  -66, 2062, 2062,    0, 2062,    0,    0, -265,
 1966, 2014, 2062,    0,    0,    0, 2062,  -63, -100, -100,
 -100, -100,  -63, -117, -117, -117, -117, -117, -117, -185,
 -185, 2279, 2116,    0,  -64,  -56, 2256,    0, 2256, 2062,
  -61,    0,  -28,  -25,  -60,    0,  -59, 1918,    0,    0,
 -252,    0, -249,    0,  -39,    0, 2062,  -45,  -37,    0,
    0,  -40,    0,    0,    0,    0,  -93, 2062,    0, 2256,
 2256, 2256, -184, 2256, 2256, 2225,    0, -274,    0,    0,
 2256, 2062,    0,   -2,  -21,  -20,    0,    0,    0,    0,
    0, 2256,    0,    0,    0, 2062, 2194, 2062, 2062,  -31,
    0,  -26,    3, 2256, 2256, 2256,    0,    0,    0,    0,
};
static const short yyrindex[] = {                       286,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -16,    0, 1633,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  288,    0,    0, 1278,    1,
    0,   65,  129,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -22,  -23, 1420,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  193, 1432,    0,    0,    0,    0,    0,    0,    0,
    0,  -16,    0, 1667,    0,    0,    0,    2,    0,    0,
    0,    9,    0,    0, 1396,    0, 1450,    0,    0,    0,
    0,  259,  323,  387,    0,  -22,    0,    0,    0, -256,
    0,    0,   -5,    0, -187,    0,    0,   14,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   19,    0,    0, 1487,    0,    0,
    0,    0,    0,    0,    0, 1513,    0,    0,    0, -208,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  709,  451,  517,
  581,  645,  775,  795,  859,  884,  948,  977, 1043, 1064,
 1128, 1152,    0,    0,    0,   21, 1546,    0, 1579,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1332,    0,    0, 1216,
 1245, -286,   22, -150,  -98,    0,    0,   23,    0,    0,
 1600,   19,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1612,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1311,   24, -217,    0,    0,    0,    0,
};
static const short yygindex[] = {                         0,
  291,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   16,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  175,  -70,  289,    0,    0,
  167,  -52,  -57,    0,   -1,    0, -133,  253,  264,    0,
  -79,    0, -136, 1911,    0,    0,    0,  -77,
};
#define YYTABLESIZE 2597
static const short yytable[] = {                        118,
   70,   31,   36,   38,  117,  105,  249,   77,   93,   27,
  142,   79,   29,  214,  211,  173,   30,  160,  124,  161,
   78,  131,   58,   76,  174,  143,  170,   83,  204,   30,
  131,   30,   30,  171,  177,   28,  233,   30,   30,    1,
   94,  100,  101,    2,    3,    4,    5,    6,    7,    8,
    9,  124,  108,   10,  205,  213,   98,   99,  223,  171,
  124,  206,  248,  207,   23,  106,  102,  103,  104,   80,
  109,  110,  215,  209,  214,   30,  250,  196,  251,  224,
  216,  226,  195,   80,   30,   30,   87,  124,   85,  202,
  130,  156,  157,   30,   30,   11,  214,   30,   88,  130,
  146,   92,  119,  120,  121,  122,  123,  124,  210,  203,
  125,  126,  127,  128,  129,  130,  148,  155,   89,  238,
  124,  124,   90,  213,  122,  258,   95,  124,   22,  124,
   35,  124,  134,  215,  178,  179,  180,  181,  182,  183,
  184,  185,  186,  187,  188,  189,  190,  191,  192,  193,
   91,  197,  199,  219,  135,  215,   30,  122,  122,   37,
  136,  138,  139,  256,  122,   95,  122,   30,  122,  140,
  119,  120,  121,  122,  123,  124,  123,  227,  145,  230,
  231,  153,  232,  158,  196,   30,  234,  235,  236,  260,
  164,  159,  115,  213,  119,  120,  121,  122,  123,  124,
  134,  165,  125,  126,  127,  128,  129,  130,  218,  123,
  123,  131,  132,  133,   95,  241,  123,  134,  123,   95,
  123,  245,  246,  146,  134,  120,  121,  122,  123,  268,
  168,  169,  252,  200,   30,  175,  176,  208,  212,  220,
  223,  221,   30,  257,  222,  225,  217,  223,  225,  228,
  240,  171,  242,  243,  134,  269,   70,   70,  110,   70,
   70,   70,   70,   70,   70,   70,   70,   70,  225,  253,
   70,  264,   70,  265,  266,   70,  244,  254,  255,  261,
  262,  263,   70,  267,  270,    2,   50,    3,   70,   70,
   70,   70,   70,   70,  121,  121,   70,   70,   70,   70,
   70,   70,   70,   70,   27,   70,   70,   70,   70,   70,
   27,  120,   70,   70,   70,   70,   84,   70,   70,   70,
   23,   23,  108,   23,   23,   23,   23,   23,   23,   23,
   23,   23,  120,  121,   23,  120,   23,  229,  139,   23,
  138,  128,  107,  237,  154,  144,   23,    0,    0,    0,
    0,    0,   23,   23,   23,   23,   23,   23,    0,    0,
   23,   23,   23,   23,   23,   23,   23,    0,    0,   23,
   23,   23,   23,   23,    0,    0,   23,   23,   23,   23,
    0,   23,    0,   23,   22,   22,  109,   22,   22,   22,
   22,   22,   22,   22,   22,   22,    0,    0,   22,    0,
   22,    0,    0,   22,    0,    0,    0,    0,    0,    0,
   22,    0,    0,    0,    0,    0,   22,   22,   22,   22,
   22,   22,    0,    0,   22,   22,   22,   22,   22,   22,
   22,    0,    0,   22,   22,   22,   22,   22,    0,    0,
   22,   22,   22,   22,    0,   22,    0,   22,  115,  115,
   93,  115,  115,  115,  115,  115,  115,  115,  115,  115,
    0,    0,  115,    0,  115,    0,    0,  115,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  115,  115,  115,  115,  115,  115,    0,    0,  115,  115,
  115,  115,  115,  115,  115,    0,    0,  115,  115,  115,
  115,  115,    0,    0,  115,  115,    0,  115,    0,  115,
  115,  115,    0,    0,  110,  110,   94,  110,  110,  110,
  110,  110,  110,  110,  110,  110,    0,    0,  110,    0,
  110,    0,    0,  110,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  110,  110,  110,  110,
  110,  110,    0,    0,  110,  110,  110,  110,  110,  110,
  110,    0,    0,  110,  110,  110,  110,  110,    0,    0,
  110,  110,    0,  110,    0,  110,    0,  110,  108,  108,
   95,  108,  108,  108,  108,  108,  108,  108,  108,  108,
    0,    0,  108,    0,  108,    0,    0,  108,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  108,  108,  108,  108,  108,  108,    0,    0,  108,  108,
  108,  108,  108,  108,  108,    0,    0,  108,  108,  108,
  108,  108,    0,    0,  108,  108,    0,  108,    0,  108,
    0,  108,  109,  109,   96,  109,  109,  109,  109,  109,
  109,  109,  109,  109,    0,    0,  109,    0,  109,    0,
    0,  109,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  109,  109,  109,  109,  109,  109,
    0,    0,  109,  109,  109,  109,  109,  109,  109,    0,
    0,  109,  109,  109,  109,  109,    0,    0,  109,  109,
    0,  109,    0,  109,    0,  109,   93,   93,   91,   93,
   93,   93,   93,   93,   93,   93,   93,   93,    0,    0,
   93,    0,   93,    0,    0,   93,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   93,   93,
   93,   93,   93,   93,    0,    0,   93,   93,   93,   93,
   93,   93,   93,    0,    0,   93,   93,   93,   93,   93,
    0,    0,   93,   93,    0,   93,    0,   93,    0,   93,
    0,    0,   94,   94,   92,   94,   94,   94,   94,   94,
   94,   94,   94,   94,    0,    0,   94,    0,   94,    0,
    0,   94,    0,    0,   97,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   94,   94,   94,   94,   94,   94,
    0,    0,   94,   94,   94,   94,   94,   94,   94,    0,
    0,   94,   94,   94,   94,   94,    0,    0,   94,   94,
    0,   94,    0,   94,    0,   94,   95,   95,    0,   95,
   95,   95,   95,   95,   95,   95,   95,   95,    0,    0,
   95,    0,   95,    0,    0,   95,    0,    0,   98,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   95,   95,
   95,   95,   95,   95,    0,    0,   95,   95,   95,   95,
   95,   95,   95,   99,    0,   95,   95,   95,   95,   95,
    0,    0,   95,   95,    0,   95,    0,   95,    0,   95,
   96,   96,    0,   96,   96,   96,   96,   96,   96,   96,
   96,   96,    0,    0,   96,    0,   96,    0,    0,   96,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   96,   96,   96,   96,   96,   96,    0,    0,
   96,   96,   96,   96,   96,   96,   96,  100,    0,   96,
   96,   96,   96,   96,    0,    0,   96,   96,    0,   96,
    0,   96,    0,   96,   91,   91,    0,   91,   91,   91,
   91,   91,   91,   91,   91,   91,  101,    0,   91,    0,
   91,    0,    0,   91,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   91,    0,    0,    0,
    0,   91,    0,    0,   91,   91,   91,   91,   91,   91,
   91,    0,    0,   91,   91,   91,   91,   91,    0,    0,
   91,   91,    0,   91,    0,   91,    0,   91,    0,    0,
   92,   92,    0,   92,   92,   92,   92,   92,   92,   92,
   92,   92,  102,    0,   92,    0,   92,    0,    0,   92,
   97,   97,    0,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   92,  103,   97,    0,   97,   92,    0,   97,
   92,   92,   92,   92,   92,   92,   92,    0,    0,   92,
   92,   92,   92,   92,    0,    0,   92,   92,    0,   92,
    0,   92,    0,   92,    0,    0,   97,    0,    0,   97,
   97,   97,   97,   97,    0,    0,   97,   97,    0,   97,
    0,   97,    0,   97,   98,   98,    0,   98,   98,   98,
   98,   98,   98,   98,   98,   98,    0,  104,   98,    0,
   98,    0,    0,   98,    0,    0,    0,    0,    0,   99,
   99,    0,   99,   99,   99,   99,   99,   99,   99,   99,
   99,  105,    0,   99,    0,   99,    0,    0,   99,    0,
   98,    0,    0,   98,   98,   98,   98,   98,    0,    0,
   98,   98,    0,   98,    0,   98,    0,   98,    0,    0,
    0,    0,    0,    0,    0,   99,    0,    0,   99,   99,
   99,   99,   99,    0,    0,   99,   99,    0,   99,    0,
   99,    0,   99,  100,  100,    0,  100,  100,  100,  100,
  100,  100,  100,  100,  100,  113,    0,  100,    0,  100,
    0,    0,  100,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  101,  101,    0,  101,  101,  101,  101,  101,
  101,  101,  101,  101,  112,    0,  101,    0,  101,  100,
    0,  101,  100,  100,  100,  100,  100,    0,    0,  100,
  100,    0,  100,    0,  100,    0,  100,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   43,  101,    0,
    0,  101,  101,  101,  101,  101,    0,    0,  101,  101,
    0,  101,    0,  101,    0,  101,    0,    0,  102,  102,
    0,  102,  102,  102,  102,  102,  102,  102,  102,  102,
  117,    0,  102,    0,  102,    0,    0,  102,    0,  103,
  103,    0,  103,  103,  103,  103,  103,  103,  103,  103,
  103,  118,    0,  103,    0,  103,    0,    0,  103,    0,
    0,    0,    0,    0,  102,    0,    0,  102,  102,  102,
  102,  102,    0,    0,  102,  102,    0,  102,    0,  102,
    0,  102,    0,    0,    0,  103,    0,    0,  103,  103,
  103,  103,  103,    0,    0,  103,  103,    0,  103,    0,
  103,    0,  103,  104,  104,    0,  104,  104,  104,  104,
  104,  104,  104,  104,  104,   67,    0,  104,    0,  104,
    0,    0,  104,    0,    0,    0,    0,  105,  105,    0,
  105,  105,  105,  105,  105,  105,  105,  105,  105,  147,
    0,  105,    0,  105,    0,    0,  105,    0,    0,  104,
    0,  142,  104,  104,  104,  104,  104,    0,    0,  104,
  104,    0,  104,    0,  104,    0,  104,    0,    0,   62,
    0,    0,    0,  105,    0,    0,    0,    0,  105,  105,
  105,    0,    0,  105,  105,    0,  105,    0,  105,    0,
  105,  113,  113,    0,  113,  113,  113,  113,  113,  113,
  113,  113,  113,    0,    0,  113,   73,  113,    0,    0,
  113,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  112,  112,    0,  112,  112,  112,  112,  112,  112,  112,
  112,  112,   72,    0,  112,    0,  112,  113,    0,  112,
    0,    0,    0,  113,  113,    0,    0,  113,  113,    0,
  113,    0,  113,   43,  113,    0,    0,   43,   43,   43,
   43,   43,   43,   43,   43,  145,  112,   43,    0,    0,
    0,    0,  112,  112,    0,    0,  112,  112,    0,  112,
    0,  112,    0,  112,    0,    0,  117,  117,    0,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  144,    0,
  117,    0,  117,    0,    0,  117,   43,  118,    0,   43,
  118,  118,  118,  118,  118,  118,  118,  118,  118,   74,
    0,  118,    0,  118,    0,    0,  118,    0,    0,    0,
    0,   39,  117,    0,    0,    0,    0,    0,  117,  117,
    0,    0,  117,  117,    0,  117,    0,  117,    0,  117,
    0,    0,    7,  118,    0,    0,    0,    0,    0,  118,
  118,    0,    0,  118,  118,    0,  118,    0,  118,    0,
  118,   67,    0,    0,    0,   67,   67,   67,   67,   67,
   67,   67,   67,    0,    0,   67,    6,    0,    0,    0,
    0,    0,    0,    0,    0,  147,    0,   67,    0,  147,
  147,  147,  147,  147,  147,  147,  147,  142,    0,  147,
    0,  142,  142,  142,  142,  142,  142,  142,  142,    0,
    0,  142,    0,   67,   67,   62,    0,   67,    0,   62,
   62,   62,   62,   62,   62,   62,   62,    0,    0,   62,
    0,    0,    0,    0,    0,    0,    0,    0,  147,    0,
    0,  147,    0,    0,    0,    0,    0,    0,    0,    0,
  142,    0,   73,  142,    0,    0,   73,   73,   73,   73,
   73,   73,   73,   73,    0,    0,   73,    0,   62,    0,
    0,   62,    0,    0,    0,    0,    0,    0,   72,    0,
    0,    0,   72,   72,   72,   72,   72,   72,   72,   72,
    0,    0,   72,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,    0,   73,    0,
    0,  145,    0,    0,    0,  145,  145,  145,  145,  145,
  145,  145,  145,    0,    0,  145,    0,    0,    0,    0,
    0,   72,    0,    0,   72,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  144,    0,    0,    0,  144,  144,
  144,  144,  144,  144,  144,  144,    0,    0,  144,    0,
    0,    0,    0,    0,  145,   74,    0,  145,    0,   74,
   74,   74,   74,   74,   74,   74,   74,   39,    0,   74,
    0,   39,   39,   39,   39,   39,   39,   39,   39,    0,
    0,   39,    0,    0,    0,    0,    0,  144,    7,    0,
  144,    0,    7,    7,    7,    7,    7,    7,    7,    7,
    0,    0,    7,    0,    0,    0,    0,    0,   74,  162,
    0,   74,    0,   33,   33,   33,   39,    0,    0,   33,
   39,   82,    6,   39,    0,    0,    6,    6,    6,    6,
    6,    6,    6,    6,    0,    0,    6,    0,  119,  120,
  121,  122,  123,  124,    7,    0,  125,  126,  127,  128,
  129,  130,    0,   33,   33,  131,  132,  133,    0,   40,
    0,   41,    0,    0,   33,    0,    0,    0,  134,    0,
    0,    0,    0,    0,   42,    0,   43,   44,    6,   45,
   46,   47,   48,   49,   50,   30,    0,    0,    0,    0,
   51,    0,    0,    0,    0,    0,   52,  147,   33,    0,
    0,    0,   33,   33,   33,    0,    0,   53,   73,    0,
   41,    0,    0,    0,    0,   54,    0,   55,    0,   56,
    0,   57,    0,   42,    0,   43,   44,    0,   45,   46,
   47,   48,   49,   50,   30,    0,    0,    0,    0,   51,
    0,    0,    0,    0,    0,   52,    0,    0,    0,  201,
    0,    0,    0,    0,    0,    0,   53,    0,   33,    0,
   33,    0,    0,    0,   54,   33,   55,    0,   56,    0,
   57,  194,    0,   41,    0,    0,    0,    0,    0,    0,
   33,    0,    0,    0,    0,    0,   42,    0,   43,   44,
    0,   45,   46,   47,   48,   49,   50,   30,    0,    0,
    0,    0,   51,    0,    0,    0,    0,    0,   52,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,   33,    0,   33,  198,   33,   41,   54,    0,   55,
    0,   56,    0,   57,    0,    0,    0,    0,    0,   42,
    0,   43,   44,   33,   45,   46,   47,   48,   49,   50,
   30,    0,    0,    0,    0,   51,    0,    0,    0,    0,
    0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   53,  247,    0,   41,    0,    0,    0,    0,
   54,    0,   55,    0,   56,    0,   57,    0,   42,    0,
   43,   44,    0,   45,   46,   47,   48,   49,   50,   30,
    0,    0,    0,    0,   51,    0,    0,    0,    0,    0,
   52,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   53,    0,   41,    0,    0,    0,    0,    0,   54,
    0,   55,    0,   56,    0,   57,   42,    0,   43,   44,
    0,   45,   46,   47,   48,   49,   50,   30,    0,    0,
    0,    0,   51,    0,    0,    0,    0,    0,   52,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   53,
    0,   41,    0,  223,    0,    0,    0,   54,    0,   55,
    0,   56,    0,   57,   42,    0,   43,   44,    0,   45,
   46,   47,   48,   49,   50,   30,    0,    0,    0,    0,
   51,    0,    0,    0,    0,    0,   52,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   53,    0,   41,
    0,  225,    0,    0,    0,   54,    0,   55,    0,   56,
    0,   57,   42,    0,   43,   44,    0,   45,   46,   47,
   48,   49,   50,   30,    0,    0,    0,    0,   51,    0,
    0,    0,    0,    0,   52,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  163,   53,    0,    0,    0,    0,
    0,    0,    0,   54,    0,   55,    0,   56,    0,   57,
  119,  120,  121,  122,  123,  124,    0,    0,  125,  126,
  127,  128,  129,  130,    0,    0,    0,  131,  132,  133,
    0,    0,    0,  119,  120,  121,  122,  123,  124,    0,
  134,  125,  126,  127,  128,  129,  130,    0,    0,    0,
  131,  132,  133,    0,    0,    0,    0,  119,  120,  121,
  122,  123,  124,  134,  239,  125,  126,  127,  128,  129,
  130,  137,    0,    0,  131,  132,  133,    0,    0,    0,
  119,  120,  121,  122,  123,  124,    0,  134,  125,  126,
  127,  128,  129,  130,    0,    0,    0,  131,  132,  133,
    0,    0,    0,    0,    0,    0,    0,  166,    0,    0,
  134,  119,  120,  121,  122,  123,  124,    0,    0,  125,
  126,  127,  128,  129,  130,    0,    0,    0,  131,  132,
  133,    0,    0,    0,    0,    0,  167,    0,    0,    0,
    0,  134,  119,  120,  121,  122,  123,  124,    0,    0,
  125,  126,  127,  128,  129,  130,    0,    0,    0,  131,
  132,  133,    0,    0,    0,    0,    0,  259,    0,    0,
    0,    0,  134,  119,  120,  121,  122,  123,  124,    0,
    0,  125,  126,  127,  128,  129,  130,    0,    0,    0,
  131,  132,  133,    0,    0,    0,  119,  120,  121,  122,
  123,  124,    0,  134,  125,  126,  127,  128,  129,  130,
    0,    0,    0,  131,  132,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  134,
};
static const short yycheck[] = {                         57,
    0,    3,    4,    5,   57,  256,  256,    9,  282,  256,
   81,  256,  256,  150,  148,  308,  282,   97,  275,   97,
  282,  308,    7,    8,  317,  256,  275,  309,  282,  282,
  317,  282,  282,  308,  309,  282,  170,  282,  282,  256,
  314,   43,   44,  260,  261,  262,  263,  264,  265,  266,
  267,  308,   54,  270,  308,  308,   41,   42,  308,  308,
  317,  315,  315,  141,    0,  316,   51,   52,   53,  314,
   55,   56,  150,  144,  211,  282,  213,  135,  215,  159,
  151,  161,  135,  314,  282,  282,  311,  275,  303,  282,
  308,   93,   94,  302,  303,  312,  233,  282,  282,  317,
   85,  282,  288,  289,  290,  291,  292,  293,  315,  302,
  296,  297,  298,  299,  300,  301,  314,  314,  318,  177,
  308,  309,  318,  308,  275,  310,  282,  315,    0,  317,
  256,  319,  318,  211,  119,  120,  121,  122,  123,  124,
  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
  319,  136,  137,  155,  314,  233,  282,  308,  309,  256,
  302,  282,  302,  257,  315,  282,  317,  282,  319,  282,
  288,  289,  290,  291,  292,  293,  275,  162,  309,  164,
  165,  319,  167,  318,  242,  282,  171,  172,  173,  242,
  282,  308,    0,  308,  288,  289,  290,  291,  292,  293,
  318,  282,  296,  297,  298,  299,  300,  301,  256,  308,
  309,  305,  306,  307,  282,  200,  315,  318,  317,  282,
  319,  282,  282,  208,  318,  289,  290,  291,  292,  256,
  317,  317,  217,  310,  282,  319,  319,  303,  282,  315,
  308,  315,  282,  228,  277,  308,  302,  308,  308,  316,
  315,  308,  314,  282,  318,  282,  256,  257,    0,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  308,  315,
  270,  256,  272,  258,  259,  275,  302,  315,  319,  282,
  302,  302,  282,  315,  282,    0,  303,    0,  288,  289,
  290,  291,  292,  293,  317,  319,  296,  297,  298,  299,
  300,  301,  302,  303,  303,  305,  306,  307,  308,  309,
  302,  317,  312,  313,  314,  315,   26,  317,  318,  319,
  256,  257,    0,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  319,  315,  270,  315,  272,  163,  317,  275,
  317,  319,   54,  177,   92,   82,  282,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,  309,   -1,   -1,  312,  313,  314,  315,
   -1,  317,   -1,  319,  256,  257,    0,  259,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,   -1,
  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,  309,   -1,   -1,
  312,  313,  314,  315,   -1,  317,   -1,  319,  256,  257,
    0,  259,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,
  318,  319,   -1,   -1,  256,  257,    0,  259,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,   -1,
  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,  309,   -1,   -1,
  312,  313,   -1,  315,   -1,  317,   -1,  319,  256,  257,
    0,  259,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,
   -1,  319,  256,  257,    0,  259,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,  309,   -1,   -1,  312,  313,
   -1,  315,   -1,  317,   -1,  319,  256,  257,    0,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
  270,   -1,  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,  309,
   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,  319,
   -1,   -1,  256,  257,    0,  259,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,  309,   -1,   -1,  312,  313,
   -1,  315,   -1,  317,   -1,  319,  256,  257,   -1,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
  270,   -1,  272,   -1,   -1,  275,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,    0,   -1,  305,  306,  307,  308,  309,
   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,  319,
  256,  257,   -1,  259,  260,  261,  262,  263,  264,  265,
  266,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,  289,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,    0,   -1,  305,
  306,  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,
   -1,  317,   -1,  319,  256,  257,   -1,  259,  260,  261,
  262,  263,  264,  265,  266,  267,    0,   -1,  270,   -1,
  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,
   -1,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,  309,   -1,   -1,
  312,  313,   -1,  315,   -1,  317,   -1,  319,   -1,   -1,
  256,  257,   -1,  259,  260,  261,  262,  263,  264,  265,
  266,  267,    0,   -1,  270,   -1,  272,   -1,   -1,  275,
  256,  257,   -1,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  288,    0,  270,   -1,  272,  293,   -1,  275,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,
   -1,  317,   -1,  319,   -1,   -1,  302,   -1,   -1,  305,
  306,  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,
   -1,  317,   -1,  319,  256,  257,   -1,  259,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,    0,  270,   -1,
  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,  259,  260,  261,  262,  263,  264,  265,  266,
  267,    0,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
  302,   -1,   -1,  305,  306,  307,  308,  309,   -1,   -1,
  312,  313,   -1,  315,   -1,  317,   -1,  319,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,  305,  306,
  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,
  317,   -1,  319,  256,  257,   -1,  259,  260,  261,  262,
  263,  264,  265,  266,  267,    0,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,  259,  260,  261,  262,  263,
  264,  265,  266,  267,    0,   -1,  270,   -1,  272,  302,
   -1,  275,  305,  306,  307,  308,  309,   -1,   -1,  312,
  313,   -1,  315,   -1,  317,   -1,  319,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,  302,   -1,
   -1,  305,  306,  307,  308,  309,   -1,   -1,  312,  313,
   -1,  315,   -1,  317,   -1,  319,   -1,   -1,  256,  257,
   -1,  259,  260,  261,  262,  263,  264,  265,  266,  267,
    0,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  256,
  257,   -1,  259,  260,  261,  262,  263,  264,  265,  266,
  267,    0,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
   -1,   -1,   -1,   -1,  302,   -1,   -1,  305,  306,  307,
  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,
   -1,  319,   -1,   -1,   -1,  302,   -1,   -1,  305,  306,
  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,
  317,   -1,  319,  256,  257,   -1,  259,  260,  261,  262,
  263,  264,  265,  266,  267,    0,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,   -1,   -1,   -1,  256,  257,   -1,
  259,  260,  261,  262,  263,  264,  265,  266,  267,    0,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,  302,
   -1,    0,  305,  306,  307,  308,  309,   -1,   -1,  312,
  313,   -1,  315,   -1,  317,   -1,  319,   -1,   -1,    0,
   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,  308,
  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,
  319,  256,  257,   -1,  259,  260,  261,  262,  263,  264,
  265,  266,  267,   -1,   -1,  270,    0,  272,   -1,   -1,
  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,  259,  260,  261,  262,  263,  264,  265,
  266,  267,    0,   -1,  270,   -1,  272,  302,   -1,  275,
   -1,   -1,   -1,  308,  309,   -1,   -1,  312,  313,   -1,
  315,   -1,  317,  256,  319,   -1,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,    0,  302,  270,   -1,   -1,
   -1,   -1,  308,  309,   -1,   -1,  312,  313,   -1,  315,
   -1,  317,   -1,  319,   -1,   -1,  256,  257,   -1,  259,
  260,  261,  262,  263,  264,  265,  266,  267,    0,   -1,
  270,   -1,  272,   -1,   -1,  275,  309,  256,   -1,  312,
  259,  260,  261,  262,  263,  264,  265,  266,  267,    0,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,   -1,
   -1,    0,  302,   -1,   -1,   -1,   -1,   -1,  308,  309,
   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,  319,
   -1,   -1,    0,  302,   -1,   -1,   -1,   -1,   -1,  308,
  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,
  319,  256,   -1,   -1,   -1,  260,  261,  262,  263,  264,
  265,  266,  267,   -1,   -1,  270,    0,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  282,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,  256,   -1,  270,
   -1,  260,  261,  262,  263,  264,  265,  266,  267,   -1,
   -1,  270,   -1,  308,  309,  256,   -1,  312,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,
   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  309,   -1,  256,  312,   -1,   -1,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,   -1,  309,   -1,
   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,  312,   -1,
   -1,  256,   -1,   -1,   -1,  260,  261,  262,  263,  264,
  265,  266,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
   -1,  309,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,   -1,
   -1,   -1,   -1,   -1,  309,  256,   -1,  312,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,  256,   -1,  270,
   -1,  260,  261,  262,  263,  264,  265,  266,  267,   -1,
   -1,  270,   -1,   -1,   -1,   -1,   -1,  309,  256,   -1,
  312,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,   -1,   -1,   -1,   -1,   -1,  309,  259,
   -1,  312,   -1,    3,    4,    5,    6,   -1,   -1,    9,
  309,   11,  256,  312,   -1,   -1,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,   -1,  288,  289,
  290,  291,  292,  293,  312,   -1,  296,  297,  298,  299,
  300,  301,   -1,   43,   44,  305,  306,  307,   -1,  256,
   -1,  258,   -1,   -1,   54,   -1,   -1,   -1,  318,   -1,
   -1,   -1,   -1,   -1,  271,   -1,  273,  274,  312,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,
  287,   -1,   -1,   -1,   -1,   -1,  293,   87,   88,   -1,
   -1,   -1,   92,   93,   94,   -1,   -1,  304,  256,   -1,
  258,   -1,   -1,   -1,   -1,  312,   -1,  314,   -1,  316,
   -1,  318,   -1,  271,   -1,  273,  274,   -1,  276,  277,
  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,  287,
   -1,   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,  139,
   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,  148,   -1,
  150,   -1,   -1,   -1,  312,  155,  314,   -1,  316,   -1,
  318,  256,   -1,  258,   -1,   -1,   -1,   -1,   -1,   -1,
  170,   -1,   -1,   -1,   -1,   -1,  271,   -1,  273,  274,
   -1,  276,  277,  278,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,  293,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,  211,   -1,  213,  256,  215,  258,  312,   -1,  314,
   -1,  316,   -1,  318,   -1,   -1,   -1,   -1,   -1,  271,
   -1,  273,  274,  233,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,
   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  304,  256,   -1,  258,   -1,   -1,   -1,   -1,
  312,   -1,  314,   -1,  316,   -1,  318,   -1,  271,   -1,
  273,  274,   -1,  276,  277,  278,  279,  280,  281,  282,
   -1,   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  304,   -1,  258,   -1,   -1,   -1,   -1,   -1,  312,
   -1,  314,   -1,  316,   -1,  318,  271,   -1,  273,  274,
   -1,  276,  277,  278,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,  293,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,
   -1,  258,   -1,  308,   -1,   -1,   -1,  312,   -1,  314,
   -1,  316,   -1,  318,  271,   -1,  273,  274,   -1,  276,
  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,
  287,   -1,   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,  258,
   -1,  308,   -1,   -1,   -1,  312,   -1,  314,   -1,  316,
   -1,  318,  271,   -1,  273,  274,   -1,  276,  277,  278,
  279,  280,  281,  282,   -1,   -1,   -1,   -1,  287,   -1,
   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  312,   -1,  314,   -1,  316,   -1,  318,
  288,  289,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,   -1,   -1,   -1,  305,  306,  307,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,   -1,
  318,  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,
  305,  306,  307,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  318,  319,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,   -1,  318,  296,  297,
  298,  299,  300,  301,   -1,   -1,   -1,  305,  306,  307,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,
  318,  288,  289,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,  299,  300,  301,   -1,   -1,   -1,  305,  306,
  307,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,  288,  289,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,  305,
  306,  307,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,  288,  289,  290,  291,  292,  293,   -1,
   -1,  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,
  305,  306,  307,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,   -1,  318,  296,  297,  298,  299,  300,  301,
   -1,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  318,
};
#define YYFINAL 12
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 319
#if YYDEBUG
static const char *yyname[] = {

"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ELSE","IF","THEN","TYPE",
"RANDOM","FIXED","ORIGIN","DISTINCT","QUERY","OBS","PARAM","LIST","MAP",
"DISTRIBUTION","CASE","IN","EXISTS_","FORALL_","FOR","NULLITY","INT_LITERAL",
"DOUBLE_LITERAL","BOOLEAN_LITERAL","CHAR_LITERAL","STRING_LITERAL","ID",
"PARFACTOR","FACTOR","ERROR","ELSEIF","AT_","PLUS_","MULT_","DIV_","MOD_",
"POWER_","MINUS_","UMINUS","LST","LT_","GT_","LEQ_","GEQ_","EQEQ_","NEQ_","EQ_",
"DISTRIB","NOT_","AND_","OR_","DOUBLERIGHTARROW","COMMA","SEMI","COLON","DOT",
"NUMSIGN","RIGHTARROW","LPAREN","RPAREN","LBRACE","RBRACE","LBRACKET",
"RBRACKET",
};
static const char *yyrule[] = {
"$accept : program",
"program : opt_statement_lst",
"opt_statement_lst :",
"opt_statement_lst : statement_lst",
"statement_lst : statement_lst statement SEMI",
"statement_lst : statement SEMI",
"statement_lst : statement_lst statement",
"statement_lst : statement",
"statement : declaration_stmt",
"statement : evidence_stmt",
"statement : query_stmt",
"statement : error",
"declaration_stmt : type_decl",
"declaration_stmt : fixed_func_decl",
"declaration_stmt : rand_func_decl",
"declaration_stmt : origin_func_decl",
"declaration_stmt : number_stmt",
"declaration_stmt : distinct_decl",
"declaration_stmt : parameter_decl",
"declaration_stmt : distribution_decl",
"type_decl : TYPE ID",
"type_decl : TYPE error",
"type : refer_name",
"type : array_type",
"array_type_or_sub : refer_name LBRACKET",
"array_type : array_type_or_sub RBRACKET",
"array_type : array_type LBRACKET RBRACKET",
"opt_parenthesized_type_var_lst :",
"opt_parenthesized_type_var_lst : LPAREN RPAREN",
"opt_parenthesized_type_var_lst : LPAREN type_var_lst RPAREN",
"opt_parenthesized_type_var_lst : type_var_lst",
"var_decl : type ID",
"extra_commas : COMMA COMMA",
"extra_commas : extra_commas COMMA",
"type_var_lst : type_var_lst COMMA var_decl",
"type_var_lst : var_decl",
"type_var_lst : type_var_lst extra_commas var_decl",
"type_var_lst : type_var_lst var_decl",
"type_var_lst : type_var_lst COMMA error",
"fixed_func_decl : FIXED type ID opt_parenthesized_type_var_lst EQ_ expression",
"fixed_func_decl : FIXED error",
"rand_func_decl : RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body",
"rand_func_decl : RANDOM error dependency_statement_body",
"rand_func_decl : RANDOM error",
"number_stmt : NUMSIGN refer_name opt_parenthesized_origin_var_list dependency_statement_body",
"number_stmt : NUMSIGN opt_parenthesized_origin_var_list dependency_statement_body",
"number_stmt : NUMSIGN refer_name opt_parenthesized_origin_var_list DISTRIB error",
"number_stmt : NUMSIGN refer_name error",
"number_stmt : NUMSIGN error",
"opt_parenthesized_origin_var_list : LPAREN origin_var_list RPAREN",
"opt_parenthesized_origin_var_list :",
"origin_var_list : origin_var_list COMMA ID EQ_ ID",
"origin_var_list : origin_var_list extra_commas ID EQ_ ID",
"origin_var_list : origin_var_list COMMA ID EQ_ error",
"origin_var_list : origin_var_list ID EQ_ ID",
"origin_var_list : ID EQ_ ID",
"origin_var_list : ID ID",
"origin_func_decl : ORIGIN type ID LPAREN type RPAREN",
"origin_func_decl : ORIGIN type ID LPAREN error RPAREN",
"origin_func_decl : ORIGIN type LPAREN type RPAREN",
"origin_func_decl : ORIGIN type ID type RPAREN",
"origin_func_decl : ORIGIN error",
"distinct_decl : DISTINCT refer_name id_or_subid_list",
"id_or_subid_list : id_or_subid",
"id_or_subid_list : id_or_subid_list COMMA id_or_subid",
"id_or_subid_list : id_or_subid_list id_or_subid",
"id_or_subid_list : id_or_subid_list extra_commas id_or_subid",
"id_or_subid : ID",
"id_or_subid : ID LBRACKET INT_LITERAL RBRACKET",
"distribution_decl : DISTRIBUTION ID EQ_ refer_name LPAREN opt_expression_list RPAREN",
"refer_name : ID",
"refer_name : ID DOT refer_name",
"dependency_statement_body : DISTRIB expression",
"parameter_decl : PARAM type ID",
"parameter_decl : PARAM type ID COLON expression",
"expression : operation_expr",
"expression : literal",
"expression : function_call",
"expression : list_construct_expression",
"expression : map_construct_expression",
"expression : quantified_formula",
"expression : set_expr",
"expression : number_expr",
"expression : if_expr",
"expression : case_expr",
"literal : STRING_LITERAL",
"literal : CHAR_LITERAL",
"literal : INT_LITERAL",
"literal : DOUBLE_LITERAL",
"literal : BOOLEAN_LITERAL",
"literal : NULLITY",
"operation_expr : expression PLUS_ expression",
"operation_expr : expression MINUS_ expression",
"operation_expr : expression MULT_ expression",
"operation_expr : expression DIV_ expression",
"operation_expr : expression MOD_ expression",
"operation_expr : expression POWER_ expression",
"operation_expr : expression LT_ expression",
"operation_expr : expression GT_ expression",
"operation_expr : expression LEQ_ expression",
"operation_expr : expression GEQ_ expression",
"operation_expr : expression EQEQ_ expression",
"operation_expr : expression NEQ_ expression",
"operation_expr : expression AND_ expression",
"operation_expr : expression OR_ expression",
"operation_expr : expression DOUBLERIGHTARROW expression",
"operation_expr : expression LBRACKET expression RBRACKET",
"operation_expr : unary_operation_expr",
"unary_operation_expr : MINUS_ expression",
"unary_operation_expr : NOT_ expression",
"unary_operation_expr : AT_ expression",
"unary_operation_expr : LPAREN expression RPAREN",
"quantified_formula : FORALL_ type ID expression",
"quantified_formula : EXISTS_ type ID expression",
"function_call : refer_name LPAREN opt_expression_list RPAREN",
"function_call : refer_name",
"function_call : refer_name LPAREN error",
"if_expr : IF expression THEN expression ELSE expression",
"if_expr : IF expression THEN expression",
"case_expr : CASE expression IN map_construct_expression",
"opt_expression_list : expression_list",
"opt_expression_list :",
"expression_list : expression_list COMMA expression",
"expression_list : expression_list extra_commas expression",
"expression_list : expression",
"list_construct_expression : LBRACKET opt_expression_list RBRACKET",
"list_construct_expression : LBRACKET semi_colon_separated_expression_list RBRACKET",
"semi_colon_separated_expression_list : expression_list SEMI semi_colon_separated_expression_list",
"semi_colon_separated_expression_list : expression_list SEMI expression_list",
"map_construct_expression : LBRACE expression_pair_list RBRACE",
"expression_pair_list : expression_pair_list COMMA expression RIGHTARROW expression",
"expression_pair_list : expression RIGHTARROW expression",
"number_expr : NUMSIGN set_expr",
"number_expr : NUMSIGN type",
"number_expr : NUMSIGN error",
"set_expr : explicit_set",
"set_expr : tuple_set",
"explicit_set : LBRACE opt_expression_list RBRACE",
"comprehension_expr : expression_list FOR type_var_lst COLON expression",
"comprehension_expr : expression_list FOR type_var_lst",
"tuple_set : LBRACE comprehension_expr RBRACE",
"evidence_stmt : OBS evidence",
"evidence_stmt : OBS error",
"evidence : value_evidence",
"value_evidence : expression EQ_ expression",
"value_evidence : error EQ_ expression",
"value_evidence : expression EQ_ error",
"query_stmt : QUERY expression",
"query_stmt : QUERY error",

};
#endif

int      yydebug;
int      yynerrs;

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#endif
#endif

#define YYINITSTACKSIZE 200

typedef struct {
    unsigned stacksize;
    short    *s_base;
    short    *s_mark;
    short    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
#line 787 "blog.yacc"



void yyerror(const char *s) {
  cout << "Parse error at line number: " << curr_line << " and column number: " << curr_col << "!  Message: " << s << endl;
  // might as well halt now:
  //exit(-1);
}
#line 1129 "parser.cpp"

#if YYDEBUG
#include <stdio.h>		/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (short *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return -1;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return -1;

    data->l_base = newvs;
    data->l_mark = newvs + i;

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab

int
YYPARSE_DECL()
{
    int yym, yyn, yystate;
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack)) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    yystate = 0;
    *yystack.s_mark = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
        {
            goto yyoverflow;
        }
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;

    yyerror("syntax error");

    goto yyerrlab;

yyerrlab:
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yystack.s_mark]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
                {
                    goto yyoverflow;
                }
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    if (yym)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    {
case 4:
#line 210 "blog.yacc"
	{
    if(yystack.l_mark[-1].stmt != NULL){
      blog->add(yystack.l_mark[-1].stmt);
    }
  }
break;
case 5:
#line 215 "blog.yacc"
	{ blog->add(yystack.l_mark[-1].stmt); }
break;
case 6:
#line 217 "blog.yacc"
	{
    yyerror("missing ; after statement");
  }
break;
case 7:
#line 220 "blog.yacc"
	{
    yyerror("missing ; after statement");
  }
break;
case 8:
#line 226 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 9:
#line 227 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 10:
#line 228 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 11:
#line 229 "blog.yacc"
	{
    yyerror("incorrect statement");
  }
break;
case 12:
#line 236 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 13:
#line 237 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].funcdec; }
break;
case 14:
#line 238 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].funcdec; }
break;
case 15:
#line 239 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].origdec; }
break;
case 16:
#line 240 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].numstdec; }
break;
case 17:
#line 241 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].distdec; }
break;
case 18:
#line 242 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 19:
#line 243 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 20:
#line 248 "blog.yacc"
	{ yyval.stmt = new TypDecl(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue())); }
break;
case 21:
#line 250 "blog.yacc"
	{
    yyerror("invalid type declaration");
  }
break;
case 22:
#line 256 "blog.yacc"
	{ yyval.typ = new Ty(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue())); }
break;
case 23:
#line 257 "blog.yacc"
	{ yyval.typ = yystack.l_mark[0].typ; }
break;
case 24:
#line 261 "blog.yacc"
	{ yyval.sval = yystack.l_mark[-1].sval; }
break;
case 25:
#line 265 "blog.yacc"
	{ yyval.typ = new Ty(curr_line, curr_col, Symbol(yystack.l_mark[-1].sval->getValue()), 1); }
break;
case 26:
#line 267 "blog.yacc"
	{ yystack.l_mark[-2].typ->setDim(yystack.l_mark[-2].typ->getDim() + 1);
      yyval.typ = yystack.l_mark[-2].typ; }
break;
case 27:
#line 272 "blog.yacc"
	{ yyval.varlist = NULL; }
break;
case 28:
#line 273 "blog.yacc"
	{yyval.varlist = NULL; }
break;
case 29:
#line 274 "blog.yacc"
	{ yyval.varlist = yystack.l_mark[-1].varlist; }
break;
case 30:
#line 275 "blog.yacc"
	{
    yyerror("missing parentheses");
  }
break;
case 31:
#line 281 "blog.yacc"
	{ 
    yyval.vardec = new VarDecl(curr_line, curr_col, *yystack.l_mark[-1].typ, Symbol(yystack.l_mark[0].sval->getValue())); 
  }
break;
case 34:
#line 291 "blog.yacc"
	{ 
      yyval.varlist = yystack.l_mark[-2].varlist; 
      yyval.varlist->push_back(*yystack.l_mark[0].vardec);
      delete(yystack.l_mark[0].vardec);
    }
break;
case 35:
#line 296 "blog.yacc"
	{ 
      yyval.varlist = new vector<VarDecl>();
      yyval.varlist->push_back(*yystack.l_mark[0].vardec);
      delete(yystack.l_mark[0].vardec);
    }
break;
case 36:
#line 301 "blog.yacc"
	{
    yyerror("extra commas in type variable list");
  }
break;
case 37:
#line 304 "blog.yacc"
	{
    yyerror("missing commas");
  }
break;
case 38:
#line 308 "blog.yacc"
	{
    yyerror("incorrect variable declaration");
  }
break;
case 39:
#line 315 "blog.yacc"
	{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, false, *(yystack.l_mark[-4].typ), Symbol(yystack.l_mark[-3].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-2].varlist != NULL){
        for(size_t i = 0; i < yystack.l_mark[-2].varlist->size(); i++){
          yyval.funcdec->addArg((*yystack.l_mark[-2].varlist)[i]);
        }
        delete(yystack.l_mark[-2].varlist);
      }
    }
break;
case 40:
#line 325 "blog.yacc"
	{
    yyerror("error in fixed function declaration");
  }
break;
case 41:
#line 332 "blog.yacc"
	{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, true, *(yystack.l_mark[-3].typ), Symbol(yystack.l_mark[-2].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-1].varlist != NULL){
        for(size_t i = 0; i < yystack.l_mark[-1].varlist->size(); i++){
          yyval.funcdec->addArg((*yystack.l_mark[-1].varlist)[i]);
        }
        delete(yystack.l_mark[-1].varlist);
      }
    }
break;
case 42:
#line 342 "blog.yacc"
	{
      yyerror("incorrect function header, return type, or function name");
    }
break;
case 43:
#line 346 "blog.yacc"
	{
      yyerror("error in random function declaration");
    }
break;
case 44:
#line 353 "blog.yacc"
	{
      yyval.numstdec = new NumStDecl(curr_line, curr_col, Symbol(yystack.l_mark[-2].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-1].varlst != NULL){
        for(size_t i = 0; i < yystack.l_mark[-1].varlst->size(); i++){
          yyval.numstdec->add(get<0>((*yystack.l_mark[-1].varlst)[i]), get<1>((*yystack.l_mark[-1].varlst)[i]));
        }
        delete(yystack.l_mark[-1].varlst);
      }
      /*$$->add(Symbol($4->getValue()), Symbol($6->getValue()));*/
    }
break;
case 45:
#line 364 "blog.yacc"
	{
    yyerror("missing type name in number statement");
  }
break;
case 46:
#line 368 "blog.yacc"
	{
    yyerror("missing body in number statement");
  }
break;
case 47:
#line 372 "blog.yacc"
	{
    yyerror("missing body in number statement");
  }
break;
case 48:
#line 376 "blog.yacc"
	{
    yyerror("error in number statement");
  }
break;
case 49:
#line 382 "blog.yacc"
	{yyval.varlst = yystack.l_mark[-1].varlst; }
break;
case 50:
#line 383 "blog.yacc"
	{yyval.varlst = NULL; }
break;
case 51:
#line 388 "blog.yacc"
	{
    yyval.varlst = yystack.l_mark[-4].varlst;
    yyval.varlst->push_back(make_tuple(Symbol(yystack.l_mark[-2].sval->getValue()), Symbol(yystack.l_mark[0].sval->getValue())));
  }
break;
case 52:
#line 393 "blog.yacc"
	{
    yyerror("extra commas");
  }
break;
case 53:
#line 397 "blog.yacc"
	{
    yyerror("missing origin variable name");
  }
break;
case 54:
#line 401 "blog.yacc"
	{
    yyerror("missing comma");
  }
break;
case 55:
#line 405 "blog.yacc"
	{ 
    yyval.varlst = new vector<tuple<Symbol, Symbol>>();
    yyval.varlst->push_back(make_tuple(Symbol(yystack.l_mark[-2].sval->getValue()), Symbol(yystack.l_mark[0].sval->getValue())));
  }
break;
case 56:
#line 410 "blog.yacc"
	{
    yyerror("missing =");
  }
break;
case 57:
#line 417 "blog.yacc"
	{ yyval.origdec = new OriginDecl(curr_line, curr_col, yystack.l_mark[-4].typ->getTyp(), Symbol(yystack.l_mark[-3].sval->getValue()), yystack.l_mark[-1].typ->getTyp());  }
break;
case 58:
#line 419 "blog.yacc"
	{ yyerror("syntax error in type argument of origin function"); }
break;
case 59:
#line 421 "blog.yacc"
	{
    yyerror("missing type or origin function name");
  }
break;
case 60:
#line 425 "blog.yacc"
	{
    yyerror("missing ( in origin function");
  }
break;
case 61:
#line 429 "blog.yacc"
	{
    yyerror("error in origin function definition");
  }
break;
case 62:
#line 436 "blog.yacc"
	{
      yyval.distdec = new DistinctDecl(curr_line, curr_col, Symbol(yystack.l_mark[-1].sval->getValue()));
      if (yystack.l_mark[0].symbintvect != NULL){
        for(size_t i = 0; i < yystack.l_mark[0].symbintvect->size(); i++){
          yyval.distdec->add(get<0>((*yystack.l_mark[0].symbintvect)[i]), get<1>((*yystack.l_mark[0].symbintvect)[i]));
        }
        delete(yystack.l_mark[0].symbintvect);
      }
    }
break;
case 63:
#line 449 "blog.yacc"
	{
      yyval.symbintvect = new vector<tuple<string, int>>();
      yyval.symbintvect->push_back(*yystack.l_mark[0].symbintpair);
      delete(yystack.l_mark[0].symbintpair);
    }
break;
case 64:
#line 455 "blog.yacc"
	{
      yyval.symbintvect = yystack.l_mark[-2].symbintvect;
      yyval.symbintvect->push_back(*yystack.l_mark[0].symbintpair);
      delete(yystack.l_mark[0].symbintpair);
    }
break;
case 65:
#line 461 "blog.yacc"
	{
      yyerror("missing comma");
    }
break;
case 66:
#line 465 "blog.yacc"
	{
      yyerror("missing comma");
    }
break;
case 67:
#line 473 "blog.yacc"
	{ 
        /*tuple<string, int> idint = make_tuple($1->getValue(), 1);*/
        yyval.symbintpair = new tuple<string, int>(yystack.l_mark[0].sval->getValue(), 1);
       }
break;
case 68:
#line 478 "blog.yacc"
	{ 
      /*tuple<string, int> idint2 = make_tuple($1->getValue(), $3->getValue());*/
      yyval.symbintpair = new tuple<string, int>(yystack.l_mark[-3].sval->getValue(), yystack.l_mark[-1].ival->getValue());
    }
break;
case 69:
#line 487 "blog.yacc"
	{ }
break;
case 70:
#line 491 "blog.yacc"
	{ 
      yyval.sval = new BLOGSymbol<string>(curr_line, curr_col, yystack.l_mark[0].sval->getValue());
    }
break;
case 71:
#line 494 "blog.yacc"
	{
      yyval.sval = new BLOGSymbol<string>(curr_line, curr_col, yystack.l_mark[-2].sval->getValue() + "." + yystack.l_mark[0].sval->getValue());
    }
break;
case 72:
#line 501 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 73:
#line 507 "blog.yacc"
	{ }
break;
case 74:
#line 508 "blog.yacc"
	{ }
break;
case 75:
#line 512 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 76:
#line 513 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 77:
#line 514 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 78:
#line 515 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 79:
#line 516 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].mapexp;}
break;
case 80:
#line 517 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 81:
#line 518 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].setexp; }
break;
case 82:
#line 519 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].cardexp; }
break;
case 83:
#line 520 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 84:
#line 521 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 85:
#line 526 "blog.yacc"
	{yyval.exp = new StringLiteral(curr_line, curr_col, yystack.l_mark[0].sval->getValue()); }
break;
case 86:
#line 528 "blog.yacc"
	{string charstr(1, yystack.l_mark[0].chrval->getValue()); yyval.exp = new StringLiteral(curr_line, curr_col, charstr); }
break;
case 87:
#line 530 "blog.yacc"
	{yyval.exp = new IntLiteral(curr_line, curr_col, yystack.l_mark[0].ival->getValue()); }
break;
case 88:
#line 532 "blog.yacc"
	{yyval.exp = new DoubleLiteral(curr_line, curr_col, yystack.l_mark[0].dblval->getValue()); }
break;
case 89:
#line 534 "blog.yacc"
	{yyval.exp = new BoolLiteral(curr_line, curr_col, yystack.l_mark[0].boolval->getValue()); }
break;
case 90:
#line 536 "blog.yacc"
	{yyval.exp = new NullLiteral(curr_line, curr_col); }
break;
case 91:
#line 541 "blog.yacc"
	{ 
      yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::PLUS, yystack.l_mark[-2].exp, yystack.l_mark[0].exp);   
    }
break;
case 92:
#line 545 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MINUS, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 93:
#line 547 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MUL, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 94:
#line 549 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::DIV, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 95:
#line 551 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MOD, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 96:
#line 553 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::POWER, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 97:
#line 555 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::LT, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 98:
#line 557 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::GT, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 99:
#line 559 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::LE, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 100:
#line 561 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::GE, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 101:
#line 563 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::EQ, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 102:
#line 565 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::NEQ, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 103:
#line 567 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::AND, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 104:
#line 569 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::OR, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 105:
#line 571 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::IMPLY, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 106:
#line 573 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::SUB, yystack.l_mark[-3].exp, yystack.l_mark[-1].exp); }
break;
case 107:
#line 574 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 108:
#line 579 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MINUS, nullptr, yystack.l_mark[0].exp); }
break;
case 109:
#line 581 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::NOT, NULL, yystack.l_mark[0].exp); }
break;
case 110:
#line 583 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::AT, NULL, yystack.l_mark[0].exp); }
break;
case 111:
#line 584 "blog.yacc"
	{yyval.exp = yystack.l_mark[-1].exp; }
break;
case 112:
#line 589 "blog.yacc"
	{yyval.exp = new QuantExpr(curr_line, curr_col, AbsynConstant::FORALL, *(new VarDecl(curr_line, curr_col, *yystack.l_mark[-2].typ, Symbol(yystack.l_mark[-1].sval->getValue()))), yystack.l_mark[0].exp); }
break;
case 113:
#line 591 "blog.yacc"
	{yyval.exp = new QuantExpr(curr_line, curr_col, AbsynConstant::EXISTS, *(new VarDecl(curr_line, curr_col, *yystack.l_mark[-2].typ, Symbol(yystack.l_mark[-1].sval->getValue()))), yystack.l_mark[0].exp); }
break;
case 114:
#line 596 "blog.yacc"
	{ 
    yyval.exp = new FuncApp(curr_line, curr_col, Symbol(yystack.l_mark[-3].sval->getValue())); 
    if (yystack.l_mark[-1].explst != NULL){
      for(size_t i = 0; i < yystack.l_mark[-1].explst->size(); i++){
        yyval.exp->add((*yystack.l_mark[-1].explst)[i]);
      }
      delete(yystack.l_mark[-1].explst);
    }
  }
break;
case 115:
#line 606 "blog.yacc"
	{
    yyval.exp = new FuncApp(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue()));
  }
break;
case 116:
#line 610 "blog.yacc"
	{
    yyerror("error in body of function call");
  }
break;
case 117:
#line 617 "blog.yacc"
	{ yyval.exp = new IfExpr(curr_line, curr_col, yystack.l_mark[-4].exp, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 118:
#line 619 "blog.yacc"
	{ yyval.exp = new IfExpr(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 119:
#line 624 "blog.yacc"
	{
    if (yystack.l_mark[-2].exp != NULL && yystack.l_mark[0].mapexp != NULL){
      yyval.exp = new CaseExpr(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].mapexp);
    }
    else{
      yyerror("error in case expression");
    }
  }
break;
case 120:
#line 635 "blog.yacc"
	{yyval.explst = yystack.l_mark[0].explst;}
break;
case 121:
#line 636 "blog.yacc"
	{yyval.explst = NULL; }
break;
case 122:
#line 641 "blog.yacc"
	{ yyval.explst = yystack.l_mark[-2].explst;
      yyval.explst->push_back(yystack.l_mark[0].exp);
    }
break;
case 123:
#line 645 "blog.yacc"
	{
    yyerror("extra commas in expression list");
  }
break;
case 124:
#line 649 "blog.yacc"
	{ 
      yyval.explst = new vector<Expr*>();
      yyval.explst->push_back(yystack.l_mark[0].exp);
    }
break;
case 125:
#line 657 "blog.yacc"
	{ }
break;
case 126:
#line 658 "blog.yacc"
	{ }
break;
case 127:
#line 663 "blog.yacc"
	{ }
break;
case 128:
#line 664 "blog.yacc"
	{ }
break;
case 129:
#line 668 "blog.yacc"
	{ 
    /*$$ = $2; */
    yyval.mapexp = new MapExpr(curr_line, curr_col);
    for (size_t i = 0; i < yystack.l_mark[-1].exptuplst->size(); i++){
      yyval.mapexp->addMap(get<0>((*yystack.l_mark[-1].exptuplst)[i]), get<1>((*yystack.l_mark[-1].exptuplst)[i]));
    }
    delete(yystack.l_mark[-1].exptuplst);
    
  }
break;
case 130:
#line 681 "blog.yacc"
	{ 
      yyval.exptuplst = yystack.l_mark[-4].exptuplst;
      yyval.exptuplst->push_back(make_tuple(yystack.l_mark[-2].exp, yystack.l_mark[0].exp));
    }
break;
case 131:
#line 686 "blog.yacc"
	{ 
      yyval.exptuplst = new vector<tuple<Expr*, Expr*>>();
      yyval.exptuplst->push_back(make_tuple(yystack.l_mark[-2].exp, yystack.l_mark[0].exp));
    }
break;
case 132:
#line 694 "blog.yacc"
	{ yyval.cardexp = new CardinalityExpr(curr_line, curr_col, (Expr*)yystack.l_mark[0].setexp); }
break;
case 133:
#line 696 "blog.yacc"
	{ 
      VarDecl var(curr_line, curr_col, *yystack.l_mark[0].typ);
      yyval.cardexp = new CardinalityExpr(curr_line, curr_col, new CondSet(curr_line, curr_col, var));
  }
break;
case 134:
#line 701 "blog.yacc"
	{
    yyerror("expecting number expression here.");
  }
break;
case 135:
#line 708 "blog.yacc"
	{yyval.setexp = yystack.l_mark[0].setexp; }
break;
case 136:
#line 709 "blog.yacc"
	{yyval.setexp = yystack.l_mark[0].setexp; }
break;
case 137:
#line 714 "blog.yacc"
	{
      yyval.setexp = new ListSet(curr_line, curr_col);
      for(size_t i = 0; i < yystack.l_mark[-1].explst->size(); i++){
        yyval.setexp->add((*yystack.l_mark[-1].explst)[i]);
      }
      delete(yystack.l_mark[-1].explst);
    }
break;
case 138:
#line 725 "blog.yacc"
	{
      yyval.compexp[0] = yystack.l_mark[-4].explst; yyval.compexp[1] = yystack.l_mark[-2].varlist; yyval.compexp[2] = yystack.l_mark[0].exp;
    }
break;
case 139:
#line 729 "blog.yacc"
	{
      yyval.compexp[0] = yystack.l_mark[-2].explst; yyval.compexp[1] = yystack.l_mark[0].varlist; yyval.compexp[2] = NULL;
    }
break;
case 140:
#line 738 "blog.yacc"
	{ 
    if (yystack.l_mark[-1].compexp != NULL){
      yyval.setexp = new TupleSetExpr(curr_line, curr_col, *((vector<Expr*>*)yystack.l_mark[-1].compexp[0]), *((vector<VarDecl>*)yystack.l_mark[-1].compexp[1]), (Expr*)yystack.l_mark[-1].compexp[2]); 
      delete((vector<Expr*>*)yystack.l_mark[-1].compexp[0]);
      delete((vector<VarDecl>*)yystack.l_mark[-1].compexp[1]);
    }
    else{
      yyerror("invalid tupleset");
    }
  }
break;
case 141:
#line 751 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 142:
#line 753 "blog.yacc"
	{
    yyerror("incorrect obs statement");
  }
break;
case 143:
#line 759 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 144:
#line 764 "blog.yacc"
	{
    yyval.stmt = new Evidence(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); 
  }
break;
case 145:
#line 768 "blog.yacc"
	{
    yyerror("incorrect lefthand expression in evidence");
  }
break;
case 146:
#line 772 "blog.yacc"
	{
    yyerror("incorrect righthand expression in evidence");
  }
break;
case 147:
#line 779 "blog.yacc"
	{ yyval.stmt = new Query(curr_line, curr_col, yystack.l_mark[0].exp); }
break;
case 148:
#line 781 "blog.yacc"
	{
    yyerror("invalid query");
  }
break;
#line 2103 "parser.cpp"
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
        {
            if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
    {
        goto yyoverflow;
    }
    *++yystack.s_mark = (short) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;

yyoverflow:
    yyerror("yacc stack overflow");

yyabort:
    yyfreestack(&yystack);
    return (1);

yyaccept:
    yyfreestack(&yystack);
    return (0);
}

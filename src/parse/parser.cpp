#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 2 "blog.yacc"
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <tuple>
#include "BLOGSymbol.h"
#include "../absyn/Absyn.h"
#include "../absyn/ArrayExpr.h"
#include "../absyn/BoolLiteral.h"
#include "../absyn/BlogProgram.h"
#include "../absyn/CardinalityExpr.h"
#include "../absyn/CondSet.h"
#include "../absyn/Decl.h"
#include "../absyn/DistinctDecl.h"
#include "../absyn/DistrExpr.h"
#include "../absyn/DoubleLiteral.h"
#include "../absyn/Evidence.h"
#include "../absyn/Expr.h"
#include "../absyn/FuncApp.h"
#include "../absyn/FuncDecl.h"
#include "../absyn/IfExpr.h"
#include "../absyn/IntLiteral.h"
#include "../absyn/Literal.h"
#include "../absyn/ListSet.h"
#include "../absyn/MapExpr.h"
#include "../absyn/NullLiteral.h"
#include "../absyn/NumStDecl.h"
#include "../absyn/OpExpr.h"
#include "../absyn/OriginDecl.h"
#include "../absyn/QuantExpr.h"
#include "../absyn/Query.h"
#include "../absyn/SetExpr.h"
#include "../absyn/Stmt.h"
#include "../absyn/StringLiteral.h"
#include "../absyn/Symbol.h"
#include "../absyn/TimeStampLiteral.h"
#include "../absyn/Ty.h"
#include "../absyn/TypDecl.h"
#include "../absyn/VarDecl.h"
#include "../absyn/VarRef.h"
using namespace std;
using namespace swift::absyn;

/* stuff from flex that bison needs to know about: */
extern "C" int yylex();
extern "C" int yyparse();
extern "C" FILE *yyin;
extern "C" int yylineno;
extern "C" int curr_line;
extern "C" int curr_col;

void yyerror(const char *s);
BlogProgram *blog;
bool error_found = false;

BlogProgram* parse(const char* inp) {
  blog = new BlogProgram(0, 0);
  /* open a file handle to a particular file:*/
  FILE *myfile = fopen(inp, "r");
  /* make sure it is valid:*/
  if (!myfile) {
    cout << "I can't open input.in" << endl;
    exit(0);
    /*return -1;*/
  }
  /* set flex to read from it instead of defaulting to STDIN:*/
  yyin = myfile;
  /* parse through the input until there is no more:*/
  do {
    yyparse();
  } while (!feof(yyin));
  return blog;  
}
#line 78 "blog.yacc"
typedef union {
  int i;
  class BLOGSymbol<int>* ival;
  class BLOGSymbol<double>* dblval;
  class BLOGSymbol<char>* chrval;
  class BLOGSymbol<bool>* boolval;
  class BLOGSymbol<string>* sval;
  vector<tuple<string,int>>* symbintvect;
  tuple<string,int>* symbintpair;
  class Absyn* ast;
  class ArrayExpr* arrayexp;
  class BoolLiteral* boollit;
  class BlogProgram* bprog;
  class CardinalityExpr* cardexp;
  class CondSet* cset;
  class Decl* dec;
  class DistinctDecl* distdec;
  class DistrExpr* distrexp;
  class DoubleLiteral* doublelit;
  class Evidence* evid;
  class Expr* exp;
  class FuncApp* fapp;
  class FuncDecl* funcdec;
  class IfExpr* ifexp;
  class IntLiteral* intlit;
  class Literal* lit;
  class ListSet* lset;
  class MapExpr* mapexp;
  class NullLiteral* nullit;
  class NumStDecl* numstdec;
  class OpExpr* opexp;
  class OriginDecl* origdec;
  class QuantExpr* quantexp;
  class Query* query;
  class SetExpr* setexp;
  class Stmt* stmt;
  class StringLiteral* stringlit;
  class Symbol* symb;
  class Ty* typ;
  class TypDecl* typdec;
  class VarDecl* vardec;
  class VarRef* varref;
  vector<VarDecl>* varlist;
  vector<tuple<Expr*, Expr*>>* exptuplst;
  vector<Expr*>* explst;
  vector<tuple<Symbol, Symbol>>* varlst;
} YYSTYPE;
#line 135 "y.tab.c"
#define ELSE 257
#define IF 258
#define THEN 259
#define TYPE 260
#define RANDOM 261
#define FIXED 262
#define ORIGIN 263
#define DISTINCT 264
#define QUERY 265
#define OBS 266
#define PARAM 267
#define LIST 268
#define MAP 269
#define DISTRIBUTION 270
#define EXISTS_ 271
#define FORALL_ 272
#define FOR 273
#define NULLITY 274
#define INT_LITERAL 275
#define DOUBLE_LITERAL 276
#define BOOLEAN_LITERAL 277
#define CHAR_LITERAL 278
#define STRING_LITERAL 279
#define ID 280
#define PARFACTOR 281
#define FACTOR 282
#define ERROR 283
#define ELSEIF 284
#define AT_ 285
#define PLUS_ 286
#define MULT_ 287
#define DIV_ 288
#define MOD_ 289
#define POWER_ 290
#define MINUS_ 291
#define LST 292
#define LT_ 293
#define GT_ 294
#define LEQ_ 295
#define GEQ_ 296
#define EQEQ_ 297
#define NEQ_ 298
#define EQ_ 299
#define DISTRIB 300
#define NOT_ 301
#define AND_ 302
#define OR_ 303
#define DOUBLERIGHTARROW 304
#define COMMA 305
#define SEMI 306
#define COLON 307
#define DOT 308
#define NUMSIGN 309
#define RIGHTARROW 310
#define LPAREN 311
#define RPAREN 312
#define LBRACE 313
#define RBRACE 314
#define LBRACKET 315
#define RBRACKET 316
#define NORPAREN 317
#define g 318
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,   52,   52,   53,   53,   53,    1,    1,    1,    1,
    2,    2,    2,    2,    2,    2,    2,    2,    3,    3,
   38,   38,   54,   38,   42,   40,   39,   51,   51,   41,
   44,   44,   44,   49,   49,   49,   55,   55,   43,   43,
   43,   43,   56,   56,   10,   10,   10,   11,   11,   11,
    8,    8,    8,    8,   45,   45,   46,   46,   46,   46,
   46,   46,   57,   57,    4,   12,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   47,   47,   50,   50,   29,
   29,   29,   29,   29,   29,   29,   26,   26,    5,    5,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   18,   18,   18,   18,   18,   18,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   58,   58,   58,   58,   58,
   58,   58,   58,   58,   58,   58,   58,   58,   58,   20,
   20,   20,   20,   21,   21,   21,   21,   21,   21,   23,
   25,   22,   35,   35,   36,   36,   24,   24,   34,   34,
   28,   37,   37,   27,   27,   27,    9,    9,    9,    9,
    9,   59,   59,   60,   60,   30,   30,   31,   32,   32,
   33,   33,    6,   13,   13,   14,   14,   14,   15,    7,
    7,   16,
};
short yylen[] = {                                         2,
    1,    0,    1,    2,    1,    1,    1,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    3,    2,
    1,    1,    0,    3,    1,    4,    2,    2,    3,    6,
    0,    2,    3,    2,    1,    3,    1,    2,    3,    1,
    2,    4,    1,    2,    7,    7,    6,    6,    6,    5,
    5,    5,    5,    5,    3,    0,    5,    3,    4,    6,
    6,    4,    1,    2,    8,    3,    2,    5,    3,    6,
    4,    7,    5,    5,    5,    1,    4,    1,    3,    2,
    2,    1,    5,    5,    5,    3,    2,    0,    4,    6,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    4,    2,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    2,    3,    4,    4,    3,    3,    4,    4,    4,
    1,    5,    1,    0,    3,    1,    3,    3,    3,    3,
    3,    5,    3,    2,    2,    2,    7,    6,    6,    9,
    5,    1,    2,    1,    2,    1,    1,    3,    6,    4,
    7,    5,    3,    1,    1,    3,    3,    3,    3,    3,
    3,    1,
};
short yydefred[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    5,    7,   11,   18,   17,    8,    9,   15,
   14,   12,   13,   16,    1,    0,   10,    0,   20,    0,
    0,   25,    0,   22,   23,   21,    0,    0,    0,    0,
    0,    0,    0,  106,  103,  104,  105,  102,  101,    0,
    0,  126,  127,  128,  129,  130,    0,  131,  132,  133,
  134,  135,  136,    0,    0,  137,  138,  139,    0,    0,
    0,    0,    0,    0,   93,   91,  125,   97,   92,   94,
   95,  100,   99,   96,   98,  176,  177,    0,    0,    0,
    0,  185,  184,    0,    0,    0,    0,    0,    0,    0,
    4,   19,    0,    0,    0,    0,    0,    0,    0,    0,
   66,  191,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  166,    0,  164,  165,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  190,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  123,    0,    0,    0,  183,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   24,    0,    0,    0,    0,    0,    0,    0,
   43,    0,    0,    0,    0,    0,   79,    0,  143,    0,
  178,    0,    0,  161,    0,  158,  157,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  188,    0,    0,  189,
   89,    0,    0,    0,    0,    0,    0,    0,    0,   82,
    0,    0,    0,    0,   26,    0,    0,   32,    0,    0,
   40,    0,    0,    0,    0,  172,    0,    0,  171,  174,
    0,  173,    0,    0,    0,    0,    0,   44,  149,    0,
  148,    0,    0,    0,    0,    0,    0,  180,  159,    0,
  122,  150,    0,    0,    0,    0,    0,   55,    0,    0,
    0,   81,    0,    0,   52,   53,   54,   51,    0,   49,
    0,    0,   33,   41,   48,    0,   47,    0,    0,    0,
  169,  175,  168,   68,   75,    0,   73,    0,  152,    0,
    0,   90,    0,   58,    0,    0,    0,    0,    0,    0,
   86,   30,   37,    0,   39,    0,   46,   45,  167,    0,
   70,    0,    0,  179,    0,   59,   62,    0,    0,    0,
    0,    0,    0,   38,   42,    0,   72,   65,   57,    0,
    0,    0,   84,   85,   83,  170,   61,   60,   87,
};
short yydgoto[] = {                                      12,
   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   23,   24,   91,   92,   93,   73,  134,   75,   76,   77,
   78,   79,   80,   81,   82,  353,   83,   84,  231,   85,
   86,   87,    0,  135,  130,  131,  132,  239,    0,   34,
   35,   36,  240,  172,  165,  225,    0,   40,  241,   88,
    0,   25,   26,  106,  324,  182,  339,   89,  178,  251,
};
short yysindex[] = {                                   1338,
 -293, -245,  -47,  -47,  -47, -253,  988, 1037,  -47, -194,
 -235,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1388,    0, -198,    0, -203,
 -183,    0, -160,    0,    0,    0, -116, -113, -106,  -54,
 -103,  -37,  171,    0,    0,    0,    0,    0,    0, -169,
 1481,    0,    0,    0,    0,    0, 1481,    0,    0,    0,
    0,    0,    0,  -75, 1481,    0,    0,    0, -236, 1481,
 1391, 1481,  -93, 2009,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -96, 1481,  -63,
  -66,    0,    0, 1797,  -57,  -35,    4,   -6, -248, -293,
    0,    0,   27,  -47, -222,  -10, -216,   26,    5, -268,
    0,    0, 1481,   39, 1481,   42,  -75, 2009,  759, -169,
   25, 2078,    0, 1391,    0,    0, 1820, -169, 1850,   24,
   38, -118,   65, 2009,   30,   32,  -51,    0, 1661, 1706,
 1706, 1706, 1706, 1481, 1616, 1616, 1616, 1616, 1616, 1616,
 1571, 1571, 1526, 1481,    0, 1481, 2009, 1481,    0, 1086,
   66,  -34,  -75,   78, -251, -251, -220,   68,   76, -251,
  -87, -217,    0,   90,   98,   31, -149,   49,  123, -260,
    0, -167, 2009, 1135, 2009, 1184,    0, 1481,    0, 1481,
    0, 1481, 1481,    0, -264,    0,    0, 1481,  759,   91,
   91,   91,   91,  759, 1323, 1323, 1323, 1323, 1323, 1323,
 2078, 2078, 2055, 1766,  102, 2009,    0, 2009, 1481,    0,
    0, 1481,   99,  116, -193, 1481, 1481, 1233, -251,    0,
  111,  114, 1436,  119,    0,  -47,  125,    0,  152,  -20,
    0, 1481,  127, 1481, 1282,    0,  124,   49,    0,    0,
  -56,    0,  129,  122,  126, -259,  128,    0,    0, 2009,
    0, 2009,  134, 2009, 2009, 1880, 1481,    0,    0,  -51,
    0,    0, 1910, 1481,  168,  150,  170,    0,  149,   37,
 1331,    0, 2009,  142,    0,    0,    0,    0,  163,    0,
  178,  136,    0,    0,    0, 1933,    0, 1956,  157,  165,
    0,    0,    0,    0,    0,  153,    0,  204,    0, 1481,
 1979,    0,  169,    0,  200, -257,  208, -251, -251, -251,
    0,    0,    0,  216,    0,  154,    0,    0,    0,  191,
    0,  193, 2009,    0,  205,    0,    0,  234,  222,  228,
  258,  258,  258,    0,    0,  -53,    0,    0,    0,  249,
  251, -251,    0,    0,    0,    0,    0,    0,    0,
};
short yyrindex[] = {                                    532,
    1,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  533,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   97,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  226,  232,    0,  243,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2032,    0,    0,  -90, -173,    0,
    0,    0,    0,    0, -124,    0,  256,    0,  -18,    0,
    0,    0,    0,    0,    0,    0,    0,   45,  612,  250,
    0, -205,    0,  226,    0,    0,    0, 1736, -115,    0,
 -284,    0,    0,  573,    0,    0,  247,    0,  643,  196,
  248,  300,  352,    0, -181,  162,  214,  266,  318,  370,
  422,  474,  -98,    0,    0,  254,  880,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -16,
    0,    0,  898,    0,  912,    0,    0,  254,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  674,  404,
  456,  508,  560,  705,  526,  578,  726,  757,  778,  794,
  819,  846,  860,    0,    0,  261,    0,  267,  226,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -132,    0,
    0,   14,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    8,    0,    0,  924,
    0,  942,    0, -114,  607,    0,    0,    0,    0,  263,
    0,    0,    0,  254,    0,    0,  276,    0,    0,    0,
    0,    0, -246,    0,    0,    0,    0,    0,    0,    0,
  -85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   10,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  278,    0,    0,    0,
    0,    0,    0,  -71,    0,    0,    0,    0,    0,    0,
    0,    0,  -88,    0,    0,    0,    0,  285,    0,    0,
 -200, -200, -200,    0,    0,    0,    0,    0,    0,  286,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
  566,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    2,    0,    0,    0,
    0, -148,    0,    0,    0, -296,    0,    0, -141,  531,
  440,  599,    0,  415,  -72,  -70,    0,   61,    0,    0,
    0,   63,    0,  511,  516,    0,    0,    0, -234,  -61,
    0,    0,    0,    0,    0, -221,    0,  164,  443,  295,
};
#define YYTABLESIZE 2393
short yytable[] = {                                     136,
    6,  137,  121,  279,  226,  294,  227,  166,   74,   94,
   80,  180,   27,   50,  255,  306,  230,  230,  230,  123,
   98,  230,  337,  230,  232,  234,   32,  153,  237,  153,
  243,   30,   31,  170,   28,  233,  181,  227,  242,  174,
  227,  338,  267,   32,   32,  354,  355,  228,   64,  268,
  141,  141,  118,  141,  256,  187,  307,  325,  119,   80,
   29,  229,  164,   33,   37,   38,  122,   80,   39,   96,
  326,  127,  129,   99,  131,  131,  124,  131,  228,   64,
  230,  228,   64,  215,   56,   97,  276,  284,  171,  103,
  157,  345,  229,  141,  171,  229,  141,  141,  141,  141,
  141,  223,  114,  116,  141,   88,  141,  102,  141,  104,
  141,  277,  257,   88,  183,  263,  185,  131,  278,  105,
  131,  131,  131,  131,  131,   56,   56,  270,  131,  126,
  131,  133,  131,   31,  131,   35,   35,  258,  117,   56,
  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,
  209,  210,  211,  212,  213,  214,  249,  139,  139,  216,
  139,  218,  250,  107,  169,   56,  108,   56,  177,  230,
  230,  230,   35,  109,   31,   31,  341,  342,  343,   35,
   30,   31,   34,   34,  133,  260,  193,  262,   31,  156,
  163,  264,   32,  265,  266,  194,   36,   36,  156,  163,
  139,  313,  112,  230,  120,  139,  139,  139,   56,   56,
  359,  139,  138,  139,  156,  139,  162,  139,  113,   34,
   30,   31,   56,  273,  238,  162,   34,  280,  281,  283,
   30,   31,   32,   36,  280,  158,  247,  155,  253,  159,
   36,  161,   32,  280,  162,  296,  298,   30,   31,  301,
  110,  111,  356,  192,  198,  302,    6,  155,  302,   32,
    6,    6,    6,    6,    6,    6,    6,    6,  311,   50,
    6,  221,  222,   50,   50,   50,   50,   50,   50,   50,
   50,  155,  155,   50,  292,  155,   67,   67,   69,   69,
  155,  293,  155,   30,   31,  318,  289,  155,   30,   31,
  142,  142,  163,  142,  164,   32,  168,  173,  300,    6,
   32,  333,   71,   71,   74,   74,   30,   31,  184,  179,
  155,  186,  139,  140,  141,  142,  143,  144,   32,  145,
  146,  147,  148,  149,  150,  188,  176,  191,  151,  152,
  153,  246,  192,  142,  195,  196,  155,  197,  155,  142,
  142,  154,  151,  151,  142,  151,  142,  224,  142,  252,
  142,  235,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  219,  155,
  236,  155,  151,  151,  151,  151,  151,  151,  244,  151,
  151,  151,  151,  151,  151,  151,  245,  254,  151,  151,
  151,  151,  151,   30,   31,  154,  151,   78,  151,  274,
  151,  151,  151,  272,  275,   32,  285,  132,  132,  286,
  132,   30,   31,  155,  288,  155,  115,  155,  155,  155,
  290,  291,  295,   32,  303,  299,  155,  304,   30,   31,
  181,  305,  308,  155,  155,  309,  155,  314,  315,  316,
   32,  127,  127,  317,  127,  321,  322,  323,  258,  155,
  132,  155,  329,  132,  132,  132,  132,  132,  331,  133,
  133,  132,  133,  132,  155,  132,  330,  132,  332,  336,
  335,  127,  127,  127,  127,  127,  127,  340,  127,  127,
  127,  127,  127,  127,  127,  344,  155,  127,  127,  127,
  127,  127,  250,  128,  128,  127,  128,  127,  347,  127,
  348,  127,  133,  349,  352,  133,  133,  133,  133,  133,
  350,  134,  134,  133,  134,  133,  351,  133,  357,  133,
  358,    2,    3,  128,  128,  128,  128,  128,  128,  154,
  128,  128,  128,  128,  128,  128,  128,  154,  192,  128,
  128,  128,  128,  128,   31,  129,  129,  128,  129,  128,
   78,  128,  153,  128,  134,  154,  187,  134,  134,  134,
  134,  134,  186,  135,  135,  134,  135,  134,  160,  134,
   43,  134,   44,   63,   64,  129,  129,  129,  129,  129,
  129,  101,  129,  129,  129,  129,  129,  129,  129,  125,
  220,  129,  129,  129,  129,  129,   95,  130,  130,  129,
  130,  129,  269,  129,  167,  129,  135,  175,  248,  135,
  135,  135,  135,  135,  346,  136,  136,  135,  136,  135,
    0,  135,    0,  135,    0,    0,    0,  130,  130,  130,
  130,  130,  130,    0,  130,  130,  130,  130,  130,  130,
  130,    0,    0,  130,  130,  130,  130,  130,    0,  109,
  109,  130,  109,  130,    0,  130,    0,  130,  136,    0,
    0,  136,  136,  136,  136,  136,    0,  137,  137,  136,
  137,  136,    0,  136,    0,  136,    0,    0,    0,  109,
  109,  109,  109,  109,  109,    0,  109,  109,  109,  109,
  109,  109,  109,    0,    0,  109,  109,  109,  109,  109,
    0,  110,  110,  109,  110,  109,    0,  109,    0,  109,
  137,    0,    0,  137,  137,  137,  137,  137,    0,  138,
  138,  137,  138,  137,    0,  137,    0,  137,    0,    0,
    0,  110,  110,  110,  110,  110,  110,    0,  110,  110,
  110,  110,  110,  110,  110,    0,    0,  110,  110,  110,
  110,  110,    0,  111,  111,  110,  111,  110,    0,  110,
    0,  110,  138,    0,    0,  138,  138,  138,  138,  138,
    0,  113,  113,  138,  113,  138,    0,  138,    0,  138,
    0,    0,    0,  111,  111,  111,  111,  111,  111,    0,
  111,  111,  111,  111,  111,  111,  111,    0,    0,  111,
  111,  111,  111,  111,    0,  112,  112,  111,  112,  111,
    0,  111,    0,  111,  113,    0,    0,  113,  113,  113,
  113,  113,    0,  114,  114,  113,  114,  113,    0,  113,
    0,  113,    0,    0,    0,  112,  112,  112,  112,  112,
  112,    0,  112,  112,  112,  112,  112,  112,  112,    0,
    0,  112,  112,  112,  112,  112,    0,  140,  140,  112,
  140,  112,    0,  112,    0,  112,  114,  156,  156,  114,
  114,  114,  114,  114,  156,    0,  156,  114,  156,  114,
    0,  114,    0,  114,    0,    0,    0,  140,  126,  126,
    0,  126,  140,    0,  140,  140,  140,  140,  140,  140,
  140,  155,  155,  140,  140,  140,  140,  140,  155,    0,
  155,  140,  155,  140,    0,  140,    0,  140,  126,  107,
  107,    0,  107,  126,    0,  126,  126,  126,  126,  126,
  126,  126,    0,    0,  126,  126,  126,  126,  126,    0,
    0,    0,  126,    0,  126,    0,  126,    0,  126,  107,
  108,  108,    0,  108,  107,    0,  107,  107,  107,  107,
  107,  107,  107,    0,    0,  107,  107,  107,  107,  107,
    0,  115,  115,  107,  115,  107,    0,  107,    0,  107,
  108,    0,    0,    0,    0,  108,    0,  108,  108,  108,
  108,  108,  108,  108,    0,    0,  108,  108,  108,  108,
  108,    0,  116,  116,  108,  116,  108,    0,  108,    0,
  108,    0,    0,    0,  115,    0,    0,  115,  115,  115,
  115,  115,    0,  117,  117,  115,  117,  115,    0,  115,
    0,  115,    0,    0,    0,  140,  141,  142,  143,  118,
  118,    0,  118,    0,    0,  116,    0,    0,  116,  116,
  116,  116,  116,    0,    0,    0,  116,    0,  116,    0,
  116,    0,  116,  154,  119,  119,  117,  119,    0,  117,
  117,  117,  117,  117,    0,    0,    0,  117,    0,  117,
    0,  117,  118,  117,    0,  118,  118,  118,  118,  118,
    0,  120,  120,  118,  120,  118,    0,  118,    0,  118,
    0,    0,    0,    0,    0,  121,  121,  119,  121,    0,
  119,  119,  119,  119,  119,    0,    0,    0,  119,    0,
  119,    0,  119,    0,  119,  124,  124,    0,  124,    0,
    0,    0,    0,    0,  120,    0,    0,  120,  120,  120,
  120,  120,    0,  147,  147,  120,  147,  120,  121,  120,
    0,  120,    0,  121,  121,  121,    0,  146,  146,  121,
  146,  121,    0,  121,    0,  121,    0,    0,  124,  145,
  145,    0,  145,    0,  124,  124,    0,    0,    0,  124,
    0,  124,    0,  124,    0,  124,  147,  144,  144,    0,
  144,    0,  147,  147,    0,    0,    0,  147,    0,  147,
  146,  147,    0,  147,    0,    0,  146,  146,    0,    0,
    0,  146,  145,  146,    0,  146,    0,  146,  145,  145,
    0,    0,    0,  145,    0,  145,    0,  145,    0,  145,
  144,    0,    0,   41,    0,    0,  144,  144,    0,    0,
    0,  144,    0,  144,    0,  144,    0,  144,   42,   43,
    0,   44,   45,   46,   47,   48,   49,   50,    0,    0,
    0,    0,   51,   52,   53,   54,   55,   56,   57,    0,
   58,   59,   60,   61,   62,   63,    0,   64,   65,   66,
   67,   68,   90,    0,    0,    0,   69,    0,   70,    0,
   71,    0,   72,    0,    0,    0,    0,   42,   43,    0,
   44,   45,   46,   47,   48,   49,   50,    0,    0,    0,
    0,   51,   52,   53,   54,   55,   56,   57,    0,   58,
   59,   60,   61,   62,   63,    0,   64,   65,   66,   67,
   68,  217,    0,    0,    0,   69,    0,   70,    0,   71,
    0,   72,    0,    0,    0,    0,   42,   43,    0,   44,
   45,   46,   47,   48,   49,   50,    0,    0,    0,    0,
   51,   52,   53,   54,   55,   56,   57,    0,   58,   59,
   60,   61,   62,   63,    0,   64,   65,   66,   67,   68,
  259,    0,    0,    0,   69,    0,   70,    0,   71,    0,
   72,    0,    0,    0,    0,   42,   43,    0,   44,   45,
   46,   47,   48,   49,   50,    0,    0,    0,    0,   51,
   52,   53,   54,   55,   56,   57,    0,   58,   59,   60,
   61,   62,   63,    0,   64,   65,   66,   67,   68,  261,
    0,    0,    0,   69,    0,   70,    0,   71,    0,   72,
    0,    0,    0,    0,   42,   43,    0,   44,   45,   46,
   47,   48,   49,   50,    0,    0,    0,    0,   51,   52,
   53,   54,   55,   56,   57,    0,   58,   59,   60,   61,
   62,   63,    0,   64,   65,   66,   67,   68,  282,    0,
    0,    0,   69,    0,   70,    0,   71,    0,   72,    0,
    0,    0,    0,   42,   43,    0,   44,   45,   46,   47,
   48,   49,   50,    0,    0,    0,    0,   51,   52,   53,
   54,   55,   56,   57,    0,   58,   59,   60,   61,   62,
   63,    0,   64,   65,   66,   67,   68,  297,    0,    0,
    0,   69,    0,   70,    0,   71,    0,   72,    0,    0,
    0,    0,   42,   43,    0,   44,   45,   46,   47,   48,
   49,   50,    0,    0,    0,    0,   51,   52,   53,   54,
   55,   56,   57,    0,   58,   59,   60,   61,   62,   63,
    0,   64,   65,   66,   67,   68,  319,    0,    0,  320,
   69,    0,   70,    1,   71,    0,   72,    2,    3,    4,
    5,    6,    7,    8,    9,    0,    0,   10,  139,  140,
  141,  142,  143,  144,    0,    0,  139,  140,  141,  142,
  143,  144,    0,  145,  146,  147,  148,  149,  150,    0,
    0,    0,  151,  152,  153,    0,    0,  154,    0,    0,
    0,    0,    0,  100,    0,  154,   11,    2,    3,    4,
    5,    6,    7,    8,    9,    0,    0,   10,   30,   31,
    0,   42,   43,    0,   44,   45,   46,   47,   48,   49,
  128,    0,    0,    0,    0,   51,   52,   53,   54,   55,
   56,   57,    0,   58,   59,   60,   61,   62,   63,    0,
   64,   65,   66,   67,   68,    0,   11,    0,    0,   69,
    0,   70,    0,   71,    0,   72,   42,   43,    0,   44,
   45,   46,   47,   48,   49,   50,    0,    0,    0,    0,
   51,   52,   53,   54,   55,   56,   57,    0,   58,   59,
   60,   61,   62,   63,    0,   64,   65,   66,   67,   68,
    0,  287,    0,    0,   69,    0,   70,    0,   71,    0,
   72,   42,   43,    0,   44,   45,   46,   47,   48,   49,
   50,    0,    0,    0,    0,   51,   52,   53,   54,   55,
   56,   57,    0,   58,   59,   60,   61,   62,   63,    0,
   64,   65,   66,   67,   68,    0,    0,    0,    0,   69,
    0,   70,    0,   71,    0,   72,   42,   43,    0,   44,
   45,   46,   47,   48,   49,   50,    0,    0,    0,    0,
   51,   52,   53,   54,   55,   56,   57,    0,   58,   59,
   60,   61,   62,   63,    0,   64,   65,   66,   67,    0,
    0,    0,    0,    0,   69,    0,   70,    0,   71,    0,
   72,   42,   43,    0,   44,   45,   46,   47,   48,   49,
   50,    0,    0,    0,    0,   51,   52,   53,   54,   55,
   56,   57,    0,   58,   59,   60,   61,   62,   63,    0,
   64,   65,    0,    0,    0,    0,    0,    0,    0,   69,
    0,   70,    0,   71,    0,   72,   42,   43,    0,   44,
   45,   46,   47,   48,   49,   50,    0,    0,    0,    0,
   51,   52,   53,   54,   55,   56,   57,    0,    0,    0,
    0,    0,    0,    0,    0,   64,   65,    0,    0,    0,
    0,    0,    0,    0,   69,    0,   70,    0,   71,    0,
   72,   42,   43,    0,   44,   45,   46,   47,   48,   49,
   50,    0,    0,    0,    0,   51,    0,   53,   54,   55,
   56,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   64,   65,    0,    0,    0,    0,    0,    0,    0,   69,
    0,   70,    0,   71,    0,   72,   42,   43,    0,   44,
   45,   46,   47,   48,   49,   50,    0,    0,    0,    0,
   51,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   64,   65,    0,    0,    0,
    0,    0,    0,    0,   69,   25,   70,    0,   71,    0,
   72,  151,  151,  151,  151,  151,  151,    0,  151,  151,
  151,  151,  151,  151,    0,    0,    0,  151,  151,  151,
  151,    0,    0,    0,    0,  151,   78,    0,    0,  151,
  151,  139,  140,  141,  142,  143,  144,    0,  145,  146,
  147,  148,  149,  150,    0,    0,    0,  151,  152,  153,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  154,  271,  139,  140,  141,  142,  143,  144,    0,  145,
  146,  147,  148,  149,  150,  160,    0,    0,  151,  152,
  153,    0,    0,    0,    0,  139,  140,  141,  142,  143,
  144,  154,  145,  146,  147,  148,  149,  150,    0,    0,
    0,  151,  152,  153,    0,    0,    0,    0,    0,    0,
    0,  189,    0,    0,  154,  139,  140,  141,  142,  143,
  144,    0,  145,  146,  147,  148,  149,  150,    0,    0,
    0,  151,  152,  153,    0,    0,    0,    0,    0,  190,
    0,    0,    0,    0,  154,  139,  140,  141,  142,  143,
  144,    0,  145,  146,  147,  148,  149,  150,    0,    0,
    0,  151,  152,  153,    0,    0,    0,    0,    0,  310,
    0,    0,    0,    0,  154,  139,  140,  141,  142,  143,
  144,    0,  145,  146,  147,  148,  149,  150,    0,    0,
    0,  151,  152,  153,    0,  312,    0,    0,  139,  140,
  141,  142,  143,  144,  154,  145,  146,  147,  148,  149,
  150,    0,    0,    0,  151,  152,  153,    0,  327,    0,
    0,  139,  140,  141,  142,  143,  144,  154,  145,  146,
  147,  148,  149,  150,    0,    0,    0,  151,  152,  153,
    0,  328,    0,    0,  139,  140,  141,  142,  143,  144,
  154,  145,  146,  147,  148,  149,  150,    0,    0,    0,
  151,  152,  153,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  334,  154,  139,  140,  141,  142,  143,  144,
    0,  145,  146,  147,  148,  149,  150,    0,    0,    0,
  151,  152,  153,    0,    0,    0,    0,  177,  177,  177,
  177,  177,  177,  154,  177,  177,  177,  177,  177,  177,
    0,    0,    0,  177,  177,  177,    0,    0,    0,    0,
  139,  140,  141,  142,  143,  144,  177,  145,  146,  147,
  148,  149,  150,    0,    0,    0,  151,  152,    0,    0,
    0,    0,    0,  139,  140,  141,  142,  143,  144,  154,
  145,  146,  147,  148,  149,  150,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  154,
};
short yycheck[] = {                                      72,
    0,   72,   64,  225,  256,  240,  258,  256,    7,    8,
  257,  280,  306,    0,  275,  275,  165,  166,  167,  256,
  256,  170,  280,  172,  166,  167,  280,  312,  170,  314,
  172,  268,  269,  256,  280,  256,  305,  258,  256,  256,
  258,  299,  307,  280,  280,  342,  343,  299,  300,  314,
  256,  257,   51,  259,  315,  117,  316,  292,   57,  306,
  306,  313,  311,    3,    4,    5,   65,  314,    6,    9,
  292,   70,   71,   11,  256,  257,  313,  259,  299,  300,
  229,  299,  300,  156,  258,  280,  280,  229,  311,  293,
   89,  326,  313,  299,  311,  313,  302,  303,  304,  305,
  306,  163,   42,   43,  310,  306,  312,  306,  314,  293,
  316,  305,  280,  314,  113,  188,  115,  299,  312,  280,
  302,  303,  304,  305,  306,  299,  300,  198,  310,   69,
  312,   71,  314,  258,  316,  268,  269,  305,  308,  313,
  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
  149,  150,  151,  152,  153,  154,  306,  256,  257,  158,
  259,  160,  312,  280,  104,  256,  280,  258,  108,  318,
  319,  320,  305,  280,  299,  300,  318,  319,  320,  312,
  268,  269,  268,  269,  124,  184,  305,  186,  313,  305,
  305,  190,  280,  192,  193,  314,  268,  269,  314,  314,
  299,  274,  306,  352,  280,  304,  305,  306,  299,  300,
  352,  310,  306,  312,  311,  314,  305,  316,  256,  305,
  268,  269,  313,  222,  312,  314,  312,  226,  227,  228,
  268,  269,  280,  305,  233,  299,  176,   74,  178,  306,
  312,  299,  280,  242,  280,  244,  245,  268,  269,  306,
  305,  306,  306,  305,  306,  312,  256,   94,  312,  280,
  260,  261,  262,  263,  264,  265,  266,  267,  267,  256,
  270,  306,  307,  260,  261,  262,  263,  264,  265,  266,
  267,  118,  119,  270,  305,  122,  305,  306,  305,  306,
  127,  312,  129,  268,  269,  259,  236,  134,  268,  269,
  256,  257,  299,  259,  311,  280,  280,  318,  248,  309,
  280,  310,  305,  306,  305,  306,  268,  269,  280,  315,
  157,  280,  286,  287,  288,  289,  290,  291,  280,  293,
  294,  295,  296,  297,  298,  311,  311,  314,  302,  303,
  304,  311,  305,  299,  280,  316,  183,  316,  185,  305,
  306,  315,  256,  257,  310,  259,  312,  280,  314,  311,
  316,  294,  199,  200,  201,  202,  203,  204,  205,  206,
  207,  208,  209,  210,  211,  212,  213,  214,  313,  216,
  305,  218,  286,  287,  288,  289,  290,  291,  299,  293,
  294,  295,  296,  297,  298,  299,  299,  275,  302,  303,
  304,  305,  306,  268,  269,  315,  310,  311,  312,  311,
  314,  315,  316,  312,  299,  280,  306,  256,  257,  306,
  259,  268,  269,  260,  306,  262,  256,  264,  265,  266,
  306,  280,  306,  280,  306,  312,  273,  316,  268,  269,
  305,  316,  315,  280,  281,  312,  283,  280,  299,  280,
  280,  256,  257,  305,  259,  314,  294,  280,  305,  296,
  299,  298,  306,  302,  303,  304,  305,  306,  316,  256,
  257,  310,  259,  312,  311,  314,  312,  316,  275,  280,
  312,  286,  287,  288,  289,  290,  291,  280,  293,  294,
  295,  296,  297,  298,  299,  280,  333,  302,  303,  304,
  305,  306,  312,  256,  257,  310,  259,  312,  316,  314,
  306,  316,  299,  280,  257,  302,  303,  304,  305,  306,
  299,  256,  257,  310,  259,  312,  299,  314,  280,  316,
  280,    0,    0,  286,  287,  288,  289,  290,  291,  314,
  293,  294,  295,  296,  297,  298,  299,  316,  306,  302,
  303,  304,  305,  306,  299,  256,  257,  310,  259,  312,
  311,  314,  316,  316,  299,  312,  306,  302,  303,  304,
  305,  306,  306,  256,  257,  310,  259,  312,  316,  314,
  305,  316,  305,  299,  299,  286,  287,  288,  289,  290,
  291,   26,  293,  294,  295,  296,  297,  298,  299,   69,
  161,  302,  303,  304,  305,  306,    8,  256,  257,  310,
  259,  312,  198,  314,   99,  316,  299,  107,  176,  302,
  303,  304,  305,  306,  330,  256,  257,  310,  259,  312,
   -1,  314,   -1,  316,   -1,   -1,   -1,  286,  287,  288,
  289,  290,  291,   -1,  293,  294,  295,  296,  297,  298,
  299,   -1,   -1,  302,  303,  304,  305,  306,   -1,  256,
  257,  310,  259,  312,   -1,  314,   -1,  316,  299,   -1,
   -1,  302,  303,  304,  305,  306,   -1,  256,  257,  310,
  259,  312,   -1,  314,   -1,  316,   -1,   -1,   -1,  286,
  287,  288,  289,  290,  291,   -1,  293,  294,  295,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
   -1,  256,  257,  310,  259,  312,   -1,  314,   -1,  316,
  299,   -1,   -1,  302,  303,  304,  305,  306,   -1,  256,
  257,  310,  259,  312,   -1,  314,   -1,  316,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  291,   -1,  293,  294,
  295,  296,  297,  298,  299,   -1,   -1,  302,  303,  304,
  305,  306,   -1,  256,  257,  310,  259,  312,   -1,  314,
   -1,  316,  299,   -1,   -1,  302,  303,  304,  305,  306,
   -1,  256,  257,  310,  259,  312,   -1,  314,   -1,  316,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,   -1,
  293,  294,  295,  296,  297,  298,  299,   -1,   -1,  302,
  303,  304,  305,  306,   -1,  256,  257,  310,  259,  312,
   -1,  314,   -1,  316,  299,   -1,   -1,  302,  303,  304,
  305,  306,   -1,  256,  257,  310,  259,  312,   -1,  314,
   -1,  316,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,   -1,  293,  294,  295,  296,  297,  298,  299,   -1,
   -1,  302,  303,  304,  305,  306,   -1,  256,  257,  310,
  259,  312,   -1,  314,   -1,  316,  299,  305,  306,  302,
  303,  304,  305,  306,  312,   -1,  314,  310,  316,  312,
   -1,  314,   -1,  316,   -1,   -1,   -1,  286,  256,  257,
   -1,  259,  291,   -1,  293,  294,  295,  296,  297,  298,
  299,  305,  306,  302,  303,  304,  305,  306,  312,   -1,
  314,  310,  316,  312,   -1,  314,   -1,  316,  286,  256,
  257,   -1,  259,  291,   -1,  293,  294,  295,  296,  297,
  298,  299,   -1,   -1,  302,  303,  304,  305,  306,   -1,
   -1,   -1,  310,   -1,  312,   -1,  314,   -1,  316,  286,
  256,  257,   -1,  259,  291,   -1,  293,  294,  295,  296,
  297,  298,  299,   -1,   -1,  302,  303,  304,  305,  306,
   -1,  256,  257,  310,  259,  312,   -1,  314,   -1,  316,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,  294,  295,
  296,  297,  298,  299,   -1,   -1,  302,  303,  304,  305,
  306,   -1,  256,  257,  310,  259,  312,   -1,  314,   -1,
  316,   -1,   -1,   -1,  299,   -1,   -1,  302,  303,  304,
  305,  306,   -1,  256,  257,  310,  259,  312,   -1,  314,
   -1,  316,   -1,   -1,   -1,  287,  288,  289,  290,  256,
  257,   -1,  259,   -1,   -1,  299,   -1,   -1,  302,  303,
  304,  305,  306,   -1,   -1,   -1,  310,   -1,  312,   -1,
  314,   -1,  316,  315,  256,  257,  299,  259,   -1,  302,
  303,  304,  305,  306,   -1,   -1,   -1,  310,   -1,  312,
   -1,  314,  299,  316,   -1,  302,  303,  304,  305,  306,
   -1,  256,  257,  310,  259,  312,   -1,  314,   -1,  316,
   -1,   -1,   -1,   -1,   -1,  256,  257,  299,  259,   -1,
  302,  303,  304,  305,  306,   -1,   -1,   -1,  310,   -1,
  312,   -1,  314,   -1,  316,  256,  257,   -1,  259,   -1,
   -1,   -1,   -1,   -1,  299,   -1,   -1,  302,  303,  304,
  305,  306,   -1,  256,  257,  310,  259,  312,  299,  314,
   -1,  316,   -1,  304,  305,  306,   -1,  256,  257,  310,
  259,  312,   -1,  314,   -1,  316,   -1,   -1,  299,  256,
  257,   -1,  259,   -1,  305,  306,   -1,   -1,   -1,  310,
   -1,  312,   -1,  314,   -1,  316,  299,  256,  257,   -1,
  259,   -1,  305,  306,   -1,   -1,   -1,  310,   -1,  312,
  299,  314,   -1,  316,   -1,   -1,  305,  306,   -1,   -1,
   -1,  310,  299,  312,   -1,  314,   -1,  316,  305,  306,
   -1,   -1,   -1,  310,   -1,  312,   -1,  314,   -1,  316,
  299,   -1,   -1,  256,   -1,   -1,  305,  306,   -1,   -1,
   -1,  310,   -1,  312,   -1,  314,   -1,  316,  271,  272,
   -1,  274,  275,  276,  277,  278,  279,  280,   -1,   -1,
   -1,   -1,  285,  286,  287,  288,  289,  290,  291,   -1,
  293,  294,  295,  296,  297,  298,   -1,  300,  301,  302,
  303,  304,  256,   -1,   -1,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,   -1,   -1,   -1,   -1,  271,  272,   -1,
  274,  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,
   -1,  285,  286,  287,  288,  289,  290,  291,   -1,  293,
  294,  295,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  256,   -1,   -1,   -1,  309,   -1,  311,   -1,  313,
   -1,  315,   -1,   -1,   -1,   -1,  271,  272,   -1,  274,
  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,
  285,  286,  287,  288,  289,  290,  291,   -1,  293,  294,
  295,  296,  297,  298,   -1,  300,  301,  302,  303,  304,
  256,   -1,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,   -1,   -1,   -1,   -1,  271,  272,   -1,  274,  275,
  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,  285,
  286,  287,  288,  289,  290,  291,   -1,  293,  294,  295,
  296,  297,  298,   -1,  300,  301,  302,  303,  304,  256,
   -1,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,  315,
   -1,   -1,   -1,   -1,  271,  272,   -1,  274,  275,  276,
  277,  278,  279,  280,   -1,   -1,   -1,   -1,  285,  286,
  287,  288,  289,  290,  291,   -1,  293,  294,  295,  296,
  297,  298,   -1,  300,  301,  302,  303,  304,  256,   -1,
   -1,   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,
   -1,   -1,   -1,  271,  272,   -1,  274,  275,  276,  277,
  278,  279,  280,   -1,   -1,   -1,   -1,  285,  286,  287,
  288,  289,  290,  291,   -1,  293,  294,  295,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  256,   -1,   -1,
   -1,  309,   -1,  311,   -1,  313,   -1,  315,   -1,   -1,
   -1,   -1,  271,  272,   -1,  274,  275,  276,  277,  278,
  279,  280,   -1,   -1,   -1,   -1,  285,  286,  287,  288,
  289,  290,  291,   -1,  293,  294,  295,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  256,   -1,   -1,  259,
  309,   -1,  311,  256,  313,   -1,  315,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,   -1,  270,  286,  287,
  288,  289,  290,  291,   -1,   -1,  286,  287,  288,  289,
  290,  291,   -1,  293,  294,  295,  296,  297,  298,   -1,
   -1,   -1,  302,  303,  304,   -1,   -1,  315,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  315,  309,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,   -1,  270,  268,  269,
   -1,  271,  272,   -1,  274,  275,  276,  277,  278,  279,
  280,   -1,   -1,   -1,   -1,  285,  286,  287,  288,  289,
  290,  291,   -1,  293,  294,  295,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,   -1,  309,   -1,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,  271,  272,   -1,  274,
  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,
  285,  286,  287,  288,  289,  290,  291,   -1,  293,  294,
  295,  296,  297,  298,   -1,  300,  301,  302,  303,  304,
   -1,  306,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,  271,  272,   -1,  274,  275,  276,  277,  278,  279,
  280,   -1,   -1,   -1,   -1,  285,  286,  287,  288,  289,
  290,  291,   -1,  293,  294,  295,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,   -1,   -1,   -1,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,  271,  272,   -1,  274,
  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,
  285,  286,  287,  288,  289,  290,  291,   -1,  293,  294,
  295,  296,  297,  298,   -1,  300,  301,  302,  303,   -1,
   -1,   -1,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,  271,  272,   -1,  274,  275,  276,  277,  278,  279,
  280,   -1,   -1,   -1,   -1,  285,  286,  287,  288,  289,
  290,  291,   -1,  293,  294,  295,  296,  297,  298,   -1,
  300,  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,  271,  272,   -1,  274,
  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,
  285,  286,  287,  288,  289,  290,  291,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  300,  301,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,  271,  272,   -1,  274,  275,  276,  277,  278,  279,
  280,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,
  290,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  300,  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,
   -1,  311,   -1,  313,   -1,  315,  271,  272,   -1,  274,
  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  300,  301,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  309,  280,  311,   -1,  313,   -1,
  315,  286,  287,  288,  289,  290,  291,   -1,  293,  294,
  295,  296,  297,  298,   -1,   -1,   -1,  302,  303,  304,
  305,   -1,   -1,   -1,   -1,  310,  311,   -1,   -1,  314,
  315,  286,  287,  288,  289,  290,  291,   -1,  293,  294,
  295,  296,  297,  298,   -1,   -1,   -1,  302,  303,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  315,  316,  286,  287,  288,  289,  290,  291,   -1,  293,
  294,  295,  296,  297,  298,  299,   -1,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  291,  315,  293,  294,  295,  296,  297,  298,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  312,   -1,   -1,  315,  286,  287,  288,  289,  290,
  291,   -1,  293,  294,  295,  296,  297,  298,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,  310,
   -1,   -1,   -1,   -1,  315,  286,  287,  288,  289,  290,
  291,   -1,  293,  294,  295,  296,  297,  298,   -1,   -1,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,  310,
   -1,   -1,   -1,   -1,  315,  286,  287,  288,  289,  290,
  291,   -1,  293,  294,  295,  296,  297,  298,   -1,   -1,
   -1,  302,  303,  304,   -1,  306,   -1,   -1,  286,  287,
  288,  289,  290,  291,  315,  293,  294,  295,  296,  297,
  298,   -1,   -1,   -1,  302,  303,  304,   -1,  306,   -1,
   -1,  286,  287,  288,  289,  290,  291,  315,  293,  294,
  295,  296,  297,  298,   -1,   -1,   -1,  302,  303,  304,
   -1,  306,   -1,   -1,  286,  287,  288,  289,  290,  291,
  315,  293,  294,  295,  296,  297,  298,   -1,   -1,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,  315,  286,  287,  288,  289,  290,  291,
   -1,  293,  294,  295,  296,  297,  298,   -1,   -1,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,  286,  287,  288,
  289,  290,  291,  315,  293,  294,  295,  296,  297,  298,
   -1,   -1,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,  291,  315,  293,  294,  295,
  296,  297,  298,   -1,   -1,   -1,  302,  303,   -1,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  291,  315,
  293,  294,  295,  296,  297,  298,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  315,
};
#define YYFINAL 12
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 318
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ELSE","IF","THEN","TYPE",
"RANDOM","FIXED","ORIGIN","DISTINCT","QUERY","OBS","PARAM","LIST","MAP",
"DISTRIBUTION","EXISTS_","FORALL_","FOR","NULLITY","INT_LITERAL",
"DOUBLE_LITERAL","BOOLEAN_LITERAL","CHAR_LITERAL","STRING_LITERAL","ID",
"PARFACTOR","FACTOR","ERROR","ELSEIF","AT_","PLUS_","MULT_","DIV_","MOD_",
"POWER_","MINUS_","LST","LT_","GT_","LEQ_","GEQ_","EQEQ_","NEQ_","EQ_",
"DISTRIB","NOT_","AND_","OR_","DOUBLERIGHTARROW","COMMA","SEMI","COLON","DOT",
"NUMSIGN","RIGHTARROW","LPAREN","RPAREN","LBRACE","RBRACE","LBRACKET",
"RBRACKET","NORPAREN","g",
};
char *yyrule[] = {
"$accept : program",
"program : opt_statement_lst",
"opt_statement_lst :",
"opt_statement_lst : statement_lst",
"statement_lst : statement_lst statement",
"statement_lst : statement",
"statement_lst : error",
"statement : declaration_stmt",
"statement : evidence_stmt",
"statement : query_stmt",
"statement : error SEMI",
"declaration_stmt : type_decl",
"declaration_stmt : fixed_func_decl",
"declaration_stmt : rand_func_decl",
"declaration_stmt : origin_func_decl",
"declaration_stmt : number_stmt",
"declaration_stmt : distinct_decl",
"declaration_stmt : parameter_decl",
"declaration_stmt : distribution_decl",
"type_decl : TYPE ID SEMI",
"type_decl : TYPE SEMI",
"type : name_type",
"type : list_type",
"$$1 :",
"type : map_type $$1 g",
"name_type : ID",
"list_type : LIST LT_ ID GT_",
"array_type : ID dims",
"dims : LBRACKET RBRACKET",
"dims : LBRACKET RBRACKET dims",
"map_type : MAP LT_ type COMMA type GT_",
"opt_parenthesized_type_var_lst :",
"opt_parenthesized_type_var_lst : LPAREN RPAREN",
"opt_parenthesized_type_var_lst : LPAREN type_var_lst RPAREN",
"var_decl : type ID",
"var_decl : type",
"var_decl : type ID IDS",
"IDS : ID",
"IDS : IDS ID",
"type_var_lst : type_var_lst COMMA var_decl",
"type_var_lst : var_decl",
"type_var_lst : type_var_lst var_decl",
"type_var_lst : type_var_lst COMMA COMMAS var_decl",
"COMMAS : COMMA",
"COMMAS : COMMAS COMMA",
"fixed_func_decl : FIXED type ID opt_parenthesized_type_var_lst EQ_ expression SEMI",
"fixed_func_decl : FIXED type ID error EQ_ expression SEMI",
"fixed_func_decl : FIXED type ID opt_parenthesized_type_var_lst EQ_ error",
"rand_func_decl : RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body SEMI",
"rand_func_decl : RANDOM type ID error dependency_statement_body SEMI",
"rand_func_decl : RANDOM type ID opt_parenthesized_type_var_lst error",
"number_stmt : NUMSIGN name_type opt_parenthesized_origin_var_list dependency_statement_body SEMI",
"number_stmt : NUMSIGN error opt_parenthesized_origin_var_list dependency_statement_body SEMI",
"number_stmt : NUMSIGN name_type error dependency_statement_body SEMI",
"number_stmt : NUMSIGN name_type opt_parenthesized_origin_var_list error SEMI",
"opt_parenthesized_origin_var_list : LPAREN origin_var_list RPAREN",
"opt_parenthesized_origin_var_list :",
"origin_var_list : origin_var_list COMMA ID EQ_ ID",
"origin_var_list : ID EQ_ ID",
"origin_var_list : origin_var_list ID EQ_ ID",
"origin_var_list : origin_var_list COMMAS COMMA ID EQ_ ID",
"origin_var_list : origin_var_list COMMA ID EQS EQ_ ID",
"origin_var_list : origin_var_list COMMA ID ID",
"EQS : EQ_",
"EQS : EQS EQ_",
"distribution_decl : DISTRIBUTION ID EQ_ class_name LPAREN opt_expression_list RPAREN SEMI",
"distinct_decl : DISTINCT id_or_subid_list SEMI",
"id_or_subid_list : name_type ID",
"id_or_subid_list : name_type ID LBRACKET INT_LITERAL RBRACKET",
"id_or_subid_list : id_or_subid_list COMMA ID",
"id_or_subid_list : id_or_subid_list COMMA ID LBRACKET INT_LITERAL RBRACKET",
"id_or_subid_list : id_or_subid_list COMMA COMMAS ID",
"id_or_subid_list : id_or_subid_list COMMA COMMAS ID LBRACKET INT_LITERAL RBRACKET",
"id_or_subid_list : id_or_subid_list COMMA ID LBRACKET RBRACKET",
"id_or_subid_list : id_or_subid_list COMMA ID LBRACKET INT_LITERAL",
"id_or_subid_list : id_or_subid_list COMMA ID INT_LITERAL RBRACKET",
"id_or_subid : ID",
"id_or_subid : ID LBRACKET INT_LITERAL RBRACKET",
"class_name : ID",
"class_name : ID DOT class_name",
"dependency_statement_body : EQ_ expression",
"dependency_statement_body : EQ_ error",
"dependency_statement_body : distribution_expr",
"dependency_statement_body : IF expression THEN dependency_statement_body elseif_list",
"dependency_statement_body : error expression THEN dependency_statement_body elseif_list",
"dependency_statement_body : IF expression error dependency_statement_body elseif_list",
"dependency_statement_body : LBRACE dependency_statement_body RBRACE",
"elseif_list : ELSE dependency_statement_body",
"elseif_list :",
"parameter_decl : PARAM type ID SEMI",
"parameter_decl : PARAM type ID COLON expression SEMI",
"expression : operation_expr",
"expression : distribution_expr",
"expression : literal",
"expression : function_call",
"expression : list_construct_expression",
"expression : map_construct_expression",
"expression : quantified_formula",
"expression : set_expr",
"expression : number_expr",
"expression : symbol_expr",
"literal : STRING_LITERAL",
"literal : CHAR_LITERAL",
"literal : INT_LITERAL",
"literal : DOUBLE_LITERAL",
"literal : BOOLEAN_LITERAL",
"literal : NULLITY",
"operation_expr : expression PLUS_ expression",
"operation_expr : expression MINUS_ expression",
"operation_expr : expression MULT_ expression",
"operation_expr : expression DIV_ expression",
"operation_expr : expression MOD_ expression",
"operation_expr : expression POWER_ expression",
"operation_expr : expression LT_ expression",
"operation_expr : expression GT_ expression",
"operation_expr : expression LEQ_ expression",
"operation_expr : expression GEQ_ expression",
"operation_expr : expression EQEQ_ expression",
"operation_expr : expression NEQ_ expression",
"operation_expr : expression AND_ expression",
"operation_expr : expression OR_ expression",
"operation_expr : expression DOUBLERIGHTARROW expression",
"operation_expr : expression LBRACKET expression RBRACKET",
"operation_expr : expression infix_operator",
"operation_expr : infix_operator expression",
"operation_expr : unary_operation_expr",
"infix_operator : PLUS_",
"infix_operator : MULT_",
"infix_operator : DIV_",
"infix_operator : MOD_",
"infix_operator : POWER_",
"infix_operator : LT_",
"infix_operator : GT_",
"infix_operator : LEQ_",
"infix_operator : GEQ_",
"infix_operator : EQEQ_",
"infix_operator : NEQ_",
"infix_operator : AND_",
"infix_operator : OR_",
"infix_operator : DOUBLERIGHTARROW",
"unary_operation_expr : MINUS_ expression",
"unary_operation_expr : NOT_ expression",
"unary_operation_expr : AT_ expression",
"unary_operation_expr : LPAREN expression RPAREN",
"quantified_formula : FORALL_ type ID expression",
"quantified_formula : EXISTS_ type ID expression",
"quantified_formula : FORALL_ error expression",
"quantified_formula : EXISTS_ error expression",
"quantified_formula : FORALL_ type ID error",
"quantified_formula : EXISTS_ type ID error",
"function_call : class_name LPAREN opt_expression_list RPAREN",
"symbol_expr : ID",
"distribution_expr : DISTRIB class_name LPAREN opt_expression_list RPAREN",
"opt_expression_list : expression_list",
"opt_expression_list :",
"expression_list : expression_list COMMA expression",
"expression_list : expression",
"list_construct_expression : LBRACKET opt_expression_list RBRACKET",
"list_construct_expression : LBRACKET semi_colon_separated_expression_list RBRACKET",
"semi_colon_separated_expression_list : expression_list SEMI semi_colon_separated_expression_list",
"semi_colon_separated_expression_list : expression_list SEMI expression_list",
"map_construct_expression : LBRACE expression_pair_list RBRACE",
"expression_pair_list : expression_pair_list COMMA expression RIGHTARROW expression",
"expression_pair_list : expression RIGHTARROW expression",
"number_expr : NUMSIGN set_expr",
"number_expr : NUMSIGN type",
"number_expr : NUMSIGN error",
"origin_func_decl : ORIGIN type ID LPAREN type RPAREN SEMI",
"origin_func_decl : ORIGIN type ID LPARENS type SEMI",
"origin_func_decl : ORIGIN type ID type RPARENS SEMI",
"origin_func_decl : ORIGIN type ID LPAREN LPARENS type RPAREN RPARENS SEMI",
"origin_func_decl : ORIGIN type ID type SEMI",
"LPARENS : LPAREN",
"LPARENS : LPARENS LPAREN",
"RPARENS : RPAREN",
"RPARENS : RPARENS RPAREN",
"set_expr : explicit_set",
"set_expr : implicit_set",
"explicit_set : LBRACE opt_expression_list RBRACE",
"implicit_set : LBRACE type ID COLON expression RBRACE",
"implicit_set : LBRACE type ID RBRACE",
"tuple_set : LBRACE expression_list FOR type_var_lst COLON expression RBRACE",
"tuple_set : LBRACE expression_list FOR type_var_lst RBRACE",
"evidence_stmt : OBS evidence SEMI",
"evidence : symbol_evidence",
"evidence : value_evidence",
"value_evidence : expression EQ_ expression",
"value_evidence : error EQ_ expression",
"value_evidence : expression EQ_ error",
"symbol_evidence : implicit_set EQ_ explicit_set",
"query_stmt : QUERY query SEMI",
"query_stmt : QUERY error SEMI",
"query : expression",
};
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 907 "blog.yacc"

void yyerror(const char *s) {
  cout << "Parse error at line number: " << curr_line << " and column number: " << curr_col << "!  Message: " << s << endl;
  error_found = true;
  // might as well halt now:
  //exit(-1);
}
#line 1107 "y.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 201 "blog.yacc"
{
      if(error_found){
        blog = NULL;
      }
    }
break;
case 4:
#line 215 "blog.yacc"
{
    if(yyvsp[0].stmt != NULL){
      blog->add(yyvsp[0].stmt);
    }
  }
break;
case 5:
#line 220 "blog.yacc"
{ blog->add(yyvsp[0].stmt); }
break;
case 6:
#line 221 "blog.yacc"
{ yyerror("Possible missing semicolon here");}
break;
case 7:
#line 225 "blog.yacc"
{ yyval.stmt = yyvsp[0].stmt; }
break;
case 8:
#line 226 "blog.yacc"
{ yyval.stmt = yyvsp[0].stmt; }
break;
case 9:
#line 227 "blog.yacc"
{ yyval.stmt = yyvsp[0].stmt; }
break;
case 10:
#line 228 "blog.yacc"
{
      yyerror("Possible missing semicolon after a statement!"); 
      yyval.stmt = NULL; 
    }
break;
case 11:
#line 236 "blog.yacc"
{ yyval.stmt = yyvsp[0].stmt; }
break;
case 12:
#line 237 "blog.yacc"
{ yyval.stmt = yyvsp[0].funcdec; }
break;
case 13:
#line 238 "blog.yacc"
{ yyval.stmt = yyvsp[0].funcdec; }
break;
case 14:
#line 239 "blog.yacc"
{ yyval.stmt = yyvsp[0].origdec; }
break;
case 15:
#line 240 "blog.yacc"
{yyval.stmt = yyvsp[0].numstdec; }
break;
case 16:
#line 241 "blog.yacc"
{ yyval.stmt = yyvsp[0].distdec; }
break;
case 17:
#line 242 "blog.yacc"
{ yyval.stmt = yyvsp[0].stmt; }
break;
case 18:
#line 243 "blog.yacc"
{ yyval.stmt = yyvsp[0].stmt; }
break;
case 19:
#line 248 "blog.yacc"
{ yyval.stmt = new TypDecl(curr_line, curr_col, Symbol(yyvsp[-1].sval->getValue())); }
break;
case 20:
#line 250 "blog.yacc"
{ yyerror("Missing ID in type declaration"); yyval.stmt = NULL;}
break;
case 21:
#line 254 "blog.yacc"
{ yyval.typ = yyvsp[0].typ; }
break;
case 22:
#line 255 "blog.yacc"
{ yyval.typ = yyvsp[0].typ; }
break;
case 23:
#line 256 "blog.yacc"
{ yyval.typ = yyvsp[0].typ; }
break;
case 25:
#line 260 "blog.yacc"
{ yyval.typ = new Ty(curr_line, curr_col, Symbol(yyvsp[0].sval->getValue())); }
break;
case 26:
#line 265 "blog.yacc"
{ yyval.typ = new Ty(curr_line, curr_col, Symbol(yyvsp[-1].sval->getValue())); }
break;
case 27:
#line 270 "blog.yacc"
{ yyval.typ = new Ty(curr_line, curr_col, Symbol(yyvsp[-1].sval->getValue())); }
break;
case 28:
#line 274 "blog.yacc"
{ yyval.i = 1; }
break;
case 29:
#line 275 "blog.yacc"
{ yyval.i = yyvsp[0].i + 1; }
break;
case 30:
#line 280 "blog.yacc"
{ yyval.typ = yyvsp[-3].typ; }
break;
case 31:
#line 284 "blog.yacc"
{ yyval.varlist = NULL; }
break;
case 32:
#line 285 "blog.yacc"
{yyval.varlist = NULL; }
break;
case 33:
#line 286 "blog.yacc"
{ yyval.varlist = yyvsp[-1].varlist; }
break;
case 34:
#line 290 "blog.yacc"
{ 
    yyval.vardec = new VarDecl(curr_line, curr_col, *yyvsp[-1].typ, Symbol(yyvsp[0].sval->getValue())); 
  }
break;
case 35:
#line 294 "blog.yacc"
{
    yyerror("Missing ID in variable declaration.");
    yyval.vardec = NULL;
  }
break;
case 36:
#line 299 "blog.yacc"
{
    yyerror("Extra ID in variable declaration");
    yyval.vardec = NULL;
  }
break;
case 39:
#line 311 "blog.yacc"
{ 
      yyval.varlist = NULL;
      if(yyvsp[0].vardec != NULL && yyvsp[-2].varlist != NULL){
        yyval.varlist = yyvsp[-2].varlist; 
        yyval.varlist->push_back(*yyvsp[0].vardec);
        delete(yyvsp[0].vardec);
      }
      /*$$ = $1; */
      /*$$->add((Expr*)(new VarDecl(curr_line, curr_col, *$3, Symbol($4->getValue())))); */
    }
break;
case 40:
#line 321 "blog.yacc"
{ 
      yyval.varlist = NULL;
      if (yyvsp[0].vardec != NULL){
        yyval.varlist = new vector<VarDecl>();
        yyval.varlist->push_back(*yyvsp[0].vardec);
        delete(yyvsp[0].vardec);
        /*$$ = new VarDecl(curr_line, curr_col, *$1, Symbol($2->getValue())); */
      }
    }
break;
case 41:
#line 330 "blog.yacc"
{
    yyerror("Possible missing comma in type variable list");
    yyval.varlist = NULL;
  }
break;
case 42:
#line 334 "blog.yacc"
{
    yyerror("Possible extra comma in type variable list");
    yyval.varlist = NULL;
  }
break;
case 45:
#line 347 "blog.yacc"
{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, false, *(yyvsp[-5].typ), Symbol(yyvsp[-4].sval->getValue()), yyvsp[-1].exp);
      if(yyvsp[-3].varlist != NULL){
        for(size_t i = 0; i < yyvsp[-3].varlist->size(); i++){
          yyval.funcdec->addArg((*yyvsp[-3].varlist)[i]);
        }
        delete(yyvsp[-3].varlist);
      }
      /*if ($4 != NULL) $$->addArg(*$4);*/
    }
break;
case 46:
#line 358 "blog.yacc"
{
      yyerror("Malformed type variable list in fixed function declaration.");
      yyval.funcdec = NULL;
    }
break;
case 47:
#line 363 "blog.yacc"
{
      yyerror("Malformed expression body of fixed function declaration");
      yyval.funcdec = NULL;
    }
break;
case 48:
#line 371 "blog.yacc"
{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, true, *(yyvsp[-4].typ), Symbol(yyvsp[-3].sval->getValue()), yyvsp[-1].exp);
      if(yyvsp[-2].varlist != NULL){
        for(size_t i = 0; i < yyvsp[-2].varlist->size(); i++){
          yyval.funcdec->addArg((*yyvsp[-2].varlist)[i]);
        }
        delete(yyvsp[-2].varlist);
      }
      /*if ($4 != NULL) $$->addArg(*$4);*/
    }
break;
case 49:
#line 382 "blog.yacc"
{
      yyerror("Malformed type variable list in random function declaration.");
      yyval.funcdec = NULL;
    }
break;
case 50:
#line 387 "blog.yacc"
{
      yyerror("Malformed dependency body in random function declaration");
      yyval.funcdec = NULL;
    }
break;
case 51:
#line 395 "blog.yacc"
{
      yyval.numstdec = new NumStDecl(curr_line, curr_col, yyvsp[-3].typ->getTyp(), yyvsp[-1].exp);
      if(yyvsp[-2].varlst != NULL){
        for(size_t i = 0; i < yyvsp[-2].varlst->size(); i++){
          yyval.numstdec->add(get<0>((*yyvsp[-2].varlst)[i]), get<1>((*yyvsp[-2].varlst)[i]));
        }
        delete(yyvsp[-2].varlst);
      }
      /*$$->add(Symbol($4->getValue()), Symbol($6->getValue()));*/
    }
break;
case 52:
#line 406 "blog.yacc"
{
      yyerror("Malformed or missing type in number statement.");
      yyval.numstdec = NULL;
    }
break;
case 53:
#line 411 "blog.yacc"
{
      yyerror("Possible malformed variable list in number statement");
      yyval.numstdec = NULL;
    }
break;
case 54:
#line 416 "blog.yacc"
{
      yyerror("Missing or malformed body of number statement");
      yyval.numstdec = NULL;
    }
break;
case 55:
#line 423 "blog.yacc"
{yyval.varlst = yyvsp[-1].varlst; }
break;
case 56:
#line 424 "blog.yacc"
{yyval.varlst = NULL; }
break;
case 57:
#line 430 "blog.yacc"
{
    yyval.varlst = yyvsp[-4].varlst;
    yyval.varlst->push_back(make_tuple(Symbol(yyvsp[-2].sval->getValue()), Symbol(yyvsp[0].sval->getValue())));
  }
break;
case 58:
#line 435 "blog.yacc"
{ 
    yyval.varlst = new vector<tuple<Symbol, Symbol>>();
    yyval.varlst->push_back(make_tuple(Symbol(yyvsp[-2].sval->getValue()), Symbol(yyvsp[0].sval->getValue())));
  }
break;
case 59:
#line 440 "blog.yacc"
{
    yyerror("Missing comma in origin variable list");
    yyval.varlst = NULL;
  }
break;
case 60:
#line 445 "blog.yacc"
{
    yyerror("Extra commas in origin variable list");
    yyval.varlst = NULL;
  }
break;
case 61:
#line 450 "blog.yacc"
{
    yyerror("Extra equal signs in origin variable list");
    yyval.varlst = NULL;
  }
break;
case 62:
#line 455 "blog.yacc"
{
    yyerror("Missing equal sign in origin variable list");
    yyval.varlst = NULL;
  }
break;
case 65:
#line 471 "blog.yacc"
{ }
break;
case 66:
#line 476 "blog.yacc"
{
      yyval.distdec = yyvsp[-1].distdec;
    }
break;
case 67:
#line 483 "blog.yacc"
{
        yyval.distdec = new DistinctDecl(curr_line, curr_col, yyvsp[-1].typ->getTyp());
        yyval.distdec->add(Symbol(yyvsp[0].sval->getValue()), 1);
      }
break;
case 68:
#line 488 "blog.yacc"
{
        yyval.distdec = new DistinctDecl(curr_line, curr_col, yyvsp[-4].typ->getTyp());
        yyval.distdec->add(Symbol(yyvsp[-3].sval->getValue()), yyvsp[-1].ival->getValue());
      }
break;
case 69:
#line 493 "blog.yacc"
{ 
        yyval.distdec = yyvsp[-2].distdec;
        yyval.distdec->add(Symbol(yyvsp[0].sval->getValue()), 1);
      }
break;
case 70:
#line 498 "blog.yacc"
{ 
        yyval.distdec = yyvsp[-5].distdec;
        yyval.distdec->add(Symbol(yyvsp[-3].sval->getValue()), yyvsp[-1].ival->getValue());
      }
break;
case 71:
#line 504 "blog.yacc"
{ 
        yyerror("Extra commas in distinct declaration");
        yyval.distdec = NULL;
      }
break;
case 72:
#line 509 "blog.yacc"
{ 
        yyerror("Extra commas in distinct declaration");
        yyval.distdec = NULL;
      }
break;
case 73:
#line 514 "blog.yacc"
{ 
        yyerror("Missing integer literal in between brackets in distinct declaration");
        yyval.distdec = NULL;
      }
break;
case 74:
#line 519 "blog.yacc"
{ 
        yyerror("Unmatched left bracket in distinct declaration");
        yyval.distdec = NULL;
      }
break;
case 75:
#line 524 "blog.yacc"
{ 
        yyerror("Unmatched right bracket in distinct declaration");
        yyval.distdec = NULL;
      }
break;
case 76:
#line 533 "blog.yacc"
{ 
        auto idint = make_tuple(yyvsp[0].sval->getValue(), 1);
        yyval.symbintpair = &(idint); 
       }
break;
case 77:
#line 538 "blog.yacc"
{ 
      auto idint = make_tuple(yyvsp[-3].sval->getValue(), yyvsp[-1].ival->getValue());
      yyval.symbintpair = &(idint); 
    }
break;
case 78:
#line 545 "blog.yacc"
{ 
      yyval.sval = new BLOGSymbol<string>(curr_line, curr_col, yyvsp[0].sval->getValue());
    }
break;
case 79:
#line 548 "blog.yacc"
{
      yyval.sval = new BLOGSymbol<string>(curr_line, curr_col, yyvsp[-2].sval->getValue() + "." + yyvsp[0].sval->getValue());
    }
break;
case 80:
#line 554 "blog.yacc"
{ yyval.exp = yyvsp[0].exp; }
break;
case 81:
#line 555 "blog.yacc"
{yyerror("Clause may not be an expression in dependency statement body"); yyval.exp = NULL;}
break;
case 82:
#line 556 "blog.yacc"
{ yyval.exp = yyvsp[0].exp; }
break;
case 83:
#line 558 "blog.yacc"
{ yyval.exp = new IfExpr(curr_line, curr_col, yyvsp[-3].exp, yyvsp[-1].exp, yyvsp[0].exp); }
break;
case 84:
#line 560 "blog.yacc"
{
    yyerror("Possible missing 'if' in dependency statement");
    yyval.exp = NULL;
  }
break;
case 85:
#line 565 "blog.yacc"
{
    yyerror("Possible missing 'then' in dependency statement");
    yyval.exp = NULL;
  }
break;
case 86:
#line 570 "blog.yacc"
{ yyval.exp = yyvsp[-1].exp; }
break;
case 87:
#line 574 "blog.yacc"
{yyval.exp = yyvsp[0].exp; }
break;
case 88:
#line 575 "blog.yacc"
{yyval.exp = NULL; }
break;
case 89:
#line 580 "blog.yacc"
{ }
break;
case 90:
#line 581 "blog.yacc"
{ }
break;
case 91:
#line 585 "blog.yacc"
{yyval.exp = yyvsp[0].exp;}
break;
case 92:
#line 586 "blog.yacc"
{yyval.exp = yyvsp[0].exp;}
break;
case 93:
#line 587 "blog.yacc"
{yyval.exp = yyvsp[0].exp;}
break;
case 94:
#line 588 "blog.yacc"
{yyval.exp = yyvsp[0].exp;}
break;
case 95:
#line 589 "blog.yacc"
{yyval.exp = yyvsp[0].exp;}
break;
case 96:
#line 590 "blog.yacc"
{yyval.exp = yyvsp[0].mapexp;}
break;
case 97:
#line 591 "blog.yacc"
{ yyval.exp = yyvsp[0].exp; }
break;
case 98:
#line 592 "blog.yacc"
{ yyval.exp = yyvsp[0].setexp; }
break;
case 99:
#line 593 "blog.yacc"
{ yyval.exp = yyvsp[0].cardexp; }
break;
case 100:
#line 594 "blog.yacc"
{ yyval.exp = yyvsp[0].exp; }
break;
case 101:
#line 599 "blog.yacc"
{yyval.exp = new StringLiteral(curr_line, curr_col, yyvsp[0].sval->getValue()); }
break;
case 102:
#line 601 "blog.yacc"
{string charstr(1, yyvsp[0].chrval->getValue()); yyval.exp = new StringLiteral(curr_line, curr_col, charstr); }
break;
case 103:
#line 603 "blog.yacc"
{yyval.exp = new IntLiteral(curr_line, curr_col, yyvsp[0].ival->getValue()); }
break;
case 104:
#line 605 "blog.yacc"
{yyval.exp = new DoubleLiteral(curr_line, curr_col, yyvsp[0].dblval->getValue()); }
break;
case 105:
#line 607 "blog.yacc"
{yyval.exp = new BoolLiteral(curr_line, curr_col, yyvsp[0].boolval->getValue()); }
break;
case 106:
#line 609 "blog.yacc"
{yyval.exp = new NullLiteral(curr_line, curr_col); }
break;
case 107:
#line 614 "blog.yacc"
{ 
      yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::PLUS, yyvsp[-2].exp, yyvsp[0].exp);   
    }
break;
case 108:
#line 618 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MINUS, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 109:
#line 620 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MUL, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 110:
#line 622 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::DIV, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 111:
#line 624 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MOD, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 112:
#line 626 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::POWER, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 113:
#line 628 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::LT, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 114:
#line 630 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::GT, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 115:
#line 632 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::LE, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 116:
#line 634 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::GE, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 117:
#line 636 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::EQ, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 118:
#line 638 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::NEQ, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 119:
#line 640 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::AND, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 120:
#line 642 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::OR, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 121:
#line 644 "blog.yacc"
{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::IMPLY, yyvsp[-2].exp, yyvsp[0].exp); }
break;
case 122:
#line 646 "blog.yacc"
{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::SUB, yyvsp[-3].exp, yyvsp[-1].exp); }
break;
case 123:
#line 648 "blog.yacc"
{yyerror("No right-hand expression for infix operator"); yyval.exp = NULL;}
break;
case 124:
#line 650 "blog.yacc"
{yyerror("No left-hand expression for infix operator"); yyval.exp = NULL;}
break;
case 125:
#line 651 "blog.yacc"
{ yyval.exp = yyvsp[0].exp; }
break;
case 140:
#line 673 "blog.yacc"
{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::SUB, new IntLiteral(curr_line, curr_col, 0), yyvsp[0].exp); }
break;
case 141:
#line 675 "blog.yacc"
{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::NOT, NULL, yyvsp[0].exp); }
break;
case 142:
#line 677 "blog.yacc"
{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::AT, NULL, yyvsp[0].exp); }
break;
case 143:
#line 678 "blog.yacc"
{yyval.exp = yyvsp[-1].exp; }
break;
case 144:
#line 683 "blog.yacc"
{yyval.exp = new QuantExpr(curr_line, curr_col, AbsynConstant::FORALL, *(new VarDecl(curr_line, curr_col, *yyvsp[-2].typ, Symbol(yyvsp[-1].sval->getValue()))), yyvsp[0].exp); }
break;
case 145:
#line 685 "blog.yacc"
{yyval.exp = new QuantExpr(curr_line, curr_col, AbsynConstant::EXISTS, *(new VarDecl(curr_line, curr_col, *yyvsp[-2].typ, Symbol(yyvsp[-1].sval->getValue()))), yyvsp[0].exp); }
break;
case 146:
#line 686 "blog.yacc"
{yyerror("Possible missing/incorrect type/ID in quantified formula");}
break;
case 147:
#line 687 "blog.yacc"
{yyerror("Possible missing/incorrect type/ID in quantified formula");}
break;
case 148:
#line 688 "blog.yacc"
{yyerror("Possible missing/incorrect expression in quantified formula");}
break;
case 149:
#line 689 "blog.yacc"
{yyerror("Possible missing/incorrect expression in quantified formula");}
break;
case 150:
#line 694 "blog.yacc"
{ 
    yyval.exp = new FuncApp(curr_line, curr_col, Symbol(yyvsp[-3].sval->getValue())); 
    if (yyvsp[-1].explst != NULL){
      for(size_t i = 0; i < yyvsp[-1].explst->size(); i++){
        yyval.exp->add((*yyvsp[-1].explst)[i]);
      }
      delete(yyvsp[-1].explst);
    }
  }
break;
case 151:
#line 707 "blog.yacc"
{ yyval.exp = new VarRef(curr_line, curr_col, Symbol(yyvsp[0].sval->getValue())); }
break;
case 152:
#line 712 "blog.yacc"
{
      yyval.exp = new DistrExpr(curr_line, curr_col, Symbol(yyvsp[-3].sval->getValue()));
      if(yyvsp[-1].explst != NULL){
        for(size_t i = 0; i < yyvsp[-1].explst->size(); i++){
          yyval.exp->add((*yyvsp[-1].explst)[i]);
        }
        delete(yyvsp[-1].explst);
      }
      /*$$->add($4);*/
      /*for(size_t i = 0; i < $4->size(); i++){*/
      /*  $$->add($4->get(i));*/
      /*} */
    }
break;
case 153:
#line 728 "blog.yacc"
{yyval.explst = yyvsp[0].explst;}
break;
case 154:
#line 729 "blog.yacc"
{yyval.explst = NULL; }
break;
case 155:
#line 734 "blog.yacc"
{ yyval.explst = yyvsp[-2].explst;
      yyval.explst->push_back(yyvsp[0].exp);
    }
break;
case 156:
#line 738 "blog.yacc"
{ 
      yyval.explst = new vector<Expr*>();
      yyval.explst->push_back(yyvsp[0].exp);
    }
break;
case 157:
#line 746 "blog.yacc"
{ }
break;
case 158:
#line 747 "blog.yacc"
{ }
break;
case 159:
#line 752 "blog.yacc"
{ }
break;
case 160:
#line 753 "blog.yacc"
{ }
break;
case 161:
#line 757 "blog.yacc"
{ 
    /*$$ = $2; */
    yyval.mapexp = new MapExpr(curr_line, curr_col);
    for (size_t i = 0; i < yyvsp[-1].exptuplst->size(); i++){
      yyval.mapexp->addMap(get<0>((*yyvsp[-1].exptuplst)[i]), get<1>((*yyvsp[-1].exptuplst)[i]));
    }
    delete(yyvsp[-1].exptuplst);
    
  }
break;
case 162:
#line 771 "blog.yacc"
{ 
      yyval.exptuplst = yyvsp[-4].exptuplst;
      yyval.exptuplst->push_back(make_tuple(yyvsp[-2].exp, yyvsp[0].exp));
      /*$$ = $1;*/
      /*$$->addMap($3, $5);*/
    }
break;
case 163:
#line 778 "blog.yacc"
{ 
      yyval.exptuplst = new vector<tuple<Expr*, Expr*>>();
      yyval.exptuplst->push_back(make_tuple(yyvsp[-2].exp, yyvsp[0].exp));
      /*$$ = new MapExpr(curr_line, curr_col);*/
      /*$$->addMap($1, $3);*/
    }
break;
case 164:
#line 787 "blog.yacc"
{yyval.cardexp = new CardinalityExpr(curr_line, curr_col, (Expr*)yyvsp[0].setexp); }
break;
case 165:
#line 788 "blog.yacc"
{ 
      VarDecl var(curr_line, curr_col, *yyvsp[0].typ);
      yyval.cardexp = new CardinalityExpr(curr_line, curr_col, new CondSet(curr_line, curr_col, var));
  }
break;
case 166:
#line 792 "blog.yacc"
{
      yyerror("Malformed type or set expression as argument of number expression");
      yyval.cardexp = NULL;
  }
break;
case 167:
#line 799 "blog.yacc"
{ yyval.origdec = new OriginDecl(curr_line, curr_col, yyvsp[-5].typ->getTyp(), Symbol(yyvsp[-4].sval->getValue()), yyvsp[-2].typ->getTyp());  }
break;
case 168:
#line 801 "blog.yacc"
{ yyerror("Missing right parenthesis around type in origin function declaration"); yyval.origdec = NULL;}
break;
case 169:
#line 803 "blog.yacc"
{ yyerror("Missing left parenthesis around type in origin function declaration"); yyval.origdec = NULL;}
break;
case 170:
#line 805 "blog.yacc"
{ yyerror("Missing right parenthesis around type in origin function declaration"); yyval.origdec = NULL;}
break;
case 171:
#line 807 "blog.yacc"
{ yyerror("Missing left parenthesis around type in origin function declaration"); yyval.origdec = NULL;}
break;
case 176:
#line 820 "blog.yacc"
{yyval.setexp = yyvsp[0].setexp; }
break;
case 177:
#line 821 "blog.yacc"
{yyval.setexp = yyvsp[0].setexp; }
break;
case 178:
#line 827 "blog.yacc"
{
      yyval.setexp = new ListSet(curr_line, curr_col);
      if(yyvsp[-1].explst != NULL){
        for(size_t i = 0; i < yyvsp[-1].explst->size(); i++){
          yyval.setexp->add((*yyvsp[-1].explst)[i]);
        }
        delete(yyvsp[-1].explst);
      }
      /*$$ = new SetExpr(curr_line, curr_col); */
      /*$$->add($2);*/
    }
break;
case 179:
#line 843 "blog.yacc"
{ 
      yyval.setexp = new CondSet(curr_line, curr_col, VarDecl(curr_line, curr_col, *yyvsp[-4].typ, Symbol(yyvsp[-3].sval->getValue())), yyvsp[-1].exp);
      /*$$ = new CondSet(curr_line, curr_col, NULL);*/
      /*$$->add($5);*/
    }
break;
case 180:
#line 849 "blog.yacc"
{ 
      yyval.setexp = new CondSet(curr_line, curr_col, VarDecl(curr_line, curr_col, *yyvsp[-2].typ, Symbol(yyvsp[-1].sval->getValue())));
    }
break;
case 181:
#line 858 "blog.yacc"
{ }
break;
case 182:
#line 860 "blog.yacc"
{ }
break;
case 183:
#line 866 "blog.yacc"
{yyval.stmt = yyvsp[-1].stmt; }
break;
case 184:
#line 869 "blog.yacc"
{yyval.stmt = yyvsp[0].stmt; }
break;
case 185:
#line 870 "blog.yacc"
{yyval.stmt = yyvsp[0].stmt; }
break;
case 186:
#line 876 "blog.yacc"
{
    yyval.stmt = new Evidence(curr_line, curr_col, yyvsp[-2].exp, yyvsp[0].exp); 
  }
break;
case 187:
#line 880 "blog.yacc"
{
    yyerror("Value is possibly not an expression");
    yyval.stmt = NULL;
  }
break;
case 188:
#line 885 "blog.yacc"
{
    yyerror("Evidence is possibly not an expression");
    yyval.stmt = NULL;
  }
break;
case 189:
#line 894 "blog.yacc"
{ yyval.stmt = new Evidence(curr_line, curr_col, yyvsp[-2].setexp, yyvsp[0].setexp); }
break;
case 190:
#line 898 "blog.yacc"
{yyval.stmt = yyvsp[-1].stmt; }
break;
case 191:
#line 899 "blog.yacc"
{yyerror("Query might not be an expression.");}
break;
case 192:
#line 903 "blog.yacc"
{ yyval.stmt = new Query(curr_line, curr_col, yyvsp[0].exp); }
break;
#line 2136 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}

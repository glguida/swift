#ifndef lint
static const char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif

#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYPATCH 20130925

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)

#define YYPREFIX "yy"

#define YYPURE 0

#line 2 "blog.yacc"
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <tuple>
#include "BLOGSymbol.h"
#include "../absyn/Absyn.h"
#include "../absyn/ArrayExpr.h"
#include "../absyn/BoolLiteral.h"
#include "../absyn/BlogProgram.h"
#include "../absyn/CardinalityExpr.h"
#include "../absyn/CondSet.h"
#include "../absyn/Decl.h"
#include "../absyn/DistinctDecl.h"
#include "../absyn/DistrExpr.h"
#include "../absyn/DoubleLiteral.h"
#include "../absyn/Evidence.h"
#include "../absyn/Expr.h"
#include "../absyn/FuncApp.h"
#include "../absyn/FuncDecl.h"
#include "../absyn/IfExpr.h"
#include "../absyn/IntLiteral.h"
#include "../absyn/Literal.h"
#include "../absyn/ListSet.h"
#include "../absyn/MapExpr.h"
#include "../absyn/NullLiteral.h"
#include "../absyn/NumStDecl.h"
#include "../absyn/OpExpr.h"
#include "../absyn/OriginDecl.h"
#include "../absyn/QuantExpr.h"
#include "../absyn/Query.h"
#include "../absyn/SetExpr.h"
#include "../absyn/Stmt.h"
#include "../absyn/StringLiteral.h"
#include "../absyn/Symbol.h"
#include "../absyn/TimeStampLiteral.h"
#include "../absyn/Ty.h"
#include "../absyn/TypDecl.h"
#include "../absyn/VarDecl.h"
#include "../absyn/VarRef.h"
#include "../absyn/CaseExpr.h"
#include "../absyn/TupleSetExpr.h"
using namespace std;
using namespace swift::absyn;

/* stuff from flex that bison needs to know about: */
extern "C" int yylex();
extern "C" int yyparse();
extern "C" FILE *yyin;
extern "C" int yylineno;
extern "C" int curr_line;
extern "C" int curr_col;

void yyerror(const char *s);
BlogProgram *blog;

BlogProgram* parse(const char* inp) {
  blog = new BlogProgram(0, 0);
  /* open a file handle to a particular file:*/
  FILE *myfile = fopen(inp, "r");
  /* make sure it is valid:*/
  if (!myfile) {
    cout << "I can't open input.in" << endl;
    exit(0);
    /*return -1;*/
  }
  /* set flex to read from it instead of defaulting to STDIN:*/
  yyin = myfile;
  /* parse through the input until there is no more:*/
  do {
    yyparse();
  } while (!feof(yyin));
  return blog;  
}
#line 79 "blog.yacc"
#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#endif
#ifndef YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
typedef union {
  int i;
  class BLOGSymbol<int>* ival;
  class BLOGSymbol<double>* dblval;
  class BLOGSymbol<char>* chrval;
  class BLOGSymbol<bool>* boolval;
  class BLOGSymbol<string>* sval;
  vector<tuple<string,int>>* symbintvect;
  tuple<string,int>* symbintpair;
  class Absyn* ast;
  class ArrayExpr* arrayexp;
  class BoolLiteral* boollit;
  class BlogProgram* bprog;
  class CardinalityExpr* cardexp;
  class CondSet* cset;
  class Decl* dec;
  class DistinctDecl* distdec;
  class DistrExpr* distrexp;
  class DoubleLiteral* doublelit;
  class Evidence* evid;
  class Expr* exp;
  class FuncApp* fapp;
  class FuncDecl* funcdec;
  class IfExpr* ifexp;
  class IntLiteral* intlit;
  class Literal* lit;
  class ListSet* lset;
  class MapExpr* mapexp;
  class NullLiteral* nullit;
  class NumStDecl* numstdec;
  class OpExpr* opexp;
  class OriginDecl* origdec;
  class QuantExpr* quantexp;
  class Query* query;
  class SetExpr* setexp;
  class Stmt* stmt;
  class StringLiteral* stringlit;
  class Symbol* symb;
  class Ty* typ;
  class TypDecl* typdec;
  class VarDecl* vardec;
  class VarRef* varref;
  void *compexp[3];
  void *pair[2];
  vector<VarDecl>* varlist;
  vector<tuple<Expr*, Expr*>>* exptuplst;
  vector<Expr*>* explst;
  vector<tuple<Symbol, Symbol>>* varlst;
} YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
#line 152 "parser.cpp"

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define ELSE 257
#define IF 258
#define THEN 259
#define TYPE 260
#define RANDOM 261
#define FIXED 262
#define ORIGIN 263
#define DISTINCT 264
#define QUERY 265
#define OBS 266
#define PARAM 267
#define LIST 268
#define MAP 269
#define DISTRIBUTION 270
#define CASE 271
#define IN 272
#define EXISTS_ 273
#define FORALL_ 274
#define FOR 275
#define NULLITY 276
#define INT_LITERAL 277
#define DOUBLE_LITERAL 278
#define BOOLEAN_LITERAL 279
#define CHAR_LITERAL 280
#define STRING_LITERAL 281
#define ID 282
#define PARFACTOR 283
#define FACTOR 284
#define ERROR 285
#define ELSEIF 286
#define AT_ 287
#define PLUS_ 288
#define MULT_ 289
#define DIV_ 290
#define MOD_ 291
#define POWER_ 292
#define MINUS_ 293
#define UMINUS 294
#define LST 295
#define LT_ 296
#define GT_ 297
#define LEQ_ 298
#define GEQ_ 299
#define EQEQ_ 300
#define NEQ_ 301
#define EQ_ 302
#define DISTRIB 303
#define NOT_ 304
#define AND_ 305
#define OR_ 306
#define DOUBLERIGHTARROW 307
#define COMMA 308
#define SEMI 309
#define COLON 310
#define DOT 311
#define NUMSIGN 312
#define RIGHTARROW 313
#define LPAREN 314
#define RPAREN 315
#define LBRACE 316
#define RBRACE 317
#define LBRACKET 318
#define RBRACKET 319
#define YYERRCODE 256
static const short yylhs[] = {                           -1,
    0,   44,   44,   45,   45,   45,   45,    1,    1,    1,
    1,    2,    2,    2,    2,    2,    2,    2,    2,    3,
    3,   35,   37,   37,   37,   37,   42,   46,   46,   36,
   36,   36,   36,   36,   10,   10,   11,   11,   11,    8,
    8,    8,    8,    8,   38,   38,   39,   39,   39,   39,
   39,   39,    9,    9,    9,    9,    9,   12,   41,   41,
   41,   41,   40,   40,    4,   43,   43,   27,    5,    5,
   15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   16,   16,   16,   16,   16,   16,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   18,   18,   18,   18,   19,   19,   20,
   20,   20,   22,   22,   23,   32,   32,   33,   33,   33,
   21,   21,   31,   31,   26,   34,   34,   25,   25,   25,
   28,   28,   29,   24,   24,   30,    6,    6,   13,   14,
   14,   14,    7,    7,
};
static const short yylen[] = {                            2,
    1,    0,    1,    3,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    2,    1,    0,    2,    3,    1,    2,    2,    2,    3,
    1,    3,    2,    3,    6,    2,    5,    3,    2,    4,
    3,    5,    3,    2,    3,    0,    5,    5,    5,    4,
    3,    2,    6,    6,    5,    5,    2,    3,    1,    3,
    2,    3,    1,    4,    7,    1,    3,    2,    3,    5,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    4,    1,    2,    2,    2,    3,    4,    4,    4,
    1,    3,    6,    4,    4,    1,    0,    3,    3,    1,
    3,    3,    3,    3,    3,    5,    3,    2,    2,    2,
    1,    1,    3,    5,    3,    3,    2,    2,    1,    3,
    3,    3,    2,    2,
};
static const short yydefred[] = {                         0,
   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    8,   12,   19,   18,    9,   10,   16,
   15,   13,   14,   17,    1,    0,   21,   20,    0,    0,
    0,   22,   36,    0,   57,    0,    0,  144,    0,    0,
    0,    0,   86,   83,   84,   85,   82,   81,    0,    0,
    0,    0,    0,    0,    0,    0,   72,   71,  103,   76,
   73,   74,   79,   80,   78,   75,   77,  131,  132,    0,
    0,  137,  139,    0,    0,    0,   44,    0,    0,    0,
    5,    0,    0,   38,    0,    0,    0,    0,    0,    0,
   59,    0,    0,    0,    0,    0,    0,    0,    0,  130,
    0,  128,  129,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   41,   43,    0,    4,
    0,   67,    0,    0,    0,    0,   31,    0,    0,    0,
    0,    0,    0,   61,    0,    0,    0,    0,    0,  107,
    0,  136,  133,    0,    0,    0,    0,  125,  122,  121,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  112,    0,    0,
    0,  142,    0,    0,    0,   52,    0,    0,    0,   45,
    0,    0,   40,   24,    0,   27,    0,   33,    0,   37,
    0,    0,    0,   56,   55,    0,   28,   60,   29,   62,
    0,    0,  115,    0,    0,    0,    0,    0,    0,    0,
  123,    0,  102,  110,    0,    0,   51,    0,    0,    0,
   42,   25,   34,   30,   32,    0,   54,   53,   64,    0,
    0,    0,    0,    0,   50,    0,    0,    0,    0,    0,
   65,   49,   47,   48,
};
static const short yydgoto[] = {                         12,
   13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
   23,   24,   72,   73,  110,   57,   58,   59,   60,   61,
   62,   63,   64,  106,   65,   66,   84,   67,   68,   69,
  111,  107,  108,  109,  144,  145,  146,   79,  136,   91,
   92,  147,   70,   25,   26,  166,
};
static const short yysindex[] = {                      -126,
    0, -230, -175, -110, -106, -268, 1519, 1568, -268, -258,
 -241,    0, -278,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, -126,    0,    0, -260, -221,
 -202,    0,    0, -191,    0, -274, -190,    0, 1859, 1859,
 -268, -268,    0,    0,    0,    0,    0,    0, 1859, 1859,
 1859, -252, 1859, 1859, 1859, 2076,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -220,
 -209,    0,    0, 1960, -185, -204,    0, -178, -260, -235,
    0, -181, 1859,    0, -268, -232, -232, -231, -268, -213,
    0, -113, 1890, 1913, -150, -149, -171, -171, -171,    0,
 1859,    0,    0, 1983, 2014, -168, -165, -269, -295, 2076,
 -164, -153, -272, 1859, 1859, 1859, 1859, 1859, 1859, 1859,
 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1859, 1617,
 1859, 1666, -130, -268, -194, -255,    0,    0, -115,    0,
 2076,    0, -253,  -83, -112, -260,    0,  -98,  -77, -114,
 -105,  -68,  -62,    0,  -26, 1859, -104, 1859, 1859,    0,
 1859,    0,    0, -268, 1763, 1811, 1859,    0,    0,    0,
 1859, -107, -171, -171, -171, -171, -107,  -39,  -39,  -39,
  -39,  -39,  -39, 2122, 2122, 2099, 1936,    0,  -91,  -76,
 2076,    0, 2076, 1859,  -75,    0,  -42,  -30,  -13,    0,
  -12, 1715,    0,    0, -254,    0, -240,    0,    3,    0,
 1859,  -41,  -40,    0,    0,  -38,    0,    0,    0,    0,
  -63, 1859,    0, 2076, 2076, 2076,  -95, 2076, 2076, 2045,
    0, -272,    0,    0, 2076, 1859,    0,   -4,  -25,  -22,
    0,    0,    0,    0,    0, 2076,    0,    0,    0, 1859,
 2014, 1859, 1859,  -31,    0,   30,    5, 2076, 2076, 2076,
    0,    0,    0,    0,
};
static const short yyrindex[] = {                       288,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    2,    0, 1482,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  317,    0,    0, 1148,    1,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   16,   15, 1290,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   65,
 1302,    0,    0,    0,    0,    0,    0,    0,    0,    2,
    0, 1503,    0,    0,    0,   33,   36,    0,    0, 1266,
    0, 1320,    0,    0,    0,    0,  129,  193,  259,    0,
   16,    0,    0,    0, -270,    0,    0,   22,    0, -144,
    0,    0,   23,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   26,
    0,    0, 1356,    0,    0,    0,    0,    0,    0,    0,
 1375,    0,    0,    0, -216,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  581,  323,  387,  451,  517,  645,  665,  729,  754,
  820,  849,  913,  934,  998, 1022,    0,    0,    0,   28,
 1388,    0, 1416,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1202,    0,    0, 1088, 1117, -140,   27, -117, -101,    0,
    0,   29,    0,    0, 1449,   26,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1470,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1181,   32,  -86,
    0,    0,    0,    0,
};
static const short yygindex[] = {                         0,
  319,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   -5,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  189,  -69,  295,    0,    0,
  179,  -55,  -46,    0,   54, -131,  264,  272,    0,  -81,
    0, -138,   14,    0,    0,  -60,
};
#define YYTABLESIZE 2440
static const short yytable[] = {                        112,
   66,   56,   74,  100,  120,  164,  208,   88,  113,  137,
  154,  205,  167,   30,   77,  243,   32,   32,   32,   37,
  138,  168,   32,   76,   80,   27,  198,   30,   30,   30,
   81,  155,  227,   93,   94,  165,  171,  120,  165,   89,
   30,   30,   83,   97,   98,   99,  120,  104,  105,   30,
   30,   28,  199,  207,   32,   32,   31,   34,   36,  200,
  242,  204,   75,  101,  111,   32,  208,  217,  244,  203,
  245,  218,   78,  220,  189,  201,  210,  141,   78,   86,
   29,  143,  149,  190,  209,   26,   26,  196,  208,   85,
   87,   90,  131,  130,   95,   96,  133,  134,  142,   32,
   32,   32,   32,  135,  152,  103,   30,  197,  172,  173,
  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
  184,  185,  186,  187,  232,  191,  193,  140,  106,    1,
  120,  158,  159,    2,    3,    4,    5,    6,    7,    8,
    9,  150,  151,   10,  209,   33,  129,  195,  162,   35,
  221,  163,  224,  225,  169,  226,   32,  118,   32,  228,
  229,  230,   32,  120,  120,  170,  209,  127,   90,   30,
  120,   30,  120,  119,  120,   30,  127,   32,  212,  194,
  254,  115,  116,  117,  118,   11,   30,  202,  235,  190,
  118,  118,  104,  250,  153,  207,  141,  118,  206,  118,
  214,  118,  213,  211,   30,  246,  119,  119,  216,  215,
  129,  222,  207,  119,  252,  119,  251,  119,   32,   90,
   32,  126,   32,  234,  114,  115,  116,  117,  118,  119,
  126,  165,  120,  121,  122,  123,  124,  125,  236,  237,
   32,  126,  127,  128,  258,  217,  259,  260,  114,  115,
  116,  117,  118,  119,  129,   90,   66,   66,  105,   66,
   66,   66,   66,   66,   66,   66,   66,   66,  239,  240,
   66,  238,   66,  247,  248,   66,  256,  255,  129,  257,
  249,  219,   66,  261,   30,  262,  264,    2,   66,   66,
   66,   66,   66,   66,  217,  219,   66,   66,   66,   66,
   66,   66,   66,   66,   46,   66,   66,   66,   66,   66,
  219,  263,   66,   66,   66,   66,    3,   66,   66,   66,
  111,  111,   89,  111,  111,  111,  111,  111,  111,  111,
  111,  111,  117,  117,  111,   23,  111,   23,  116,  111,
  117,  116,  116,  135,   82,  223,  102,  124,  134,  231,
  148,  139,  111,  111,  111,  111,  111,  111,    0,    0,
  111,  111,  111,  111,  111,  111,  111,    0,    0,  111,
  111,  111,  111,  111,    0,    0,  111,  111,    0,  111,
    0,  111,  111,  111,  106,  106,   90,  106,  106,  106,
  106,  106,  106,  106,  106,  106,    0,    0,  106,    0,
  106,    0,    0,  106,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  106,  106,  106,  106,
  106,  106,    0,    0,  106,  106,  106,  106,  106,  106,
  106,    0,    0,  106,  106,  106,  106,  106,    0,    0,
  106,  106,    0,  106,    0,  106,    0,  106,  104,  104,
   91,  104,  104,  104,  104,  104,  104,  104,  104,  104,
    0,    0,  104,    0,  104,    0,    0,  104,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  104,  104,  104,  104,  104,  104,    0,    0,  104,  104,
  104,  104,  104,  104,  104,    0,    0,  104,  104,  104,
  104,  104,    0,    0,  104,  104,    0,  104,    0,  104,
    0,  104,    0,    0,  105,  105,   92,  105,  105,  105,
  105,  105,  105,  105,  105,  105,    0,    0,  105,    0,
  105,    0,    0,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  105,  105,  105,  105,
  105,  105,    0,    0,  105,  105,  105,  105,  105,  105,
  105,    0,    0,  105,  105,  105,  105,  105,    0,    0,
  105,  105,    0,  105,    0,  105,    0,  105,   89,   89,
   87,   89,   89,   89,   89,   89,   89,   89,   89,   89,
    0,    0,   89,    0,   89,    0,    0,   89,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   89,   89,   89,   89,   89,   89,    0,    0,   89,   89,
   89,   89,   89,   89,   89,    0,    0,   89,   89,   89,
   89,   89,    0,    0,   89,   89,    0,   89,    0,   89,
    0,   89,   90,   90,   88,   90,   90,   90,   90,   90,
   90,   90,   90,   90,    0,    0,   90,    0,   90,    0,
    0,   90,    0,    0,   93,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   90,   90,   90,   90,   90,
    0,    0,   90,   90,   90,   90,   90,   90,   90,    0,
    0,   90,   90,   90,   90,   90,    0,    0,   90,   90,
    0,   90,    0,   90,    0,   90,   91,   91,    0,   91,
   91,   91,   91,   91,   91,   91,   91,   91,    0,    0,
   91,    0,   91,    0,    0,   91,    0,    0,   94,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   91,   91,
   91,   91,   91,   91,    0,    0,   91,   91,   91,   91,
   91,   91,   91,   95,    0,   91,   91,   91,   91,   91,
    0,    0,   91,   91,    0,   91,    0,   91,    0,   91,
    0,    0,   92,   92,    0,   92,   92,   92,   92,   92,
   92,   92,   92,   92,    0,    0,   92,    0,   92,    0,
    0,   92,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   92,   92,   92,   92,   92,   92,
    0,    0,   92,   92,   92,   92,   92,   92,   92,   96,
    0,   92,   92,   92,   92,   92,    0,    0,   92,   92,
    0,   92,    0,   92,    0,   92,   87,   87,    0,   87,
   87,   87,   87,   87,   87,   87,   87,   87,   97,    0,
   87,    0,   87,    0,    0,   87,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   87,    0,
    0,    0,    0,   87,    0,    0,   87,   87,   87,   87,
   87,   87,   87,    0,    0,   87,   87,   87,   87,   87,
    0,    0,   87,   87,    0,   87,    0,   87,    0,   87,
   88,   88,    0,   88,   88,   88,   88,   88,   88,   88,
   88,   88,   98,    0,   88,    0,   88,    0,    0,   88,
   93,   93,    0,   93,   93,   93,   93,   93,   93,   93,
   93,   93,   88,   99,   93,    0,   93,   88,    0,   93,
   88,   88,   88,   88,   88,   88,   88,    0,    0,   88,
   88,   88,   88,   88,    0,    0,   88,   88,    0,   88,
    0,   88,    0,   88,    0,    0,   93,    0,    0,   93,
   93,   93,   93,   93,    0,    0,   93,   93,    0,   93,
    0,   93,    0,   93,   94,   94,    0,   94,   94,   94,
   94,   94,   94,   94,   94,   94,    0,  100,   94,    0,
   94,    0,    0,   94,    0,    0,    0,    0,    0,   95,
   95,    0,   95,   95,   95,   95,   95,   95,   95,   95,
   95,  101,    0,   95,    0,   95,    0,    0,   95,    0,
   94,    0,    0,   94,   94,   94,   94,   94,    0,    0,
   94,   94,    0,   94,    0,   94,    0,   94,    0,    0,
    0,    0,    0,    0,    0,   95,    0,    0,   95,   95,
   95,   95,   95,    0,    0,   95,   95,    0,   95,    0,
   95,    0,   95,    0,    0,   96,   96,    0,   96,   96,
   96,   96,   96,   96,   96,   96,   96,  109,    0,   96,
    0,   96,    0,    0,   96,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   97,   97,    0,   97,   97,   97,
   97,   97,   97,   97,   97,   97,  108,    0,   97,    0,
   97,   96,    0,   97,   96,   96,   96,   96,   96,    0,
    0,   96,   96,    0,   96,    0,   96,    0,   96,    0,
    0,    0,    0,    0,    0,    0,    0,   39,    0,    0,
   97,    0,    0,   97,   97,   97,   97,   97,    0,    0,
   97,   97,    0,   97,    0,   97,    0,   97,   98,   98,
    0,   98,   98,   98,   98,   98,   98,   98,   98,   98,
  113,    0,   98,    0,   98,    0,    0,   98,    0,   99,
   99,    0,   99,   99,   99,   99,   99,   99,   99,   99,
   99,  114,    0,   99,    0,   99,    0,    0,   99,    0,
    0,    0,    0,    0,   98,    0,    0,   98,   98,   98,
   98,   98,    0,    0,   98,   98,    0,   98,    0,   98,
    0,   98,    0,    0,    0,   99,    0,    0,   99,   99,
   99,   99,   99,    0,    0,   99,   99,    0,   99,    0,
   99,    0,   99,  100,  100,    0,  100,  100,  100,  100,
  100,  100,  100,  100,  100,   63,    0,  100,    0,  100,
    0,    0,  100,    0,    0,    0,    0,  101,  101,    0,
  101,  101,  101,  101,  101,  101,  101,  101,  101,  143,
    0,  101,    0,  101,    0,    0,  101,    0,    0,  100,
    0,  138,  100,  100,  100,  100,  100,    0,    0,  100,
  100,    0,  100,    0,  100,    0,  100,    0,    0,   58,
    0,    0,    0,  101,    0,    0,    0,    0,  101,  101,
  101,    0,    0,  101,  101,    0,  101,    0,  101,    0,
  101,    0,    0,  109,  109,    0,  109,  109,  109,  109,
  109,  109,  109,  109,  109,   69,    0,  109,    0,  109,
    0,    0,  109,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  108,  108,   68,  108,  108,  108,  108,  108,
  108,  108,  108,  108,    0,    0,  108,  141,  108,  109,
    0,  108,    0,    0,    0,  109,  109,    0,    0,  109,
  109,    0,  109,   39,  109,    0,  109,   39,   39,   39,
   39,   39,   39,   39,   39,  140,    0,   39,  108,    0,
    0,    0,    0,    0,  108,  108,    0,    0,  108,  108,
    0,  108,    0,  108,    0,  108,  113,  113,    0,  113,
  113,  113,  113,  113,  113,  113,  113,  113,   70,    0,
  113,    0,  113,    0,    0,  113,   39,  114,    0,   39,
  114,  114,  114,  114,  114,  114,  114,  114,  114,   35,
    0,  114,    0,  114,    0,    0,  114,    0,    0,    0,
    0,    7,  113,    0,    0,    0,    0,    0,  113,  113,
    0,    0,  113,  113,    0,  113,    0,  113,    0,  113,
    0,    0,    6,  114,    0,    0,    0,    0,    0,  114,
  114,    0,    0,  114,  114,    0,  114,    0,  114,    0,
  114,   63,    0,    0,    0,   63,   63,   63,   63,   63,
   63,   63,   63,    0,    0,   63,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  143,    0,   63,    0,  143,
  143,  143,  143,  143,  143,  143,  143,  138,    0,  143,
    0,  138,  138,  138,  138,  138,  138,  138,  138,    0,
    0,  138,    0,   63,   63,   58,    0,   63,    0,   58,
   58,   58,   58,   58,   58,   58,   58,    0,    0,   58,
    0,    0,    0,    0,    0,    0,    0,    0,  143,    0,
    0,  143,    0,    0,    0,    0,    0,    0,    0,    0,
  138,   69,    0,  138,    0,   69,   69,   69,   69,   69,
   69,   69,   69,    0,    0,   69,    0,    0,   58,    0,
   68,   58,    0,    0,   68,   68,   68,   68,   68,   68,
   68,   68,    0,  141,   68,    0,    0,  141,  141,  141,
  141,  141,  141,  141,  141,    0,    0,  141,    0,    0,
    0,    0,    0,    0,   69,    0,    0,   69,    0,    0,
    0,  140,    0,    0,    0,  140,  140,  140,  140,  140,
  140,  140,  140,   68,    0,  140,   68,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  141,    0,    0,  141,
    0,    0,    0,    0,   70,    0,    0,    0,   70,   70,
   70,   70,   70,   70,   70,   70,    0,    0,   70,    0,
    0,    0,    0,    0,  140,   35,    0,  140,    0,   35,
   35,   35,   35,   35,   35,   35,   35,    7,    0,   35,
    0,    7,    7,    7,    7,    7,    7,    7,    7,    0,
    0,    7,    0,    0,    0,    0,    0,   70,    6,    0,
   70,    0,    6,    6,    6,    6,    6,    6,    6,    6,
    0,    0,    6,    0,   38,    0,   39,    0,   35,    0,
    0,   35,    0,    0,    0,    0,    0,    0,    0,   40,
    0,   41,   42,    7,   43,   44,   45,   46,   47,   48,
   30,    0,    0,    0,    0,   49,    0,    0,    0,    0,
    0,   50,    0,    0,    6,    0,    0,    0,    0,    0,
    0,    0,   51,   71,    0,   39,    0,    0,    0,    0,
   52,    0,   53,    0,   54,    0,   55,    0,   40,    0,
   41,   42,    0,   43,   44,   45,   46,   47,   48,   30,
    0,    0,    0,    0,   49,    0,    0,    0,    0,    0,
   50,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   51,  188,    0,   39,    0,    0,    0,    0,   52,
    0,   53,    0,   54,    0,   55,    0,   40,    0,   41,
   42,    0,   43,   44,   45,   46,   47,   48,   30,    0,
    0,    0,    0,   49,    0,    0,    0,    0,    0,   50,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   51,  192,    0,   39,    0,    0,    0,    0,   52,    0,
   53,    0,   54,    0,   55,    0,   40,    0,   41,   42,
    0,   43,   44,   45,   46,   47,   48,   30,    0,    0,
    0,    0,   49,    0,    0,    0,    0,    0,   50,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   51,
  241,    0,   39,    0,    0,    0,    0,   52,    0,   53,
    0,   54,    0,   55,    0,   40,    0,   41,   42,    0,
   43,   44,   45,   46,   47,   48,   30,    0,    0,    0,
    0,   49,    0,    0,    0,    0,    0,   50,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   51,    0,
   39,    0,    0,    0,    0,    0,   52,    0,   53,    0,
   54,    0,   55,   40,    0,   41,   42,    0,   43,   44,
   45,   46,   47,   48,   30,    0,    0,    0,    0,   49,
    0,    0,    0,    0,    0,   50,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   51,    0,   39,    0,
  217,    0,    0,    0,   52,    0,   53,    0,   54,    0,
   55,   40,    0,   41,   42,    0,   43,   44,   45,   46,
   47,   48,   30,    0,    0,    0,    0,   49,    0,    0,
    0,    0,    0,   50,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   51,    0,   39,    0,  219,    0,
    0,    0,   52,    0,   53,    0,   54,    0,   55,   40,
    0,   41,   42,    0,   43,   44,   45,   46,   47,   48,
   30,    0,    0,    0,    0,   49,    0,    0,  156,    0,
    0,   50,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   51,    0,    0,    0,    0,    0,    0,    0,
   52,    0,   53,    0,   54,    0,   55,  114,  115,  116,
  117,  118,  119,    0,  157,  120,  121,  122,  123,  124,
  125,    0,    0,    0,  126,  127,  128,    0,    0,    0,
  114,  115,  116,  117,  118,  119,    0,  129,  120,  121,
  122,  123,  124,  125,    0,    0,    0,  126,  127,  128,
    0,    0,    0,  114,  115,  116,  117,  118,  119,    0,
  129,  120,  121,  122,  123,  124,  125,    0,    0,    0,
  126,  127,  128,    0,    0,    0,    0,  114,  115,  116,
  117,  118,  119,  129,  233,  120,  121,  122,  123,  124,
  125,  132,    0,    0,  126,  127,  128,    0,    0,    0,
  114,  115,  116,  117,  118,  119,    0,  129,  120,  121,
  122,  123,  124,  125,    0,    0,    0,  126,  127,  128,
    0,    0,    0,    0,    0,    0,    0,  160,    0,    0,
  129,  114,  115,  116,  117,  118,  119,    0,    0,  120,
  121,  122,  123,  124,  125,    0,    0,    0,  126,  127,
  128,    0,    0,    0,    0,    0,  161,    0,    0,    0,
    0,  129,  114,  115,  116,  117,  118,  119,    0,    0,
  120,  121,  122,  123,  124,  125,    0,    0,    0,  126,
  127,  128,    0,    0,    0,    0,    0,  253,    0,    0,
    0,    0,  129,  114,  115,  116,  117,  118,  119,    0,
    0,  120,  121,  122,  123,  124,  125,    0,    0,    0,
  126,  127,  128,    0,    0,    0,  114,  115,  116,  117,
  118,  119,    0,  129,  120,  121,  122,  123,  124,  125,
    0,    0,    0,  126,  127,    0,    0,    0,    0,  114,
  115,  116,  117,  118,  119,    0,  129,  120,  121,  122,
  123,  124,  125,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  129,
};
static const short yycheck[] = {                         55,
    0,    7,    8,  256,  275,  275,  145,  282,   55,   79,
   92,  143,  308,  282,  256,  256,    3,    4,    5,    6,
  256,  317,    9,  282,   11,  256,  282,  282,  282,  282,
  309,   92,  164,   39,   40,  308,  309,  308,  308,  314,
  282,  282,  303,   49,   50,   51,  317,   53,   54,  282,
  282,  282,  308,  308,   41,   42,    3,    4,    5,  315,
  315,  315,    9,  316,    0,   52,  205,  308,  207,  139,
  209,  153,  314,  155,  130,  136,  146,   83,  314,  282,
  256,  314,  314,  130,  145,  302,  303,  282,  227,  311,
  282,  282,  302,  314,   41,   42,  282,  302,   85,   86,
   87,   88,   89,  282,  318,   52,  282,  302,  114,  115,
  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
  126,  127,  128,  129,  171,  131,  132,  309,    0,  256,
  275,  282,  282,  260,  261,  262,  263,  264,  265,  266,
  267,   88,   89,  270,  205,  256,  318,  134,  317,  256,
  156,  317,  158,  159,  319,  161,  143,  275,  145,  165,
  166,  167,  149,  308,  309,  319,  227,  308,  282,  282,
  315,  282,  317,  275,  319,  282,  317,  164,  256,  310,
  236,  289,  290,  291,  292,  312,  282,  303,  194,  236,
  308,  309,    0,  257,  308,  308,  202,  315,  282,  317,
  315,  319,  149,  302,  282,  211,  308,  309,  277,  315,
  318,  316,  308,  315,  310,  317,  222,  319,  205,  282,
  207,  308,  209,  315,  288,  289,  290,  291,  292,  293,
  317,  308,  296,  297,  298,  299,  300,  301,  314,  282,
  227,  305,  306,  307,  250,  308,  252,  253,  288,  289,
  290,  291,  292,  293,  318,  282,  256,  257,    0,  259,
  260,  261,  262,  263,  264,  265,  266,  267,  282,  282,
  270,  302,  272,  315,  315,  275,  302,  282,  318,  302,
  319,  308,  282,  315,  282,  256,  282,    0,  288,  289,
  290,  291,  292,  293,  308,  308,  296,  297,  298,  299,
  300,  301,  302,  303,  303,  305,  306,  307,  308,  309,
  308,  282,  312,  313,  314,  315,    0,  317,  318,  319,
  256,  257,    0,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  317,  319,  270,  303,  272,  302,  317,  275,
  315,  319,  315,  317,   26,  157,   52,  319,  317,  171,
   87,   80,  288,  289,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,
   -1,  317,  318,  319,  256,  257,    0,  259,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,   -1,
  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,  309,   -1,   -1,
  312,  313,   -1,  315,   -1,  317,   -1,  319,  256,  257,
    0,  259,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,
   -1,  319,   -1,   -1,  256,  257,    0,  259,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,   -1,
  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,   -1,   -1,  305,  306,  307,  308,  309,   -1,   -1,
  312,  313,   -1,  315,   -1,  317,   -1,  319,  256,  257,
    0,  259,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,   -1,   -1,  305,  306,  307,
  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,
   -1,  319,  256,  257,    0,  259,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,   -1,
   -1,  305,  306,  307,  308,  309,   -1,   -1,  312,  313,
   -1,  315,   -1,  317,   -1,  319,  256,  257,   -1,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
  270,   -1,  272,   -1,   -1,  275,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,  289,
  290,  291,  292,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,    0,   -1,  305,  306,  307,  308,  309,
   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,  319,
   -1,   -1,  256,  257,   -1,  259,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,   -1,  272,   -1,
   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,    0,
   -1,  305,  306,  307,  308,  309,   -1,   -1,  312,  313,
   -1,  315,   -1,  317,   -1,  319,  256,  257,   -1,  259,
  260,  261,  262,  263,  264,  265,  266,  267,    0,   -1,
  270,   -1,  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,   -1,   -1,  305,  306,  307,  308,  309,
   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,  319,
  256,  257,   -1,  259,  260,  261,  262,  263,  264,  265,
  266,  267,    0,   -1,  270,   -1,  272,   -1,   -1,  275,
  256,  257,   -1,  259,  260,  261,  262,  263,  264,  265,
  266,  267,  288,    0,  270,   -1,  272,  293,   -1,  275,
  296,  297,  298,  299,  300,  301,  302,   -1,   -1,  305,
  306,  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,
   -1,  317,   -1,  319,   -1,   -1,  302,   -1,   -1,  305,
  306,  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,
   -1,  317,   -1,  319,  256,  257,   -1,  259,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,    0,  270,   -1,
  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,  259,  260,  261,  262,  263,  264,  265,  266,
  267,    0,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
  302,   -1,   -1,  305,  306,  307,  308,  309,   -1,   -1,
  312,  313,   -1,  315,   -1,  317,   -1,  319,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  302,   -1,   -1,  305,  306,
  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,
  317,   -1,  319,   -1,   -1,  256,  257,   -1,  259,  260,
  261,  262,  263,  264,  265,  266,  267,    0,   -1,  270,
   -1,  272,   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,  259,  260,  261,
  262,  263,  264,  265,  266,  267,    0,   -1,  270,   -1,
  272,  302,   -1,  275,  305,  306,  307,  308,  309,   -1,
   -1,  312,  313,   -1,  315,   -1,  317,   -1,  319,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
  302,   -1,   -1,  305,  306,  307,  308,  309,   -1,   -1,
  312,  313,   -1,  315,   -1,  317,   -1,  319,  256,  257,
   -1,  259,  260,  261,  262,  263,  264,  265,  266,  267,
    0,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  256,
  257,   -1,  259,  260,  261,  262,  263,  264,  265,  266,
  267,    0,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,
   -1,   -1,   -1,   -1,  302,   -1,   -1,  305,  306,  307,
  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,
   -1,  319,   -1,   -1,   -1,  302,   -1,   -1,  305,  306,
  307,  308,  309,   -1,   -1,  312,  313,   -1,  315,   -1,
  317,   -1,  319,  256,  257,   -1,  259,  260,  261,  262,
  263,  264,  265,  266,  267,    0,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,   -1,   -1,   -1,  256,  257,   -1,
  259,  260,  261,  262,  263,  264,  265,  266,  267,    0,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,  302,
   -1,    0,  305,  306,  307,  308,  309,   -1,   -1,  312,
  313,   -1,  315,   -1,  317,   -1,  319,   -1,   -1,    0,
   -1,   -1,   -1,  302,   -1,   -1,   -1,   -1,  307,  308,
  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,
  319,   -1,   -1,  256,  257,   -1,  259,  260,  261,  262,
  263,  264,  265,  266,  267,    0,   -1,  270,   -1,  272,
   -1,   -1,  275,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,    0,  259,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,    0,  272,  302,
   -1,  275,   -1,   -1,   -1,  308,  309,   -1,   -1,  312,
  313,   -1,  315,  256,  317,   -1,  319,  260,  261,  262,
  263,  264,  265,  266,  267,    0,   -1,  270,  302,   -1,
   -1,   -1,   -1,   -1,  308,  309,   -1,   -1,  312,  313,
   -1,  315,   -1,  317,   -1,  319,  256,  257,   -1,  259,
  260,  261,  262,  263,  264,  265,  266,  267,    0,   -1,
  270,   -1,  272,   -1,   -1,  275,  309,  256,   -1,  312,
  259,  260,  261,  262,  263,  264,  265,  266,  267,    0,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,   -1,
   -1,    0,  302,   -1,   -1,   -1,   -1,   -1,  308,  309,
   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,  319,
   -1,   -1,    0,  302,   -1,   -1,   -1,   -1,   -1,  308,
  309,   -1,   -1,  312,  313,   -1,  315,   -1,  317,   -1,
  319,  256,   -1,   -1,   -1,  260,  261,  262,  263,  264,
  265,  266,  267,   -1,   -1,  270,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  282,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,  256,   -1,  270,
   -1,  260,  261,  262,  263,  264,  265,  266,  267,   -1,
   -1,  270,   -1,  308,  309,  256,   -1,  312,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,   -1,   -1,  270,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,
   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  309,  256,   -1,  312,   -1,  260,  261,  262,  263,  264,
  265,  266,  267,   -1,   -1,  270,   -1,   -1,  309,   -1,
  256,  312,   -1,   -1,  260,  261,  262,  263,  264,  265,
  266,  267,   -1,  256,  270,   -1,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,   -1,  270,   -1,   -1,
   -1,   -1,   -1,   -1,  309,   -1,   -1,  312,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  260,  261,  262,  263,  264,
  265,  266,  267,  309,   -1,  270,  312,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  309,   -1,   -1,  312,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,   -1,
   -1,   -1,   -1,   -1,  309,  256,   -1,  312,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,  256,   -1,  270,
   -1,  260,  261,  262,  263,  264,  265,  266,  267,   -1,
   -1,  270,   -1,   -1,   -1,   -1,   -1,  309,  256,   -1,
  312,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,   -1,  256,   -1,  258,   -1,  309,   -1,
   -1,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  271,
   -1,  273,  274,  312,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,
   -1,  293,   -1,   -1,  312,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  304,  256,   -1,  258,   -1,   -1,   -1,   -1,
  312,   -1,  314,   -1,  316,   -1,  318,   -1,  271,   -1,
  273,  274,   -1,  276,  277,  278,  279,  280,  281,  282,
   -1,   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,
  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  304,  256,   -1,  258,   -1,   -1,   -1,   -1,  312,
   -1,  314,   -1,  316,   -1,  318,   -1,  271,   -1,  273,
  274,   -1,  276,  277,  278,  279,  280,  281,  282,   -1,
   -1,   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,  293,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  304,  256,   -1,  258,   -1,   -1,   -1,   -1,  312,   -1,
  314,   -1,  316,   -1,  318,   -1,  271,   -1,  273,  274,
   -1,  276,  277,  278,  279,  280,  281,  282,   -1,   -1,
   -1,   -1,  287,   -1,   -1,   -1,   -1,   -1,  293,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,
  256,   -1,  258,   -1,   -1,   -1,   -1,  312,   -1,  314,
   -1,  316,   -1,  318,   -1,  271,   -1,  273,  274,   -1,
  276,  277,  278,  279,  280,  281,  282,   -1,   -1,   -1,
   -1,  287,   -1,   -1,   -1,   -1,   -1,  293,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,
  258,   -1,   -1,   -1,   -1,   -1,  312,   -1,  314,   -1,
  316,   -1,  318,  271,   -1,  273,  274,   -1,  276,  277,
  278,  279,  280,  281,  282,   -1,   -1,   -1,   -1,  287,
   -1,   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  304,   -1,  258,   -1,
  308,   -1,   -1,   -1,  312,   -1,  314,   -1,  316,   -1,
  318,  271,   -1,  273,  274,   -1,  276,  277,  278,  279,
  280,  281,  282,   -1,   -1,   -1,   -1,  287,   -1,   -1,
   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  304,   -1,  258,   -1,  308,   -1,
   -1,   -1,  312,   -1,  314,   -1,  316,   -1,  318,  271,
   -1,  273,  274,   -1,  276,  277,  278,  279,  280,  281,
  282,   -1,   -1,   -1,   -1,  287,   -1,   -1,  259,   -1,
   -1,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  312,   -1,  314,   -1,  316,   -1,  318,  288,  289,  290,
  291,  292,  293,   -1,  272,  296,  297,  298,  299,  300,
  301,   -1,   -1,   -1,  305,  306,  307,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,   -1,  318,  296,  297,
  298,  299,  300,  301,   -1,   -1,   -1,  305,  306,  307,
   -1,   -1,   -1,  288,  289,  290,  291,  292,  293,   -1,
  318,  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,
  305,  306,  307,   -1,   -1,   -1,   -1,  288,  289,  290,
  291,  292,  293,  318,  319,  296,  297,  298,  299,  300,
  301,  302,   -1,   -1,  305,  306,  307,   -1,   -1,   -1,
  288,  289,  290,  291,  292,  293,   -1,  318,  296,  297,
  298,  299,  300,  301,   -1,   -1,   -1,  305,  306,  307,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,   -1,   -1,
  318,  288,  289,  290,  291,  292,  293,   -1,   -1,  296,
  297,  298,  299,  300,  301,   -1,   -1,   -1,  305,  306,
  307,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,   -1,
   -1,  318,  288,  289,  290,  291,  292,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,  305,
  306,  307,   -1,   -1,   -1,   -1,   -1,  313,   -1,   -1,
   -1,   -1,  318,  288,  289,  290,  291,  292,  293,   -1,
   -1,  296,  297,  298,  299,  300,  301,   -1,   -1,   -1,
  305,  306,  307,   -1,   -1,   -1,  288,  289,  290,  291,
  292,  293,   -1,  318,  296,  297,  298,  299,  300,  301,
   -1,   -1,   -1,  305,  306,   -1,   -1,   -1,   -1,  288,
  289,  290,  291,  292,  293,   -1,  318,  296,  297,  298,
  299,  300,  301,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  318,
};
#define YYFINAL 12
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 319
#if YYDEBUG
static const char *yyname[] = {

"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ELSE","IF","THEN","TYPE",
"RANDOM","FIXED","ORIGIN","DISTINCT","QUERY","OBS","PARAM","LIST","MAP",
"DISTRIBUTION","CASE","IN","EXISTS_","FORALL_","FOR","NULLITY","INT_LITERAL",
"DOUBLE_LITERAL","BOOLEAN_LITERAL","CHAR_LITERAL","STRING_LITERAL","ID",
"PARFACTOR","FACTOR","ERROR","ELSEIF","AT_","PLUS_","MULT_","DIV_","MOD_",
"POWER_","MINUS_","UMINUS","LST","LT_","GT_","LEQ_","GEQ_","EQEQ_","NEQ_","EQ_",
"DISTRIB","NOT_","AND_","OR_","DOUBLERIGHTARROW","COMMA","SEMI","COLON","DOT",
"NUMSIGN","RIGHTARROW","LPAREN","RPAREN","LBRACE","RBRACE","LBRACKET",
"RBRACKET",
};
static const char *yyrule[] = {
"$accept : program",
"program : opt_statement_lst",
"opt_statement_lst :",
"opt_statement_lst : statement_lst",
"statement_lst : statement_lst statement SEMI",
"statement_lst : statement SEMI",
"statement_lst : statement_lst statement",
"statement_lst : statement",
"statement : declaration_stmt",
"statement : evidence_stmt",
"statement : query_stmt",
"statement : error",
"declaration_stmt : type_decl",
"declaration_stmt : fixed_func_decl",
"declaration_stmt : rand_func_decl",
"declaration_stmt : origin_func_decl",
"declaration_stmt : number_stmt",
"declaration_stmt : distinct_decl",
"declaration_stmt : parameter_decl",
"declaration_stmt : distribution_decl",
"type_decl : TYPE ID",
"type_decl : TYPE error",
"type : refer_name",
"opt_parenthesized_type_var_lst :",
"opt_parenthesized_type_var_lst : LPAREN RPAREN",
"opt_parenthesized_type_var_lst : LPAREN type_var_lst RPAREN",
"opt_parenthesized_type_var_lst : type_var_lst",
"var_decl : type ID",
"extra_commas : COMMA COMMA",
"extra_commas : extra_commas COMMA",
"type_var_lst : type_var_lst COMMA var_decl",
"type_var_lst : var_decl",
"type_var_lst : type_var_lst extra_commas var_decl",
"type_var_lst : type_var_lst var_decl",
"type_var_lst : type_var_lst COMMA error",
"fixed_func_decl : FIXED type ID opt_parenthesized_type_var_lst EQ_ expression",
"fixed_func_decl : FIXED error",
"rand_func_decl : RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body",
"rand_func_decl : RANDOM error dependency_statement_body",
"rand_func_decl : RANDOM error",
"number_stmt : NUMSIGN refer_name opt_parenthesized_origin_var_list dependency_statement_body",
"number_stmt : NUMSIGN opt_parenthesized_origin_var_list dependency_statement_body",
"number_stmt : NUMSIGN refer_name opt_parenthesized_origin_var_list DISTRIB error",
"number_stmt : NUMSIGN refer_name error",
"number_stmt : NUMSIGN error",
"opt_parenthesized_origin_var_list : LPAREN origin_var_list RPAREN",
"opt_parenthesized_origin_var_list :",
"origin_var_list : origin_var_list COMMA ID EQ_ ID",
"origin_var_list : origin_var_list extra_commas ID EQ_ ID",
"origin_var_list : origin_var_list COMMA ID EQ_ error",
"origin_var_list : origin_var_list ID EQ_ ID",
"origin_var_list : ID EQ_ ID",
"origin_var_list : ID ID",
"origin_func_decl : ORIGIN type ID LPAREN type RPAREN",
"origin_func_decl : ORIGIN type ID LPAREN error RPAREN",
"origin_func_decl : ORIGIN type LPAREN type RPAREN",
"origin_func_decl : ORIGIN type ID type RPAREN",
"origin_func_decl : ORIGIN error",
"distinct_decl : DISTINCT refer_name id_or_subid_list",
"id_or_subid_list : id_or_subid",
"id_or_subid_list : id_or_subid_list COMMA id_or_subid",
"id_or_subid_list : id_or_subid_list id_or_subid",
"id_or_subid_list : id_or_subid_list extra_commas id_or_subid",
"id_or_subid : ID",
"id_or_subid : ID LBRACKET INT_LITERAL RBRACKET",
"distribution_decl : DISTRIBUTION ID EQ_ refer_name LPAREN opt_expression_list RPAREN",
"refer_name : ID",
"refer_name : ID DOT refer_name",
"dependency_statement_body : DISTRIB expression",
"parameter_decl : PARAM type ID",
"parameter_decl : PARAM type ID COLON expression",
"expression : operation_expr",
"expression : literal",
"expression : function_call",
"expression : list_construct_expression",
"expression : map_construct_expression",
"expression : quantified_formula",
"expression : set_expr",
"expression : number_expr",
"expression : if_expr",
"expression : case_expr",
"literal : STRING_LITERAL",
"literal : CHAR_LITERAL",
"literal : INT_LITERAL",
"literal : DOUBLE_LITERAL",
"literal : BOOLEAN_LITERAL",
"literal : NULLITY",
"operation_expr : expression PLUS_ expression",
"operation_expr : expression MINUS_ expression",
"operation_expr : expression MULT_ expression",
"operation_expr : expression DIV_ expression",
"operation_expr : expression MOD_ expression",
"operation_expr : expression POWER_ expression",
"operation_expr : expression LT_ expression",
"operation_expr : expression GT_ expression",
"operation_expr : expression LEQ_ expression",
"operation_expr : expression GEQ_ expression",
"operation_expr : expression EQEQ_ expression",
"operation_expr : expression NEQ_ expression",
"operation_expr : expression AND_ expression",
"operation_expr : expression OR_ expression",
"operation_expr : expression DOUBLERIGHTARROW expression",
"operation_expr : expression LBRACKET expression RBRACKET",
"operation_expr : unary_operation_expr",
"unary_operation_expr : MINUS_ expression",
"unary_operation_expr : NOT_ expression",
"unary_operation_expr : AT_ expression",
"unary_operation_expr : LPAREN expression RPAREN",
"quantified_formula : FORALL_ type ID expression",
"quantified_formula : EXISTS_ type ID expression",
"function_call : refer_name LPAREN opt_expression_list RPAREN",
"function_call : refer_name",
"function_call : refer_name LPAREN error",
"if_expr : IF expression THEN expression ELSE expression",
"if_expr : IF expression THEN expression",
"case_expr : CASE expression IN map_construct_expression",
"opt_expression_list : expression_list",
"opt_expression_list :",
"expression_list : expression_list COMMA expression",
"expression_list : expression_list extra_commas expression",
"expression_list : expression",
"list_construct_expression : LBRACKET opt_expression_list RBRACKET",
"list_construct_expression : LBRACKET semi_colon_separated_expression_list RBRACKET",
"semi_colon_separated_expression_list : expression_list SEMI semi_colon_separated_expression_list",
"semi_colon_separated_expression_list : expression_list SEMI expression_list",
"map_construct_expression : LBRACE expression_pair_list RBRACE",
"expression_pair_list : expression_pair_list COMMA expression RIGHTARROW expression",
"expression_pair_list : expression RIGHTARROW expression",
"number_expr : NUMSIGN set_expr",
"number_expr : NUMSIGN type",
"number_expr : NUMSIGN error",
"set_expr : explicit_set",
"set_expr : tuple_set",
"explicit_set : LBRACE opt_expression_list RBRACE",
"comprehension_expr : expression_list FOR type_var_lst COLON expression",
"comprehension_expr : expression_list FOR type_var_lst",
"tuple_set : LBRACE comprehension_expr RBRACE",
"evidence_stmt : OBS evidence",
"evidence_stmt : OBS error",
"evidence : value_evidence",
"value_evidence : expression EQ_ expression",
"value_evidence : error EQ_ expression",
"value_evidence : expression EQ_ error",
"query_stmt : QUERY expression",
"query_stmt : QUERY error",

};
#endif

int      yydebug;
int      yynerrs;

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#endif
#endif

#define YYINITSTACKSIZE 200

typedef struct {
    unsigned stacksize;
    short    *s_base;
    short    *s_mark;
    short    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
#line 775 "blog.yacc"



void yyerror(const char *s) {
  cout << "Parse error at line number: " << curr_line << " and column number: " << curr_col << "!  Message: " << s << endl;
  // might as well halt now:
  //exit(-1);
}
#line 1093 "parser.cpp"

#if YYDEBUG
#include <stdio.h>		/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (short *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return -1;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return -1;

    data->l_base = newvs;
    data->l_mark = newvs + i;

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab

int
YYPARSE_DECL()
{
    int yym, yyn, yystate;
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack)) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    yystate = 0;
    *yystack.s_mark = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
        {
            goto yyoverflow;
        }
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;

    yyerror("syntax error");

    goto yyerrlab;

yyerrlab:
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yystack.s_mark]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
                {
                    goto yyoverflow;
                }
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    if (yym)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    {
case 4:
#line 210 "blog.yacc"
	{
    if(yystack.l_mark[-1].stmt != NULL){
      blog->add(yystack.l_mark[-1].stmt);
    }
  }
break;
case 5:
#line 215 "blog.yacc"
	{ blog->add(yystack.l_mark[-1].stmt); }
break;
case 6:
#line 217 "blog.yacc"
	{
    yyerror("missing ; after statement");
  }
break;
case 7:
#line 220 "blog.yacc"
	{
    yyerror("missing ; after statement");
  }
break;
case 8:
#line 226 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 9:
#line 227 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 10:
#line 228 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 11:
#line 229 "blog.yacc"
	{
    yyerror("incorrect statement");
  }
break;
case 12:
#line 236 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 13:
#line 237 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].funcdec; }
break;
case 14:
#line 238 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].funcdec; }
break;
case 15:
#line 239 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].origdec; }
break;
case 16:
#line 240 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].numstdec; }
break;
case 17:
#line 241 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].distdec; }
break;
case 18:
#line 242 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 19:
#line 243 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 20:
#line 248 "blog.yacc"
	{ yyval.stmt = new TypDecl(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue())); }
break;
case 21:
#line 250 "blog.yacc"
	{
    yyerror("invalid type declaration");
  }
break;
case 22:
#line 256 "blog.yacc"
	{ yyval.typ = new Ty(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue())); }
break;
case 23:
#line 260 "blog.yacc"
	{ yyval.varlist = NULL; }
break;
case 24:
#line 261 "blog.yacc"
	{yyval.varlist = NULL; }
break;
case 25:
#line 262 "blog.yacc"
	{ yyval.varlist = yystack.l_mark[-1].varlist; }
break;
case 26:
#line 263 "blog.yacc"
	{
    yyerror("missing parentheses");
  }
break;
case 27:
#line 269 "blog.yacc"
	{ 
    yyval.vardec = new VarDecl(curr_line, curr_col, *yystack.l_mark[-1].typ, Symbol(yystack.l_mark[0].sval->getValue())); 
  }
break;
case 30:
#line 279 "blog.yacc"
	{ 
      yyval.varlist = yystack.l_mark[-2].varlist; 
      yyval.varlist->push_back(*yystack.l_mark[0].vardec);
      delete(yystack.l_mark[0].vardec);
    }
break;
case 31:
#line 284 "blog.yacc"
	{ 
      yyval.varlist = new vector<VarDecl>();
      yyval.varlist->push_back(*yystack.l_mark[0].vardec);
      delete(yystack.l_mark[0].vardec);
    }
break;
case 32:
#line 289 "blog.yacc"
	{
    yyerror("extra commas in type variable list");
  }
break;
case 33:
#line 292 "blog.yacc"
	{
    yyerror("missing commas");
  }
break;
case 34:
#line 296 "blog.yacc"
	{
    yyerror("incorrect variable declaration");
  }
break;
case 35:
#line 303 "blog.yacc"
	{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, false, *(yystack.l_mark[-4].typ), Symbol(yystack.l_mark[-3].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-2].varlist != NULL){
        for(size_t i = 0; i < yystack.l_mark[-2].varlist->size(); i++){
          yyval.funcdec->addArg((*yystack.l_mark[-2].varlist)[i]);
        }
        delete(yystack.l_mark[-2].varlist);
      }
    }
break;
case 36:
#line 313 "blog.yacc"
	{
    yyerror("error in fixed function declaration");
  }
break;
case 37:
#line 320 "blog.yacc"
	{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, true, *(yystack.l_mark[-3].typ), Symbol(yystack.l_mark[-2].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-1].varlist != NULL){
        for(size_t i = 0; i < yystack.l_mark[-1].varlist->size(); i++){
          yyval.funcdec->addArg((*yystack.l_mark[-1].varlist)[i]);
        }
        delete(yystack.l_mark[-1].varlist);
      }
    }
break;
case 38:
#line 330 "blog.yacc"
	{
      yyerror("incorrect function header, return type, or function name");
    }
break;
case 39:
#line 334 "blog.yacc"
	{
      yyerror("error in random function declaration");
    }
break;
case 40:
#line 341 "blog.yacc"
	{
      yyval.numstdec = new NumStDecl(curr_line, curr_col, Symbol(yystack.l_mark[-2].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-1].varlst != NULL){
        for(size_t i = 0; i < yystack.l_mark[-1].varlst->size(); i++){
          yyval.numstdec->add(get<0>((*yystack.l_mark[-1].varlst)[i]), get<1>((*yystack.l_mark[-1].varlst)[i]));
        }
        delete(yystack.l_mark[-1].varlst);
      }
      /*$$->add(Symbol($4->getValue()), Symbol($6->getValue()));*/
    }
break;
case 41:
#line 352 "blog.yacc"
	{
    yyerror("missing type name in number statement");
  }
break;
case 42:
#line 356 "blog.yacc"
	{
    yyerror("missing body in number statement");
  }
break;
case 43:
#line 360 "blog.yacc"
	{
    yyerror("missing body in number statement");
  }
break;
case 44:
#line 364 "blog.yacc"
	{
    yyerror("error in number statement");
  }
break;
case 45:
#line 370 "blog.yacc"
	{yyval.varlst = yystack.l_mark[-1].varlst; }
break;
case 46:
#line 371 "blog.yacc"
	{yyval.varlst = NULL; }
break;
case 47:
#line 376 "blog.yacc"
	{
    yyval.varlst = yystack.l_mark[-4].varlst;
    yyval.varlst->push_back(make_tuple(Symbol(yystack.l_mark[-2].sval->getValue()), Symbol(yystack.l_mark[0].sval->getValue())));
  }
break;
case 48:
#line 381 "blog.yacc"
	{
    yyerror("extra commas");
  }
break;
case 49:
#line 385 "blog.yacc"
	{
    yyerror("missing origin variable name");
  }
break;
case 50:
#line 389 "blog.yacc"
	{
    yyerror("missing comma");
  }
break;
case 51:
#line 393 "blog.yacc"
	{ 
    yyval.varlst = new vector<tuple<Symbol, Symbol>>();
    yyval.varlst->push_back(make_tuple(Symbol(yystack.l_mark[-2].sval->getValue()), Symbol(yystack.l_mark[0].sval->getValue())));
  }
break;
case 52:
#line 398 "blog.yacc"
	{
    yyerror("missing =");
  }
break;
case 53:
#line 405 "blog.yacc"
	{ yyval.origdec = new OriginDecl(curr_line, curr_col, yystack.l_mark[-4].typ->getTyp(), Symbol(yystack.l_mark[-3].sval->getValue()), yystack.l_mark[-1].typ->getTyp());  }
break;
case 54:
#line 407 "blog.yacc"
	{ yyerror("syntax error in type argument of origin function"); }
break;
case 55:
#line 409 "blog.yacc"
	{
    yyerror("missing type or origin function name");
  }
break;
case 56:
#line 413 "blog.yacc"
	{
    yyerror("missing ( in origin function");
  }
break;
case 57:
#line 417 "blog.yacc"
	{
    yyerror("error in origin function definition");
  }
break;
case 58:
#line 424 "blog.yacc"
	{
      yyval.distdec = new DistinctDecl(curr_line, curr_col, Symbol(yystack.l_mark[-1].sval->getValue()));
      if (yystack.l_mark[0].symbintvect != NULL){
        for(size_t i = 0; i < yystack.l_mark[0].symbintvect->size(); i++){
          yyval.distdec->add(get<0>((*yystack.l_mark[0].symbintvect)[i]), get<1>((*yystack.l_mark[0].symbintvect)[i]));
        }
        delete(yystack.l_mark[0].symbintvect);
      }
    }
break;
case 59:
#line 437 "blog.yacc"
	{
      yyval.symbintvect = new vector<tuple<string, int>>();
      yyval.symbintvect->push_back(*yystack.l_mark[0].symbintpair);
      delete(yystack.l_mark[0].symbintpair);
    }
break;
case 60:
#line 443 "blog.yacc"
	{
      yyval.symbintvect = yystack.l_mark[-2].symbintvect;
      yyval.symbintvect->push_back(*yystack.l_mark[0].symbintpair);
      delete(yystack.l_mark[0].symbintpair);
    }
break;
case 61:
#line 449 "blog.yacc"
	{
      yyerror("missing comma");
    }
break;
case 62:
#line 453 "blog.yacc"
	{
      yyerror("missing comma");
    }
break;
case 63:
#line 461 "blog.yacc"
	{ 
        /*tuple<string, int> idint = make_tuple($1->getValue(), 1);*/
        yyval.symbintpair = new tuple<string, int>(yystack.l_mark[0].sval->getValue(), 1);
       }
break;
case 64:
#line 466 "blog.yacc"
	{ 
      /*tuple<string, int> idint2 = make_tuple($1->getValue(), $3->getValue());*/
      yyval.symbintpair = new tuple<string, int>(yystack.l_mark[-3].sval->getValue(), yystack.l_mark[-1].ival->getValue());
    }
break;
case 65:
#line 475 "blog.yacc"
	{ }
break;
case 66:
#line 479 "blog.yacc"
	{ 
      yyval.sval = new BLOGSymbol<string>(curr_line, curr_col, yystack.l_mark[0].sval->getValue());
    }
break;
case 67:
#line 482 "blog.yacc"
	{
      yyval.sval = new BLOGSymbol<string>(curr_line, curr_col, yystack.l_mark[-2].sval->getValue() + "." + yystack.l_mark[0].sval->getValue());
    }
break;
case 68:
#line 489 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 69:
#line 495 "blog.yacc"
	{ }
break;
case 70:
#line 496 "blog.yacc"
	{ }
break;
case 71:
#line 500 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 72:
#line 501 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 73:
#line 502 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 74:
#line 503 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 75:
#line 504 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].mapexp;}
break;
case 76:
#line 505 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 77:
#line 506 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].setexp; }
break;
case 78:
#line 507 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].cardexp; }
break;
case 79:
#line 508 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 80:
#line 509 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 81:
#line 514 "blog.yacc"
	{yyval.exp = new StringLiteral(curr_line, curr_col, yystack.l_mark[0].sval->getValue()); }
break;
case 82:
#line 516 "blog.yacc"
	{string charstr(1, yystack.l_mark[0].chrval->getValue()); yyval.exp = new StringLiteral(curr_line, curr_col, charstr); }
break;
case 83:
#line 518 "blog.yacc"
	{yyval.exp = new IntLiteral(curr_line, curr_col, yystack.l_mark[0].ival->getValue()); }
break;
case 84:
#line 520 "blog.yacc"
	{yyval.exp = new DoubleLiteral(curr_line, curr_col, yystack.l_mark[0].dblval->getValue()); }
break;
case 85:
#line 522 "blog.yacc"
	{yyval.exp = new BoolLiteral(curr_line, curr_col, yystack.l_mark[0].boolval->getValue()); }
break;
case 86:
#line 524 "blog.yacc"
	{yyval.exp = new NullLiteral(curr_line, curr_col); }
break;
case 87:
#line 529 "blog.yacc"
	{ 
      yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::PLUS, yystack.l_mark[-2].exp, yystack.l_mark[0].exp);   
    }
break;
case 88:
#line 533 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MINUS, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 89:
#line 535 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MUL, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 90:
#line 537 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::DIV, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 91:
#line 539 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MOD, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 92:
#line 541 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::POWER, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 93:
#line 543 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::LT, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 94:
#line 545 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::GT, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 95:
#line 547 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::LE, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 96:
#line 549 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::GE, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 97:
#line 551 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::EQ, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 98:
#line 553 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::NEQ, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 99:
#line 555 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::AND, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 100:
#line 557 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::OR, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 101:
#line 559 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::IMPLY, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 102:
#line 561 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::SUB, yystack.l_mark[-3].exp, yystack.l_mark[-1].exp); }
break;
case 103:
#line 562 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 104:
#line 567 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MINUS, new IntLiteral(curr_line, curr_col, 0), yystack.l_mark[0].exp); }
break;
case 105:
#line 569 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::NOT, NULL, yystack.l_mark[0].exp); }
break;
case 106:
#line 571 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::AT, NULL, yystack.l_mark[0].exp); }
break;
case 107:
#line 572 "blog.yacc"
	{yyval.exp = yystack.l_mark[-1].exp; }
break;
case 108:
#line 577 "blog.yacc"
	{yyval.exp = new QuantExpr(curr_line, curr_col, AbsynConstant::FORALL, *(new VarDecl(curr_line, curr_col, *yystack.l_mark[-2].typ, Symbol(yystack.l_mark[-1].sval->getValue()))), yystack.l_mark[0].exp); }
break;
case 109:
#line 579 "blog.yacc"
	{yyval.exp = new QuantExpr(curr_line, curr_col, AbsynConstant::EXISTS, *(new VarDecl(curr_line, curr_col, *yystack.l_mark[-2].typ, Symbol(yystack.l_mark[-1].sval->getValue()))), yystack.l_mark[0].exp); }
break;
case 110:
#line 584 "blog.yacc"
	{ 
    yyval.exp = new FuncApp(curr_line, curr_col, Symbol(yystack.l_mark[-3].sval->getValue())); 
    if (yystack.l_mark[-1].explst != NULL){
      for(size_t i = 0; i < yystack.l_mark[-1].explst->size(); i++){
        yyval.exp->add((*yystack.l_mark[-1].explst)[i]);
      }
      delete(yystack.l_mark[-1].explst);
    }
  }
break;
case 111:
#line 594 "blog.yacc"
	{
    yyval.exp = new FuncApp(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue()));
  }
break;
case 112:
#line 598 "blog.yacc"
	{
    yyerror("error in body of function call");
  }
break;
case 113:
#line 605 "blog.yacc"
	{ yyval.exp = new IfExpr(curr_line, curr_col, yystack.l_mark[-4].exp, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 114:
#line 607 "blog.yacc"
	{ yyval.exp = new IfExpr(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 115:
#line 612 "blog.yacc"
	{
    if (yystack.l_mark[-2].exp != NULL && yystack.l_mark[0].mapexp != NULL){
      yyval.exp = new CaseExpr(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].mapexp);
    }
    else{
      yyerror("error in case expression");
    }
  }
break;
case 116:
#line 623 "blog.yacc"
	{yyval.explst = yystack.l_mark[0].explst;}
break;
case 117:
#line 624 "blog.yacc"
	{yyval.explst = NULL; }
break;
case 118:
#line 629 "blog.yacc"
	{ yyval.explst = yystack.l_mark[-2].explst;
      yyval.explst->push_back(yystack.l_mark[0].exp);
    }
break;
case 119:
#line 633 "blog.yacc"
	{
    yyerror("extra commas in expression list");
  }
break;
case 120:
#line 637 "blog.yacc"
	{ 
      yyval.explst = new vector<Expr*>();
      yyval.explst->push_back(yystack.l_mark[0].exp);
    }
break;
case 121:
#line 645 "blog.yacc"
	{ }
break;
case 122:
#line 646 "blog.yacc"
	{ }
break;
case 123:
#line 651 "blog.yacc"
	{ }
break;
case 124:
#line 652 "blog.yacc"
	{ }
break;
case 125:
#line 656 "blog.yacc"
	{ 
    /*$$ = $2; */
    yyval.mapexp = new MapExpr(curr_line, curr_col);
    for (size_t i = 0; i < yystack.l_mark[-1].exptuplst->size(); i++){
      yyval.mapexp->addMap(get<0>((*yystack.l_mark[-1].exptuplst)[i]), get<1>((*yystack.l_mark[-1].exptuplst)[i]));
    }
    delete(yystack.l_mark[-1].exptuplst);
    
  }
break;
case 126:
#line 669 "blog.yacc"
	{ 
      yyval.exptuplst = yystack.l_mark[-4].exptuplst;
      yyval.exptuplst->push_back(make_tuple(yystack.l_mark[-2].exp, yystack.l_mark[0].exp));
    }
break;
case 127:
#line 674 "blog.yacc"
	{ 
      yyval.exptuplst = new vector<tuple<Expr*, Expr*>>();
      yyval.exptuplst->push_back(make_tuple(yystack.l_mark[-2].exp, yystack.l_mark[0].exp));
    }
break;
case 128:
#line 682 "blog.yacc"
	{ yyval.cardexp = new CardinalityExpr(curr_line, curr_col, (Expr*)yystack.l_mark[0].setexp); }
break;
case 129:
#line 684 "blog.yacc"
	{ 
      VarDecl var(curr_line, curr_col, *yystack.l_mark[0].typ);
      yyval.cardexp = new CardinalityExpr(curr_line, curr_col, new CondSet(curr_line, curr_col, var));
  }
break;
case 130:
#line 689 "blog.yacc"
	{
    yyerror("expecting number expression here.");
  }
break;
case 131:
#line 696 "blog.yacc"
	{yyval.setexp = yystack.l_mark[0].setexp; }
break;
case 132:
#line 697 "blog.yacc"
	{yyval.setexp = yystack.l_mark[0].setexp; }
break;
case 133:
#line 702 "blog.yacc"
	{
      yyval.setexp = new ListSet(curr_line, curr_col);
      for(size_t i = 0; i < yystack.l_mark[-1].explst->size(); i++){
        yyval.setexp->add((*yystack.l_mark[-1].explst)[i]);
      }
      delete(yystack.l_mark[-1].explst);
    }
break;
case 134:
#line 713 "blog.yacc"
	{
      yyval.compexp[0] = yystack.l_mark[-4].explst; yyval.compexp[1] = yystack.l_mark[-2].varlist; yyval.compexp[2] = yystack.l_mark[0].exp;
    }
break;
case 135:
#line 717 "blog.yacc"
	{
      yyval.compexp[0] = yystack.l_mark[-2].explst; yyval.compexp[1] = yystack.l_mark[0].varlist; yyval.compexp[2] = NULL;
    }
break;
case 136:
#line 726 "blog.yacc"
	{ 
    if (yystack.l_mark[-1].compexp != NULL){
      yyval.setexp = new TupleSetExpr(curr_line, curr_col, *((vector<Expr*>*)yystack.l_mark[-1].compexp[0]), *((vector<VarDecl>*)yystack.l_mark[-1].compexp[1]), (Expr*)yystack.l_mark[-1].compexp[2]); 
      delete((vector<Expr*>*)yystack.l_mark[-1].compexp[0]);
      delete((vector<VarDecl>*)yystack.l_mark[-1].compexp[1]);
    }
    else{
      yyerror("invalid tupleset");
    }
  }
break;
case 137:
#line 739 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 138:
#line 741 "blog.yacc"
	{
    yyerror("incorrect obs statement");
  }
break;
case 139:
#line 747 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 140:
#line 752 "blog.yacc"
	{
    yyval.stmt = new Evidence(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); 
  }
break;
case 141:
#line 756 "blog.yacc"
	{
    yyerror("incorrect lefthand expression in evidence");
  }
break;
case 142:
#line 760 "blog.yacc"
	{
    yyerror("incorrect righthand expression in evidence");
  }
break;
case 143:
#line 767 "blog.yacc"
	{ yyval.stmt = new Query(curr_line, curr_col, yystack.l_mark[0].exp); }
break;
case 144:
#line 769 "blog.yacc"
	{
    yyerror("invalid query");
  }
break;
#line 2050 "parser.cpp"
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
        {
            if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
    {
        goto yyoverflow;
    }
    *++yystack.s_mark = (short) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;

yyoverflow:
    yyerror("yacc stack overflow");

yyabort:
    yyfreestack(&yystack);
    return (1);

yyaccept:
    yyfreestack(&yystack);
    return (0);
}

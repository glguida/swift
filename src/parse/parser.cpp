#ifndef lint
static const char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif

#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define YYPATCH 20130925

#define YYEMPTY        (-1)
#define yyclearin      (yychar = YYEMPTY)
#define yyerrok        (yyerrflag = 0)
#define YYRECOVERING() (yyerrflag != 0)

#define YYPREFIX "yy"

#define YYPURE 0

#line 2 "blog.yacc"
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>
#include <tuple>
#include "BLOGSymbol.h"
#include "../absyn/Absyn.h"
#include "../absyn/ArrayExpr.h"
#include "../absyn/BoolLiteral.h"
#include "../absyn/BlogProgram.h"
#include "../absyn/CardinalityExpr.h"
#include "../absyn/CondSet.h"
#include "../absyn/Decl.h"
#include "../absyn/DistinctDecl.h"
#include "../absyn/DistrExpr.h"
#include "../absyn/DoubleLiteral.h"
#include "../absyn/Evidence.h"
#include "../absyn/Expr.h"
#include "../absyn/FuncApp.h"
#include "../absyn/FuncDecl.h"
#include "../absyn/IfExpr.h"
#include "../absyn/IntLiteral.h"
#include "../absyn/Literal.h"
#include "../absyn/ListSet.h"
#include "../absyn/MapExpr.h"
#include "../absyn/NullLiteral.h"
#include "../absyn/NumStDecl.h"
#include "../absyn/OpExpr.h"
#include "../absyn/OriginDecl.h"
#include "../absyn/QuantExpr.h"
#include "../absyn/Query.h"
#include "../absyn/SetExpr.h"
#include "../absyn/Stmt.h"
#include "../absyn/StringLiteral.h"
#include "../absyn/Symbol.h"
#include "../absyn/TimeStampLiteral.h"
#include "../absyn/Ty.h"
#include "../absyn/TypDecl.h"
#include "../absyn/VarDecl.h"
#include "../absyn/VarRef.h"
#include "../absyn/CaseExpr.h"
#include "../absyn/TupleSetExpr.h"
using namespace std;
using namespace swift::absyn;

/* stuff from flex that bison needs to know about: */
extern "C" int yylex();
extern "C" int yyparse();
extern "C" FILE *yyin;
extern "C" int yylineno;
extern "C" int curr_line;
extern "C" int curr_col;

void yyerror(const char *s);
BlogProgram *blog;

BlogProgram* parse(const char* inp) {
  blog = new BlogProgram(0, 0);
  /* open a file handle to a particular file:*/
  FILE *myfile = fopen(inp, "r");
  /* make sure it is valid:*/
  if (!myfile) {
    cout << "I can't open " << inp << endl;
    exit(0);
    /*return -1;*/
  }
  /* set flex to read from it instead of defaulting to STDIN:*/
  yyin = myfile;
  /* parse through the input until there is no more:*/
  do {
    yyparse();
  } while (!feof(yyin));
  return blog;  
}
#line 79 "blog.yacc"
#ifdef YYSTYPE
#undef  YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
#endif
#ifndef YYSTYPE_IS_DECLARED
#define YYSTYPE_IS_DECLARED 1
typedef union {
  int i;
  class BLOGSymbol<int>* ival;
  class BLOGSymbol<double>* dblval;
  class BLOGSymbol<char>* chrval;
  class BLOGSymbol<bool>* boolval;
  class BLOGSymbol<string>* sval;
  vector<tuple<string,int>>* symbintvect;
  tuple<string,int>* symbintpair;
  class Absyn* ast;
  class ArrayExpr* arrayexp;
  class BoolLiteral* boollit;
  class BlogProgram* bprog;
  class CardinalityExpr* cardexp;
  class CondSet* cset;
  class Decl* dec;
  class DistinctDecl* distdec;
  class DistrExpr* distrexp;
  class DoubleLiteral* doublelit;
  class Evidence* evid;
  class Expr* exp;
  class FuncApp* fapp;
  class FuncDecl* funcdec;
  class IfExpr* ifexp;
  class IntLiteral* intlit;
  class Literal* lit;
  class ListSet* lset;
  class MapExpr* mapexp;
  class NullLiteral* nullit;
  class NumStDecl* numstdec;
  class OpExpr* opexp;
  class OriginDecl* origdec;
  class QuantExpr* quantexp;
  class Query* query;
  class SetExpr* setexp;
  class Stmt* stmt;
  class StringLiteral* stringlit;
  class Symbol* symb;
  class Ty* typ;
  class TypDecl* typdec;
  class VarDecl* vardec;
  class VarRef* varref;
  void *compexp[3];
  void *pair[2];
  vector<VarDecl>* varlist;
  vector<tuple<Expr*, Expr*>>* exptuplst;
  vector<Expr*>* explst;
  vector<tuple<Symbol, Symbol>>* varlst;
} YYSTYPE;
#endif /* !YYSTYPE_IS_DECLARED */
#line 152 "parser.cpp"

/* compatibility with bison */
#ifdef YYPARSE_PARAM
/* compatibility with FreeBSD */
# ifdef YYPARSE_PARAM_TYPE
#  define YYPARSE_DECL() yyparse(YYPARSE_PARAM_TYPE YYPARSE_PARAM)
# else
#  define YYPARSE_DECL() yyparse(void *YYPARSE_PARAM)
# endif
#else
# define YYPARSE_DECL() yyparse(void)
#endif

/* Parameters sent to lex. */
#ifdef YYLEX_PARAM
# define YYLEX_DECL() yylex(void *YYLEX_PARAM)
# define YYLEX yylex(YYLEX_PARAM)
#else
# define YYLEX_DECL() yylex(void)
# define YYLEX yylex()
#endif

/* Parameters sent to yyerror. */
#ifndef YYERROR_DECL
#define YYERROR_DECL() yyerror(const char *s)
#endif
#ifndef YYERROR_CALL
#define YYERROR_CALL(msg) yyerror(msg)
#endif

extern int YYPARSE_DECL();

#define ELSE 257
#define IF 258
#define THEN 259
#define TYPE 260
#define RANDOM 261
#define FIXED 262
#define ORIGIN 263
#define DISTINCT 264
#define QUERY 265
#define OBS 266
#define PARAM 267
#define LIST 268
#define MAP 269
#define DISTRIBUTION 270
#define EXTERN 271
#define CASE 272
#define IN 273
#define EXISTS_ 274
#define FORALL_ 275
#define FOR 276
#define NULLITY 277
#define INT_LITERAL 278
#define DOUBLE_LITERAL 279
#define BOOLEAN_LITERAL 280
#define CHAR_LITERAL 281
#define STRING_LITERAL 282
#define ID 283
#define PARFACTOR 284
#define FACTOR 285
#define ERROR 286
#define ELSEIF 287
#define AT_ 288
#define PLUS_ 289
#define MULT_ 290
#define DIV_ 291
#define MOD_ 292
#define POWER_ 293
#define MINUS_ 294
#define UMINUS 295
#define LST 296
#define LT_ 297
#define GT_ 298
#define LEQ_ 299
#define GEQ_ 300
#define EQEQ_ 301
#define NEQ_ 302
#define EQ_ 303
#define DISTRIB 304
#define NOT_ 305
#define AND_ 306
#define OR_ 307
#define DOUBLERIGHTARROW 308
#define COMMA 309
#define SEMI 310
#define COLON 311
#define DOT 312
#define NUMSIGN 313
#define RIGHTARROW 314
#define LPAREN 315
#define RPAREN 316
#define LBRACE 317
#define RBRACE 318
#define LBRACKET 319
#define RBRACKET 320
#define YYERRCODE 256
static const short yylhs[] = {                           -1,
    0,   47,   47,   48,   48,   48,   48,    1,    1,    1,
    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    3,    3,   36,   36,   46,   37,   37,   39,   39,   39,
   39,   44,   49,   49,   50,   50,   38,   38,   38,   38,
   38,   10,   10,   12,   12,   11,   11,   11,    8,    8,
    8,    8,    8,   40,   40,   41,   41,   41,   41,   41,
   41,    9,    9,    9,    9,    9,   13,   43,   43,   43,
   43,   42,   42,    4,   45,   45,   28,    5,    5,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   16,   17,
   17,   17,   17,   17,   17,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   19,   19,   19,   19,   20,   20,   21,   21,
   21,   23,   23,   24,   33,   33,   34,   34,   34,   22,
   22,   32,   32,   32,   27,   35,   35,   26,   26,   26,
   29,   29,   30,   25,   25,   31,    6,    6,    6,    6,
    6,    6,   14,   15,   15,   15,    7,    7,
};
static const short yylen[] = {                            2,
    1,    0,    1,    3,    2,    2,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    2,    1,    1,    2,    2,    3,    0,    2,    3,
    1,    2,    2,    2,    2,    2,    3,    1,    3,    2,
    3,    6,    2,    4,    2,    5,    3,    2,    4,    3,
    5,    3,    2,    3,    0,    5,    5,    5,    4,    3,
    2,    6,    6,    5,    5,    2,    3,    1,    3,    2,
    3,    1,    4,    7,    1,    3,    2,    3,    5,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    4,    1,    2,    2,    2,    3,    4,    4,    4,    1,
    3,    6,    4,    4,    1,    0,    3,    3,    1,    3,
    3,    3,    3,    3,    3,    5,    3,    2,    2,    2,
    1,    1,    3,    5,    3,    3,    2,    4,    6,    4,
    6,    2,    1,    3,    3,    3,    2,    2,
};
static const short yydefred[] = {                         0,
   11,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    8,   12,   20,   19,    9,   10,
   17,   16,   13,   14,   15,   18,    1,    0,   22,   21,
    0,    0,    0,    0,    0,    0,   43,    0,   66,    0,
    0,  158,    0,    0,    0,    0,   95,   92,   93,   94,
   91,   90,    0,    0,    0,    0,    0,    0,    0,    0,
   81,   80,  112,   85,   82,   83,   88,   89,   87,   84,
   86,  141,  142,    0,    0,    0,  153,    0,    0,    0,
   45,    0,   53,    0,    0,    0,    5,    0,    0,   47,
    0,    0,    0,   25,   26,    0,    0,    0,    0,   68,
    0,    0,    0,    0,    0,    0,    0,    0,  140,    0,
  138,  139,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   50,   52,
    0,    4,    0,   76,    0,    0,    0,    0,   38,   27,
    0,    0,    0,    0,    0,    0,   70,    0,    0,    0,
    0,    0,  116,    0,  146,  143,    0,    0,    0,    0,
  135,  131,  130,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  121,    0,    0,    0,    0,    0,  156,    0,    0,
    0,   44,   61,    0,    0,    0,   54,    0,    0,   49,
   29,    0,   32,    0,   40,    0,   46,    0,    0,    0,
   65,   64,    0,   33,   69,   34,   71,    0,    0,  124,
    0,    0,    0,    0,    0,    0,    0,   35,  132,    0,
   36,  133,    0,  111,  119,    0,    0,    0,    0,   60,
    0,    0,    0,   51,   30,   41,   37,   39,    0,   63,
   62,   73,    0,    0,    0,    0,    0,    0,    0,   59,
    0,    0,    0,    0,    0,   74,   58,   56,   57,
};
static const short yydgoto[] = {                         13,
   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,   26,   76,   77,  119,   61,   62,   63,   64,
   65,   66,   67,   68,  115,   69,   70,   90,   71,   72,
   73,  120,  116,  117,  118,  156,   34,  157,  158,   85,
  148,  100,  101,  159,   74,   36,   27,   28,  179,  185,
};
static const short yysindex[] = {                       826,
    0, -213, -167, -137, -114, -249,  -93, 1896, -249, -246,
 -113, -237,    0, -224,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  826,    0,    0,
 -210, -206, -165, -166, -161, -158,    0, -112,    0, -251,
 -103,    0, 2265, 2265, -249, -249,    0,    0,    0,    0,
    0,    0, 2265, 2265, 2265, -243, 2265, 2265, 2265, 2459,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -156, -129, -110,    0, 2343,  -92, -104,
    0,  -91,    0,  -73, -210, -239,    0, -102, 2265,    0,
 -249, -242, -109,    0,    0, -242, -198, -249,  -84,    0,
 -149, 1963, 2296,  -70,  -56,  -83,  -83,  -83,    0, 2265,
    0,    0, 2366, 2397,  -69,  -68, -248, -283, 2459,  -67,
  -66, -280, 2265, 2265, 2265, 2265, 2265, 2265, 2265, 2265,
 2265, 2265, 2265, 2265, 2265, 2265, 2265, 2265, 2017, -249,
 2265, -249, 2073,  -55, -249, -242, -256, -244,    0,    0,
  -99,    0, 2459,    0, -247,  -38, -116, -210,    0,    0,
  -51, -108,  -65,  -61,   -8, -115,    0, -111, 2265,  -44,
 2265, 2265,    0, 2265,    0,    0, -249, 2137, 2183, 2265,
    0,    0,    0, 2201, 2247, -155,  -83,  -83,  -83,  -83,
 -155,  -75,  -75,  -75,  -75,  -75,  -75, 1927, 1927, 2482,
 2319,    0,  -41,  -33, -259, 2459, -159,    0, 2459, 2265,
  -37,    0,    0,   -4,  -23, -106,    0, -100, 2119,    0,
    0, -176,    0, -225,    0,  -81,    0, 2265,  -35,  -34,
    0,    0,  -32,    0,    0,    0,    0,  -60, 2265,    0,
 2459, 2459, 2459, -154, 2459, 2459, 2428,    0,    0, -280,
    0,    0, -280,    0,    0, 2265, 2265, 2459, 2265,    0,
    2,  -20,  -17,    0,    0,    0,    0,    0, 2459,    0,
    0,    0, 2265, 2397, 2265, 2265, 2459, 2459,  -29,    0,
 -105,    6, 2459, 2459, 2459,    0,    0,    0,    0,
};
static const short yyrindex[] = {                       296,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   -7,    0, 1846,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  306,    0,    0,
 1510,    1,    0,   66,  131,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   -6,   -2, 1527,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  196, 1540, 1598,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   -7,    0, 1867,    0,    0,
    0,    9,    0,    0,    0,   21,    0,    0, 1388,    0,
 1610,    0,    0,    0,    0,  269,  334,  399,    0,   -6,
    0,    0,    0, -255,    0,    0,   17,    0, -217,    0,
    0,   18,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   24,    0,
    0,    0,    0, 1623,    0, 1681,    0,    0,    0,    0,
    0,    0, 1693,    0,    0,    0, 1443,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  732,  464,  537,  602,  667,
  805,  870,  888,  953,  971, 1036, 1054, 1120, 1138, 1203,
    0,    0,    0,   25, 1712, 1455, 1749,    0, 1472,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1369,    0,    0,
 1221, 1286, -267,   26, -205, -188,    0,    0,    0,   23,
    0,    0,    0,    0,    0,    0,    0, 1767,   24,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1779,    0,
    0,    0,    0,    0,    0,    0, 1808, 1834,    0,    0,
    0,    0, 1304,   27, -195,    0,    0,    0,    0,
};
static const short yygindex[] = {                         0,
  318,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 2107,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  177,  -76,  292,    0,
    0, -136,  -52,  -59,    0,   11,    0, -117,  -78,  264,
    0,  -89,    0, -124,   -1,    0,    0,    0,  -95,    0,
};
#define YYTABLESIZE 2801
static const short yytable[] = {                        122,
   75,   35,   35,   35,   41,  168,  121,   35,  149,   35,
   86,  167,  109,   33,   38,   40,  150,  161,   83,   79,
  129,   82,  205,   32,  207,  180,  213,  177,  178,  184,
  266,   97,  225,   32,  181,   32,   80,  222,  215,   32,
   32,  137,   29,   35,   35,   32,  214,  249,  252,  224,
  137,  256,  218,  129,   35,  104,  105,   32,  129,  244,
  178,  226,  129,   98,  216,   24,  112,  212,  221,   30,
  127,  217,  155,  110,  220,   84,  235,   84,  237,  204,
  225,  227,  225,  234,   32,   87,  203,  128,   31,  154,
   35,  129,  129,   89,   35,   35,   35,  225,  129,  267,
  129,  268,  129,  127,  127,   91,   32,  163,  164,  226,
  127,  226,  127,  136,  127,   32,  162,   92,   37,  225,
  128,  128,  136,   32,  250,  253,  226,  128,   32,  128,
   23,  128,  224,   99,  124,  125,  126,  127,   35,  265,
   35,   39,   81,  211,   35,   32,  140,  229,  226,  224,
  287,  257,   93,   35,  224,   35,  275,   94,  139,  166,
   35,   95,   42,  138,   43,  142,   32,   99,   32,   32,
   96,   99,  230,  141,   32,   35,  262,  288,   44,   99,
   45,   46,  263,   47,   48,   49,   50,   51,   52,   32,
  144,  146,  224,  234,   53,  120,  273,  236,  145,  204,
   54,   32,  234,   35,  219,   35,  279,  152,  236,  147,
  160,   55,  171,  123,  124,  125,  126,  127,  128,   56,
   35,   57,   35,   58,   35,   59,  172,  236,  123,  124,
  125,  126,  127,  128,  165,  138,  129,  130,  131,  132,
  133,  134,   35,  138,  223,  135,  136,  137,  175,  176,
  231,  228,  182,  183,  232,  210,   75,   75,  138,   75,
   75,   75,   75,   75,   75,   75,   75,   75,  115,  233,
   75,   75,  239,   75,  255,  178,   75,  259,  260,  261,
  270,  271,  281,   75,  280,  282,  286,  272,  289,   75,
   75,   75,   75,   75,   75,    2,   55,   75,   75,   75,
   75,   75,   75,   75,   75,    3,   75,   75,   75,   75,
   75,  126,   28,   75,   75,   75,   75,  126,   75,   75,
   75,   24,   24,   28,   24,   24,   24,   24,   24,   24,
   24,   24,   24,  113,  125,   24,   24,  125,   24,  126,
  125,   24,  134,  145,  144,   88,  240,  111,   24,  151,
    0,    0,    0,    0,   24,   24,   24,   24,   24,   24,
    0,    0,   24,   24,   24,   24,   24,   24,   24,    0,
    0,   24,   24,   24,   24,   24,    0,    0,   24,   24,
   24,   24,    0,   24,    0,   24,   23,   23,    0,   23,
   23,   23,   23,   23,   23,   23,   23,   23,  114,    0,
   23,   23,    0,   23,    0,    0,   23,    0,    0,    0,
    0,    0,    0,   23,    0,    0,    0,    0,    0,   23,
   23,   23,   23,   23,   23,    0,    0,   23,   23,   23,
   23,   23,   23,   23,    0,    0,   23,   23,   23,   23,
   23,    0,    0,   23,   23,   23,   23,    0,   23,    0,
   23,  120,  120,    0,  120,  120,  120,  120,  120,  120,
  120,  120,  120,   98,    0,  120,  120,    0,  120,    0,
    0,  120,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  120,  120,  120,  120,  120,  120,
    0,    0,  120,  120,  120,  120,  120,  120,  120,    0,
    0,  120,  120,  120,  120,  120,    0,    0,  120,  120,
    0,  120,    0,  120,  120,  120,    0,    0,    0,    0,
    0,    0,    0,    0,  115,  115,    0,  115,  115,  115,
  115,  115,  115,  115,  115,  115,   99,    0,  115,  115,
    0,  115,    0,    0,  115,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  115,  115,  115,
  115,  115,  115,    0,    0,  115,  115,  115,  115,  115,
  115,  115,    0,    0,  115,  115,  115,  115,  115,    0,
    0,  115,  115,    0,  115,    0,  115,    0,  115,  113,
  113,    0,  113,  113,  113,  113,  113,  113,  113,  113,
  113,  100,    0,  113,  113,    0,  113,    0,    0,  113,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  113,  113,  113,  113,  113,  113,    0,    0,
  113,  113,  113,  113,  113,  113,  113,    0,    0,  113,
  113,  113,  113,  113,    0,    0,  113,  113,    0,  113,
    0,  113,    0,  113,  114,  114,    0,  114,  114,  114,
  114,  114,  114,  114,  114,  114,  101,    0,  114,  114,
    0,  114,    0,    0,  114,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  114,  114,  114,
  114,  114,  114,    0,    0,  114,  114,  114,  114,  114,
  114,  114,    0,    0,  114,  114,  114,  114,  114,    0,
    0,  114,  114,    0,  114,    0,  114,    0,  114,   98,
   98,    0,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   96,    0,   98,   98,    0,   98,    0,    0,   98,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   98,   98,   98,   98,   98,   98,    0,    0,
   98,   98,   98,   98,   98,   98,   98,    0,    0,   98,
   98,   98,   98,   98,    0,    0,   98,   98,    0,   98,
    0,   98,    0,   98,    0,    0,    0,    0,    0,    0,
    0,    0,   99,   99,    0,   99,   99,   99,   99,   99,
   99,   99,   99,   99,   97,    0,   99,   99,    0,   99,
    0,    0,   99,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   99,   99,   99,   99,   99,
   99,    0,    0,   99,   99,   99,   99,   99,   99,   99,
    0,    0,   99,   99,   99,   99,   99,    0,    0,   99,
   99,    0,   99,    0,   99,    0,   99,  100,  100,    0,
  100,  100,  100,  100,  100,  100,  100,  100,  100,  102,
    0,  100,  100,    0,  100,    0,    0,  100,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  103,    0,    0,
  100,  100,  100,  100,  100,  100,    0,    0,  100,  100,
  100,  100,  100,  100,  100,    0,    0,  100,  100,  100,
  100,  100,    0,    0,  100,  100,    0,  100,    0,  100,
    0,  100,  101,  101,    0,  101,  101,  101,  101,  101,
  101,  101,  101,  101,    0,    0,  101,  101,    0,  101,
    0,    0,  101,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  104,    0,    0,  101,  101,  101,  101,  101,
  101,    0,    0,  101,  101,  101,  101,  101,  101,  101,
  105,    0,  101,  101,  101,  101,  101,    0,    0,  101,
  101,    0,  101,    0,  101,    0,  101,   96,   96,    0,
   96,   96,   96,   96,   96,   96,   96,   96,   96,    0,
    0,   96,   96,    0,   96,    0,    0,   96,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   96,    0,    0,    0,    0,   96,    0,    0,   96,   96,
   96,   96,   96,   96,   96,  106,    0,   96,   96,   96,
   96,   96,    0,    0,   96,   96,    0,   96,    0,   96,
    0,   96,    0,  107,    0,    0,    0,    0,    0,    0,
   97,   97,    0,   97,   97,   97,   97,   97,   97,   97,
   97,   97,    0,    0,   97,   97,    0,   97,    0,    0,
   97,    1,    0,    0,    0,    2,    3,    4,    5,    6,
    7,    8,    9,   97,    0,   10,   11,    0,   97,    0,
    0,   97,   97,   97,   97,   97,   97,   97,    0,    0,
   97,   97,   97,   97,   97,    0,    0,   97,   97,  108,
   97,    0,   97,    0,   97,  102,  102,    0,  102,  102,
  102,  102,  102,  102,  102,  102,  102,  109,   12,  102,
  102,    0,  102,  103,  103,  102,  103,  103,  103,  103,
  103,  103,  103,  103,  103,    0,    0,  103,  103,    0,
  103,    0,    0,  103,    0,    0,    0,    0,    0,    0,
    0,    0,  102,    0,    0,  102,  102,  102,  102,  102,
    0,    0,  102,  102,    0,  102,    0,  102,    0,  102,
  103,    0,    0,  103,  103,  103,  103,  103,    0,    0,
  103,  103,  110,  103,    0,  103,    0,  103,  104,  104,
    0,  104,  104,  104,  104,  104,  104,  104,  104,  104,
  118,    0,  104,  104,    0,  104,  105,  105,  104,  105,
  105,  105,  105,  105,  105,  105,  105,  105,    0,    0,
  105,  105,    0,  105,    0,    0,  105,    0,    0,    0,
    0,    0,    0,    0,    0,  104,    0,    0,  104,  104,
  104,  104,  104,    0,    0,  104,  104,    0,  104,    0,
  104,    0,  104,  105,    0,    0,  105,  105,  105,  105,
  105,    0,    0,  105,  105,  117,  105,    0,  105,    0,
  105,  106,  106,    0,  106,  106,  106,  106,  106,  106,
  106,  106,  106,  122,    0,  106,  106,    0,  106,  107,
  107,  106,  107,  107,  107,  107,  107,  107,  107,  107,
  107,    0,    0,  107,  107,    0,  107,    0,    0,  107,
    0,    0,    0,    0,    0,    0,    0,    0,  106,    0,
    0,  106,  106,  106,  106,  106,    0,    0,  106,  106,
    0,  106,    0,  106,    0,  106,  107,    0,    0,  107,
  107,  107,  107,  107,    0,    0,  107,  107,  123,  107,
    0,  107,    0,  107,    0,  108,  108,    0,  108,  108,
  108,  108,  108,  108,  108,  108,  108,   72,    0,  108,
  108,    0,  108,  109,  109,  108,  109,  109,  109,  109,
  109,  109,  109,  109,  109,    0,    0,  109,  109,    0,
  109,    0,    0,  109,    0,    0,    0,    0,    0,    0,
    0,    0,  108,    0,    0,  108,  108,  108,  108,  108,
    0,    0,  108,  108,    0,  108,    0,  108,    0,  108,
  109,    0,   31,  109,  109,  109,  109,  109,    0,    0,
  109,  109,    0,  109,  155,  109,    0,  109,  110,  110,
    0,  110,  110,  110,  110,  110,  110,  110,  110,  110,
    0,  154,  110,  110,    0,  110,  118,  118,  110,  118,
  118,  118,  118,  118,  118,  118,  118,  118,    0,    0,
  118,  118,    0,  118,    0,    0,  118,    0,    0,    0,
    0,    0,    0,    0,    0,  110,    0,    0,    0,   48,
  110,  110,  110,    0,    0,  110,  110,    0,  110,    0,
  110,    0,  110,  118,    0,    0,  157,    0,    0,  118,
  118,    0,    0,  118,  118,    0,  118,    0,  118,  152,
  118,  117,  117,    0,  117,  117,  117,  117,  117,  117,
  117,  117,  117,    0,    0,  117,  117,    0,  117,  122,
  122,  117,  122,  122,  122,  122,  122,  122,  122,  122,
  122,    0,    0,  122,  122,    0,  122,    0,    0,  122,
    0,    0,    0,    0,    0,    0,    0,    0,  117,    0,
    0,    0,    0,    0,  117,  117,    0,  147,  117,  117,
    0,  117,    0,  117,    0,  117,  122,    0,    0,   67,
    0,    0,  122,  122,    0,    0,  122,  122,    0,  122,
    0,  122,   78,  122,  123,    0,    0,  123,  123,  123,
  123,  123,  123,  123,  123,  123,    0,    0,  123,  123,
    0,  123,    0,   72,  123,    0,    0,   72,   72,   72,
   72,   72,   72,   72,   72,    0,    0,   72,   72,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   72,  123,    0,    0,    0,    0,    0,  123,  123,    0,
   28,  123,  123,    0,  123,    0,  123,    0,  123,    0,
    0,    0,   77,    0,    0,    0,   72,   72,   31,    0,
   72,    0,   31,   31,   31,   31,   31,   31,   31,   31,
  155,  150,   31,   31,  155,  155,  155,  155,  155,  155,
  155,  155,    0,    0,  155,  155,    0,  154,    0,    0,
  155,  154,  154,  154,  154,  154,  154,  154,  154,    0,
    0,  154,  154,    0,    0,   31,   31,  154,  148,    0,
    0,    0,   31,    0,    0,   31,    0,    0,    0,    0,
    0,    0,    0,    0,  155,   48,   79,  155,    0,   48,
   48,   48,   48,   48,   48,   48,   48,    0,   42,   48,
   48,  154,  157,    0,  154,    0,  157,  157,  157,  157,
  157,  157,  157,  157,    0,  152,  157,  157,    0,  152,
  152,  152,  152,  152,  152,  152,  152,  151,    0,  152,
  152,    0,    0,    0,    0,    0,    0,    0,    0,   48,
    0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,    0,    0,  157,    0,    0,  157,
    0,    0,    0,    0,    0,    7,    0,    0,    0,  152,
    0,    0,  152,  147,    0,    0,    0,  147,  147,  147,
  147,  147,  147,  147,  147,   67,    6,  147,  147,   67,
   67,   67,   67,   67,   67,   67,   67,    0,   78,   67,
   67,    0,   78,   78,   78,   78,   78,   78,   78,   78,
    0,    0,   78,   78,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  147,    0,    0,
  147,    0,    0,    0,    0,    0,    0,    0,    0,   67,
    0,    0,   67,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   78,    0,    0,   78,   28,    0,    0,    0,
   28,   28,   28,   28,   28,   28,   28,   28,   77,    0,
   28,   28,   77,   77,   77,   77,   77,   77,   77,   77,
    0,    0,   77,   77,    0,    0,    0,  150,    0,    0,
    0,  150,  150,  150,  150,  150,  150,  150,  150,    0,
    0,  150,  150,    0,    0,    0,    0,    0,    0,    0,
   28,    0,    0,   28,    0,    0,    0,    0,    0,    0,
    0,    0,   77,    0,  148,   77,    0,    0,  148,  148,
  148,  148,  148,  148,  148,  148,    0,    0,  148,  148,
    0,  150,   79,    0,  150,    0,   79,   79,   79,   79,
   79,   79,   79,   79,   42,    0,   79,   79,   42,   42,
   42,   42,   42,   42,   42,   42,    0,    0,   42,   42,
    0,    0,    0,    0,    0,    0,    0,    0,  148,    0,
    0,  148,    0,  151,    0,    0,    0,  151,  151,  151,
  151,  151,  151,  151,  151,    0,   79,  151,  151,   79,
    0,    0,    0,    0,    0,    0,    0,    0,   42,  149,
    0,   42,    0,  149,  149,  149,  149,  149,  149,  149,
  149,    7,    0,  149,  149,    7,    7,    7,    7,    7,
    7,    7,    7,   60,   78,    7,    7,  151,    0,    0,
  151,    0,    6,    0,    0,    0,    6,    6,    6,    6,
    6,    6,    6,    6,    0,    0,    6,    6,    0,    0,
    0,    0,    0,  149,    0,    0,  149,    0,    0,  102,
  103,   75,    0,   43,    0,    0,    0,    0,    7,  106,
  107,  108,    0,  113,  114,    0,    0,   44,    0,   45,
   46,    0,   47,   48,   49,   50,   51,   52,   32,    6,
    0,    0,    0,   53,    0,    0,    0,    0,    0,   54,
    0,    0,    0,    0,    0,  153,    0,    0,    0,    0,
   55,    0,    0,    0,    0,    0,    0,    0,   56,    0,
   57,    0,   58,    0,   59,  123,  124,  125,  126,  127,
  128,  169,    0,  129,  130,  131,  132,  133,  134,  186,
  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
  197,  198,  199,  200,  201,  138,    0,  206,    0,  209,
    0,  123,  124,  125,  126,  127,  128,    0,    0,  129,
  130,  131,  132,  133,  134,    0,    0,    0,  135,  136,
  137,    0,  202,    0,   43,  238,    0,  241,  242,    0,
  243,  138,    0,    0,  245,  246,  247,    0,   44,    0,
   45,   46,    0,   47,   48,   49,   50,   51,   52,   32,
    0,    0,    0,    0,   53,    0,    0,    0,    0,    0,
   54,    0,    0,    0,    0,    0,  258,    0,    0,    0,
    0,   55,    0,    0,    0,  153,    0,    0,  208,   56,
   43,   57,    0,   58,  269,   59,    0,    0,    0,    0,
    0,    0,    0,    0,   44,  274,   45,   46,    0,   47,
   48,   49,   50,   51,   52,   32,    0,    0,    0,    0,
   53,    0,  277,  278,    0,    0,   54,    0,    0,    0,
    0,    0,    0,    0,  264,    0,   43,   55,    0,  283,
    0,  284,  285,    0,    0,   56,    0,   57,    0,   58,
   44,   59,   45,   46,   43,   47,   48,   49,   50,   51,
   52,   32,    0,    0,    0,    0,   53,    0,   44,    0,
   45,   46,   54,   47,   48,   49,   50,   51,   52,   32,
    0,    0,    0,   55,   53,    0,    0,    0,    0,    0,
   54,   56,    0,   57,    0,   58,    0,   59,    0,    0,
   43,   55,    0,    0,    0,  234,    0,    0,    0,   56,
    0,   57,    0,   58,   44,   59,   45,   46,   43,   47,
   48,   49,   50,   51,   52,   32,    0,    0,    0,    0,
   53,    0,   44,    0,   45,   46,   54,   47,   48,   49,
   50,   51,   52,   32,    0,    0,    0,   55,   53,    0,
    0,  236,    0,    0,   54,   56,    0,   57,    0,   58,
    0,   59,    0,    0,   43,   55,    0,    0,    0,    0,
  248,    0,    0,   56,    0,   57,    0,   58,   44,   59,
   45,   46,   43,   47,   48,   49,   50,   51,   52,   32,
    0,    0,    0,    0,   53,    0,   44,    0,   45,   46,
   54,   47,   48,   49,   50,   51,   52,   32,    0,    0,
    0,   55,   53,    0,    0,    0,  251,    0,   54,   56,
    0,   57,    0,   58,    0,   59,    0,    0,  170,   55,
    0,    0,    0,    0,    0,    0,    0,   56,    0,   57,
    0,   58,    0,   59,  123,  124,  125,  126,  127,  128,
    0,    0,  129,  130,  131,  132,  133,  134,    0,    0,
    0,  135,  136,  137,    0,    0,    0,  123,  124,  125,
  126,  127,  128,    0,  138,  129,  130,  131,  132,  133,
  134,    0,    0,    0,  135,  136,  137,    0,    0,    0,
    0,  123,  124,  125,  126,  127,  128,  138,  254,  129,
  130,  131,  132,  133,  134,  143,    0,    0,  135,  136,
  137,    0,    0,    0,  123,  124,  125,  126,  127,  128,
    0,  138,  129,  130,  131,  132,  133,  134,    0,    0,
    0,  135,  136,  137,    0,    0,    0,    0,    0,    0,
    0,  173,    0,    0,  138,  123,  124,  125,  126,  127,
  128,    0,    0,  129,  130,  131,  132,  133,  134,    0,
    0,    0,  135,  136,  137,    0,    0,    0,    0,    0,
  174,    0,    0,    0,    0,  138,  123,  124,  125,  126,
  127,  128,    0,    0,  129,  130,  131,  132,  133,  134,
    0,    0,    0,  135,  136,  137,    0,    0,    0,    0,
    0,  276,    0,    0,    0,    0,  138,  123,  124,  125,
  126,  127,  128,    0,    0,  129,  130,  131,  132,  133,
  134,    0,    0,    0,  135,  136,  137,    0,    0,    0,
  123,  124,  125,  126,  127,  128,    0,  138,  129,  130,
  131,  132,  133,  134,    0,    0,    0,  135,  136,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  138,
};
static const short yycheck[] = {                         59,
    0,    3,    4,    5,    6,  101,   59,    9,   85,   11,
   12,  101,  256,    3,    4,    5,  256,   96,  256,    9,
  276,   11,  140,  283,  142,  309,  283,  276,  309,  310,
  256,  283,  157,  283,  318,  283,  283,  155,  283,  283,
  283,  309,  256,   45,   46,  283,  303,  184,  185,  309,
  318,  311,  148,  309,   56,   45,   46,  283,  276,  177,
  309,  157,  318,  315,  309,    0,   56,  146,  316,  283,
  276,  316,  315,  317,  151,  315,  166,  315,  168,  139,
  205,  158,  207,  309,  283,  310,  139,  276,  256,   91,
   92,  309,  310,  304,   96,   97,   98,  222,  316,  224,
  318,  226,  320,  309,  310,  312,  283,   97,   98,  205,
  316,  207,  318,  309,  320,  283,  315,  283,  256,  244,
  309,  310,  318,  283,  184,  185,  222,  316,  283,  318,
    0,  320,  309,  283,  290,  291,  292,  293,  140,  316,
  142,  256,  256,  145,  146,  283,  276,  256,  244,  309,
  256,  311,  319,  155,  309,  157,  311,  319,  315,  309,
  162,  320,  256,  319,  258,  276,  283,  283,  283,  283,
  283,  283,  162,  303,  283,  177,  283,  283,  272,  283,
  274,  275,  283,  277,  278,  279,  280,  281,  282,  283,
  283,  283,  309,  309,  288,    0,  257,  309,  303,  259,
  294,  283,  309,  205,  304,  207,  259,  310,  309,  283,
  320,  305,  283,  289,  290,  291,  292,  293,  294,  313,
  222,  315,  224,  317,  226,  319,  283,  309,  289,  290,
  291,  292,  293,  294,  319,  319,  297,  298,  299,  300,
  301,  302,  244,  319,  283,  306,  307,  308,  318,  318,
  316,  303,  320,  320,  316,  311,  256,  257,  319,  259,
  260,  261,  262,  263,  264,  265,  266,  267,    0,  278,
  270,  271,  317,  273,  316,  309,  276,  315,  283,  303,
  316,  316,  303,  283,  283,  303,  316,  320,  283,  289,
  290,  291,  292,  293,  294,    0,  304,  297,  298,  299,
  300,  301,  302,  303,  304,    0,  306,  307,  308,  309,
  310,  318,  304,  313,  314,  315,  316,  320,  318,  319,
  320,  256,  257,  303,  259,  260,  261,  262,  263,  264,
  265,  266,  267,    0,  318,  270,  271,  320,  273,  316,
  316,  276,  320,  318,  318,   28,  170,   56,  283,   86,
   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,  303,   -1,
   -1,  306,  307,  308,  309,  310,   -1,   -1,  313,  314,
  315,  316,   -1,  318,   -1,  320,  256,  257,   -1,  259,
  260,  261,  262,  263,  264,  265,  266,  267,    0,   -1,
  270,  271,   -1,  273,   -1,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,  283,   -1,   -1,   -1,   -1,   -1,  289,
  290,  291,  292,  293,  294,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,   -1,   -1,  306,  307,  308,  309,
  310,   -1,   -1,  313,  314,  315,  316,   -1,  318,   -1,
  320,  256,  257,   -1,  259,  260,  261,  262,  263,  264,
  265,  266,  267,    0,   -1,  270,  271,   -1,  273,   -1,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,  303,   -1,
   -1,  306,  307,  308,  309,  310,   -1,   -1,  313,  314,
   -1,  316,   -1,  318,  319,  320,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,  259,  260,  261,
  262,  263,  264,  265,  266,  267,    0,   -1,  270,  271,
   -1,  273,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,  291,
  292,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,   -1,   -1,  306,  307,  308,  309,  310,   -1,
   -1,  313,  314,   -1,  316,   -1,  318,   -1,  320,  256,
  257,   -1,  259,  260,  261,  262,  263,  264,  265,  266,
  267,    0,   -1,  270,  271,   -1,  273,   -1,   -1,  276,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  289,  290,  291,  292,  293,  294,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,   -1,   -1,  306,
  307,  308,  309,  310,   -1,   -1,  313,  314,   -1,  316,
   -1,  318,   -1,  320,  256,  257,   -1,  259,  260,  261,
  262,  263,  264,  265,  266,  267,    0,   -1,  270,  271,
   -1,  273,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  289,  290,  291,
  292,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,  303,   -1,   -1,  306,  307,  308,  309,  310,   -1,
   -1,  313,  314,   -1,  316,   -1,  318,   -1,  320,  256,
  257,   -1,  259,  260,  261,  262,  263,  264,  265,  266,
  267,    0,   -1,  270,  271,   -1,  273,   -1,   -1,  276,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  289,  290,  291,  292,  293,  294,   -1,   -1,
  297,  298,  299,  300,  301,  302,  303,   -1,   -1,  306,
  307,  308,  309,  310,   -1,   -1,  313,  314,   -1,  316,
   -1,  318,   -1,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,  259,  260,  261,  262,  263,
  264,  265,  266,  267,    0,   -1,  270,  271,   -1,  273,
   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  289,  290,  291,  292,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
   -1,   -1,  306,  307,  308,  309,  310,   -1,   -1,  313,
  314,   -1,  316,   -1,  318,   -1,  320,  256,  257,   -1,
  259,  260,  261,  262,  263,  264,  265,  266,  267,    0,
   -1,  270,  271,   -1,  273,   -1,   -1,  276,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,
  289,  290,  291,  292,  293,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,   -1,   -1,  306,  307,  308,
  309,  310,   -1,   -1,  313,  314,   -1,  316,   -1,  318,
   -1,  320,  256,  257,   -1,  259,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,  289,  290,  291,  292,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
    0,   -1,  306,  307,  308,  309,  310,   -1,   -1,  313,
  314,   -1,  316,   -1,  318,   -1,  320,  256,  257,   -1,
  259,  260,  261,  262,  263,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,   -1,   -1,  276,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  289,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,  298,
  299,  300,  301,  302,  303,    0,   -1,  306,  307,  308,
  309,  310,   -1,   -1,  313,  314,   -1,  316,   -1,  318,
   -1,  320,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,  259,  260,  261,  262,  263,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  273,   -1,   -1,
  276,  256,   -1,   -1,   -1,  260,  261,  262,  263,  264,
  265,  266,  267,  289,   -1,  270,  271,   -1,  294,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,   -1,   -1,
  306,  307,  308,  309,  310,   -1,   -1,  313,  314,    0,
  316,   -1,  318,   -1,  320,  256,  257,   -1,  259,  260,
  261,  262,  263,  264,  265,  266,  267,    0,  313,  270,
  271,   -1,  273,  256,  257,  276,  259,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  303,   -1,   -1,  306,  307,  308,  309,  310,
   -1,   -1,  313,  314,   -1,  316,   -1,  318,   -1,  320,
  303,   -1,   -1,  306,  307,  308,  309,  310,   -1,   -1,
  313,  314,    0,  316,   -1,  318,   -1,  320,  256,  257,
   -1,  259,  260,  261,  262,  263,  264,  265,  266,  267,
    0,   -1,  270,  271,   -1,  273,  256,  257,  276,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,   -1,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  303,   -1,   -1,  306,  307,
  308,  309,  310,   -1,   -1,  313,  314,   -1,  316,   -1,
  318,   -1,  320,  303,   -1,   -1,  306,  307,  308,  309,
  310,   -1,   -1,  313,  314,    0,  316,   -1,  318,   -1,
  320,  256,  257,   -1,  259,  260,  261,  262,  263,  264,
  265,  266,  267,    0,   -1,  270,  271,   -1,  273,  256,
  257,  276,  259,  260,  261,  262,  263,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,   -1,   -1,  276,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,  306,  307,  308,  309,  310,   -1,   -1,  313,  314,
   -1,  316,   -1,  318,   -1,  320,  303,   -1,   -1,  306,
  307,  308,  309,  310,   -1,   -1,  313,  314,    0,  316,
   -1,  318,   -1,  320,   -1,  256,  257,   -1,  259,  260,
  261,  262,  263,  264,  265,  266,  267,    0,   -1,  270,
  271,   -1,  273,  256,  257,  276,  259,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
  273,   -1,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  303,   -1,   -1,  306,  307,  308,  309,  310,
   -1,   -1,  313,  314,   -1,  316,   -1,  318,   -1,  320,
  303,   -1,    0,  306,  307,  308,  309,  310,   -1,   -1,
  313,  314,   -1,  316,    0,  318,   -1,  320,  256,  257,
   -1,  259,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,    0,  270,  271,   -1,  273,  256,  257,  276,  259,
  260,  261,  262,  263,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,   -1,   -1,  276,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  303,   -1,   -1,   -1,    0,
  308,  309,  310,   -1,   -1,  313,  314,   -1,  316,   -1,
  318,   -1,  320,  303,   -1,   -1,    0,   -1,   -1,  309,
  310,   -1,   -1,  313,  314,   -1,  316,   -1,  318,    0,
  320,  256,  257,   -1,  259,  260,  261,  262,  263,  264,
  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,  256,
  257,  276,  259,  260,  261,  262,  263,  264,  265,  266,
  267,   -1,   -1,  270,  271,   -1,  273,   -1,   -1,  276,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  303,   -1,
   -1,   -1,   -1,   -1,  309,  310,   -1,    0,  313,  314,
   -1,  316,   -1,  318,   -1,  320,  303,   -1,   -1,    0,
   -1,   -1,  309,  310,   -1,   -1,  313,  314,   -1,  316,
   -1,  318,    0,  320,  256,   -1,   -1,  259,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,   -1,  256,  276,   -1,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  283,  303,   -1,   -1,   -1,   -1,   -1,  309,  310,   -1,
    0,  313,  314,   -1,  316,   -1,  318,   -1,  320,   -1,
   -1,   -1,    0,   -1,   -1,   -1,  309,  310,  256,   -1,
  313,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
  256,    0,  270,  271,  260,  261,  262,  263,  264,  265,
  266,  267,   -1,   -1,  270,  271,   -1,  256,   -1,   -1,
  276,  260,  261,  262,  263,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,   -1,  303,  304,  276,    0,   -1,
   -1,   -1,  310,   -1,   -1,  313,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  310,  256,    0,  313,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,   -1,    0,  270,
  271,  310,  256,   -1,  313,   -1,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,  256,  270,  271,   -1,  260,
  261,  262,  263,  264,  265,  266,  267,    0,   -1,  270,
  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,
   -1,   -1,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,    0,   -1,   -1,  310,   -1,   -1,  313,
   -1,   -1,   -1,   -1,   -1,    0,   -1,   -1,   -1,  310,
   -1,   -1,  313,  256,   -1,   -1,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,  256,    0,  270,  271,  260,
  261,  262,  263,  264,  265,  266,  267,   -1,  256,  270,
  271,   -1,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,   -1,   -1,
  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,
   -1,   -1,  313,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  310,   -1,   -1,  313,  256,   -1,   -1,   -1,
  260,  261,  262,  263,  264,  265,  266,  267,  256,   -1,
  270,  271,  260,  261,  262,  263,  264,  265,  266,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  260,  261,  262,  263,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  310,   -1,   -1,  313,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  310,   -1,  256,  313,   -1,   -1,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  310,  256,   -1,  313,   -1,  260,  261,  262,  263,
  264,  265,  266,  267,  256,   -1,  270,  271,  260,  261,
  262,  263,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,   -1,
   -1,  313,   -1,  256,   -1,   -1,   -1,  260,  261,  262,
  263,  264,  265,  266,  267,   -1,  310,  270,  271,  313,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  310,  256,
   -1,  313,   -1,  260,  261,  262,  263,  264,  265,  266,
  267,  256,   -1,  270,  271,  260,  261,  262,  263,  264,
  265,  266,  267,    7,    8,  270,  271,  310,   -1,   -1,
  313,   -1,  256,   -1,   -1,   -1,  260,  261,  262,  263,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,   -1,   -1,  310,   -1,   -1,  313,   -1,   -1,   43,
   44,  256,   -1,  258,   -1,   -1,   -1,   -1,  313,   53,
   54,   55,   -1,   57,   58,   -1,   -1,  272,   -1,  274,
  275,   -1,  277,  278,  279,  280,  281,  282,  283,  313,
   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,  294,
   -1,   -1,   -1,   -1,   -1,   89,   -1,   -1,   -1,   -1,
  305,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,
  315,   -1,  317,   -1,  319,  289,  290,  291,  292,  293,
  294,  259,   -1,  297,  298,  299,  300,  301,  302,  123,
  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
  134,  135,  136,  137,  138,  319,   -1,  141,   -1,  143,
   -1,  289,  290,  291,  292,  293,  294,   -1,   -1,  297,
  298,  299,  300,  301,  302,   -1,   -1,   -1,  306,  307,
  308,   -1,  256,   -1,  258,  169,   -1,  171,  172,   -1,
  174,  319,   -1,   -1,  178,  179,  180,   -1,  272,   -1,
  274,  275,   -1,  277,  278,  279,  280,  281,  282,  283,
   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
  294,   -1,   -1,   -1,   -1,   -1,  210,   -1,   -1,   -1,
   -1,  305,   -1,   -1,   -1,  219,   -1,   -1,  256,  313,
  258,  315,   -1,  317,  228,  319,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,  239,  274,  275,   -1,  277,
  278,  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,
  288,   -1,  256,  257,   -1,   -1,  294,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,  258,  305,   -1,  273,
   -1,  275,  276,   -1,   -1,  313,   -1,  315,   -1,  317,
  272,  319,  274,  275,  258,  277,  278,  279,  280,  281,
  282,  283,   -1,   -1,   -1,   -1,  288,   -1,  272,   -1,
  274,  275,  294,  277,  278,  279,  280,  281,  282,  283,
   -1,   -1,   -1,  305,  288,   -1,   -1,   -1,   -1,   -1,
  294,  313,   -1,  315,   -1,  317,   -1,  319,   -1,   -1,
  258,  305,   -1,   -1,   -1,  309,   -1,   -1,   -1,  313,
   -1,  315,   -1,  317,  272,  319,  274,  275,  258,  277,
  278,  279,  280,  281,  282,  283,   -1,   -1,   -1,   -1,
  288,   -1,  272,   -1,  274,  275,  294,  277,  278,  279,
  280,  281,  282,  283,   -1,   -1,   -1,  305,  288,   -1,
   -1,  309,   -1,   -1,  294,  313,   -1,  315,   -1,  317,
   -1,  319,   -1,   -1,  258,  305,   -1,   -1,   -1,   -1,
  310,   -1,   -1,  313,   -1,  315,   -1,  317,  272,  319,
  274,  275,  258,  277,  278,  279,  280,  281,  282,  283,
   -1,   -1,   -1,   -1,  288,   -1,  272,   -1,  274,  275,
  294,  277,  278,  279,  280,  281,  282,  283,   -1,   -1,
   -1,  305,  288,   -1,   -1,   -1,  310,   -1,  294,  313,
   -1,  315,   -1,  317,   -1,  319,   -1,   -1,  273,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  313,   -1,  315,
   -1,  317,   -1,  319,  289,  290,  291,  292,  293,  294,
   -1,   -1,  297,  298,  299,  300,  301,  302,   -1,   -1,
   -1,  306,  307,  308,   -1,   -1,   -1,  289,  290,  291,
  292,  293,  294,   -1,  319,  297,  298,  299,  300,  301,
  302,   -1,   -1,   -1,  306,  307,  308,   -1,   -1,   -1,
   -1,  289,  290,  291,  292,  293,  294,  319,  320,  297,
  298,  299,  300,  301,  302,  303,   -1,   -1,  306,  307,
  308,   -1,   -1,   -1,  289,  290,  291,  292,  293,  294,
   -1,  319,  297,  298,  299,  300,  301,  302,   -1,   -1,
   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,   -1,  319,  289,  290,  291,  292,  293,
  294,   -1,   -1,  297,  298,  299,  300,  301,  302,   -1,
   -1,   -1,  306,  307,  308,   -1,   -1,   -1,   -1,   -1,
  314,   -1,   -1,   -1,   -1,  319,  289,  290,  291,  292,
  293,  294,   -1,   -1,  297,  298,  299,  300,  301,  302,
   -1,   -1,   -1,  306,  307,  308,   -1,   -1,   -1,   -1,
   -1,  314,   -1,   -1,   -1,   -1,  319,  289,  290,  291,
  292,  293,  294,   -1,   -1,  297,  298,  299,  300,  301,
  302,   -1,   -1,   -1,  306,  307,  308,   -1,   -1,   -1,
  289,  290,  291,  292,  293,  294,   -1,  319,  297,  298,
  299,  300,  301,  302,   -1,   -1,   -1,  306,  307,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  319,
};
#define YYFINAL 13
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 320
#if YYDEBUG
static const char *yyname[] = {

"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"ELSE","IF","THEN","TYPE",
"RANDOM","FIXED","ORIGIN","DISTINCT","QUERY","OBS","PARAM","LIST","MAP",
"DISTRIBUTION","EXTERN","CASE","IN","EXISTS_","FORALL_","FOR","NULLITY",
"INT_LITERAL","DOUBLE_LITERAL","BOOLEAN_LITERAL","CHAR_LITERAL",
"STRING_LITERAL","ID","PARFACTOR","FACTOR","ERROR","ELSEIF","AT_","PLUS_",
"MULT_","DIV_","MOD_","POWER_","MINUS_","UMINUS","LST","LT_","GT_","LEQ_",
"GEQ_","EQEQ_","NEQ_","EQ_","DISTRIB","NOT_","AND_","OR_","DOUBLERIGHTARROW",
"COMMA","SEMI","COLON","DOT","NUMSIGN","RIGHTARROW","LPAREN","RPAREN","LBRACE",
"RBRACE","LBRACKET","RBRACKET",
};
static const char *yyrule[] = {
"$accept : program",
"program : opt_statement_lst",
"opt_statement_lst :",
"opt_statement_lst : statement_lst",
"statement_lst : statement_lst statement SEMI",
"statement_lst : statement SEMI",
"statement_lst : statement_lst statement",
"statement_lst : statement",
"statement : declaration_stmt",
"statement : evidence_stmt",
"statement : query_stmt",
"statement : error",
"declaration_stmt : type_decl",
"declaration_stmt : fixed_func_decl",
"declaration_stmt : rand_func_decl",
"declaration_stmt : extern_func_decl",
"declaration_stmt : origin_func_decl",
"declaration_stmt : number_stmt",
"declaration_stmt : distinct_decl",
"declaration_stmt : parameter_decl",
"declaration_stmt : distribution_decl",
"type_decl : TYPE ID",
"type_decl : TYPE error",
"type : refer_name",
"type : array_type",
"array_type_or_sub : refer_name LBRACKET",
"array_type : array_type_or_sub RBRACKET",
"array_type : array_type LBRACKET RBRACKET",
"opt_parenthesized_type_var_lst :",
"opt_parenthesized_type_var_lst : LPAREN RPAREN",
"opt_parenthesized_type_var_lst : LPAREN type_var_lst RPAREN",
"opt_parenthesized_type_var_lst : type_var_lst",
"var_decl : type ID",
"extra_commas : COMMA COMMA",
"extra_commas : extra_commas COMMA",
"extra_semis : SEMI SEMI",
"extra_semis : extra_semis SEMI",
"type_var_lst : type_var_lst COMMA var_decl",
"type_var_lst : var_decl",
"type_var_lst : type_var_lst extra_commas var_decl",
"type_var_lst : type_var_lst var_decl",
"type_var_lst : type_var_lst COMMA error",
"fixed_func_decl : FIXED type ID opt_parenthesized_type_var_lst EQ_ expression",
"fixed_func_decl : FIXED error",
"extern_func_decl : EXTERN type ID opt_parenthesized_type_var_lst",
"extern_func_decl : EXTERN error",
"rand_func_decl : RANDOM type ID opt_parenthesized_type_var_lst dependency_statement_body",
"rand_func_decl : RANDOM error dependency_statement_body",
"rand_func_decl : RANDOM error",
"number_stmt : NUMSIGN refer_name opt_parenthesized_origin_var_list dependency_statement_body",
"number_stmt : NUMSIGN opt_parenthesized_origin_var_list dependency_statement_body",
"number_stmt : NUMSIGN refer_name opt_parenthesized_origin_var_list DISTRIB error",
"number_stmt : NUMSIGN refer_name error",
"number_stmt : NUMSIGN error",
"opt_parenthesized_origin_var_list : LPAREN origin_var_list RPAREN",
"opt_parenthesized_origin_var_list :",
"origin_var_list : origin_var_list COMMA ID EQ_ ID",
"origin_var_list : origin_var_list extra_commas ID EQ_ ID",
"origin_var_list : origin_var_list COMMA ID EQ_ error",
"origin_var_list : origin_var_list ID EQ_ ID",
"origin_var_list : ID EQ_ ID",
"origin_var_list : ID ID",
"origin_func_decl : ORIGIN type ID LPAREN type RPAREN",
"origin_func_decl : ORIGIN type ID LPAREN error RPAREN",
"origin_func_decl : ORIGIN type LPAREN type RPAREN",
"origin_func_decl : ORIGIN type ID type RPAREN",
"origin_func_decl : ORIGIN error",
"distinct_decl : DISTINCT refer_name id_or_subid_list",
"id_or_subid_list : id_or_subid",
"id_or_subid_list : id_or_subid_list COMMA id_or_subid",
"id_or_subid_list : id_or_subid_list id_or_subid",
"id_or_subid_list : id_or_subid_list extra_commas id_or_subid",
"id_or_subid : ID",
"id_or_subid : ID LBRACKET INT_LITERAL RBRACKET",
"distribution_decl : DISTRIBUTION ID EQ_ refer_name LPAREN opt_expression_list RPAREN",
"refer_name : ID",
"refer_name : ID DOT refer_name",
"dependency_statement_body : DISTRIB expression",
"parameter_decl : PARAM type ID",
"parameter_decl : PARAM type ID COLON expression",
"expression : operation_expr",
"expression : literal",
"expression : function_call",
"expression : list_expr",
"expression : map_construct_expression",
"expression : quantified_formula",
"expression : set_expr",
"expression : number_expr",
"expression : if_expr",
"expression : case_expr",
"literal : STRING_LITERAL",
"literal : CHAR_LITERAL",
"literal : INT_LITERAL",
"literal : DOUBLE_LITERAL",
"literal : BOOLEAN_LITERAL",
"literal : NULLITY",
"operation_expr : expression PLUS_ expression",
"operation_expr : expression MINUS_ expression",
"operation_expr : expression MULT_ expression",
"operation_expr : expression DIV_ expression",
"operation_expr : expression MOD_ expression",
"operation_expr : expression POWER_ expression",
"operation_expr : expression LT_ expression",
"operation_expr : expression GT_ expression",
"operation_expr : expression LEQ_ expression",
"operation_expr : expression GEQ_ expression",
"operation_expr : expression EQEQ_ expression",
"operation_expr : expression NEQ_ expression",
"operation_expr : expression AND_ expression",
"operation_expr : expression OR_ expression",
"operation_expr : expression DOUBLERIGHTARROW expression",
"operation_expr : expression LBRACKET expression RBRACKET",
"operation_expr : unary_operation_expr",
"unary_operation_expr : MINUS_ expression",
"unary_operation_expr : NOT_ expression",
"unary_operation_expr : AT_ expression",
"unary_operation_expr : LPAREN expression RPAREN",
"quantified_formula : FORALL_ type ID expression",
"quantified_formula : EXISTS_ type ID expression",
"function_call : refer_name LPAREN opt_expression_list RPAREN",
"function_call : refer_name",
"function_call : refer_name LPAREN error",
"if_expr : IF expression THEN expression ELSE expression",
"if_expr : IF expression THEN expression",
"case_expr : CASE expression IN map_construct_expression",
"opt_expression_list : expression_list",
"opt_expression_list :",
"expression_list : expression_list COMMA expression",
"expression_list : expression_list extra_commas expression",
"expression_list : expression",
"list_expr : LBRACKET opt_expression_list RBRACKET",
"list_expr : LBRACKET semi_colon_separated_expression_list RBRACKET",
"semi_colon_separated_expression_list : expression_list SEMI semi_colon_separated_expression_list",
"semi_colon_separated_expression_list : expression_list extra_semis semi_colon_separated_expression_list",
"semi_colon_separated_expression_list : expression_list SEMI expression_list",
"map_construct_expression : LBRACE expression_pair_list RBRACE",
"expression_pair_list : expression_pair_list COMMA expression RIGHTARROW expression",
"expression_pair_list : expression RIGHTARROW expression",
"number_expr : NUMSIGN set_expr",
"number_expr : NUMSIGN type",
"number_expr : NUMSIGN error",
"set_expr : explicit_set",
"set_expr : tuple_set",
"explicit_set : LBRACE opt_expression_list RBRACE",
"comprehension_expr : expression_list FOR type_var_lst COLON expression",
"comprehension_expr : expression_list FOR type_var_lst",
"tuple_set : LBRACE comprehension_expr RBRACE",
"evidence_stmt : OBS evidence",
"evidence_stmt : OBS evidence FOR type_var_lst",
"evidence_stmt : OBS evidence FOR type_var_lst COLON expression",
"evidence_stmt : OBS error FOR type_var_lst",
"evidence_stmt : OBS error FOR type_var_lst COLON expression",
"evidence_stmt : OBS error",
"evidence : value_evidence",
"value_evidence : expression EQ_ expression",
"value_evidence : error EQ_ expression",
"value_evidence : expression EQ_ error",
"query_stmt : QUERY expression",
"query_stmt : QUERY error",

};
#endif

int      yydebug;
int      yynerrs;

int      yyerrflag;
int      yychar;
YYSTYPE  yyval;
YYSTYPE  yylval;

/* define the initial stack-sizes */
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH  YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 10000
#define YYMAXDEPTH  10000
#endif
#endif

#define YYINITSTACKSIZE 200

typedef struct {
    unsigned stacksize;
    short    *s_base;
    short    *s_mark;
    short    *s_last;
    YYSTYPE  *l_base;
    YYSTYPE  *l_mark;
} YYSTACKDATA;
/* variables for the parser stack */
static YYSTACKDATA yystack;
#line 884 "blog.yacc"



void yyerror(const char *s) {
  cout << "Parse error at line number: " << curr_line << " and column number: " << curr_col << "!  Message: " << s << endl;
  // might as well halt now:
  //exit(-1);
}
#line 1190 "parser.cpp"

#if YYDEBUG
#include <stdio.h>		/* needed for printf */
#endif

#include <stdlib.h>	/* needed for malloc, etc */
#include <string.h>	/* needed for memset */

/* allocate initial stack or double stack size, up to YYMAXDEPTH */
static int yygrowstack(YYSTACKDATA *data)
{
    int i;
    unsigned newsize;
    short *newss;
    YYSTYPE *newvs;

    if ((newsize = data->stacksize) == 0)
        newsize = YYINITSTACKSIZE;
    else if (newsize >= YYMAXDEPTH)
        return -1;
    else if ((newsize *= 2) > YYMAXDEPTH)
        newsize = YYMAXDEPTH;

    i = (int) (data->s_mark - data->s_base);
    newss = (short *)realloc(data->s_base, newsize * sizeof(*newss));
    if (newss == 0)
        return -1;

    data->s_base = newss;
    data->s_mark = newss + i;

    newvs = (YYSTYPE *)realloc(data->l_base, newsize * sizeof(*newvs));
    if (newvs == 0)
        return -1;

    data->l_base = newvs;
    data->l_mark = newvs + i;

    data->stacksize = newsize;
    data->s_last = data->s_base + newsize - 1;
    return 0;
}

#if YYPURE || defined(YY_NO_LEAKS)
static void yyfreestack(YYSTACKDATA *data)
{
    free(data->s_base);
    free(data->l_base);
    memset(data, 0, sizeof(*data));
}
#else
#define yyfreestack(data) /* nothing */
#endif

#define YYABORT  goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR  goto yyerrlab

int
YYPARSE_DECL()
{
    int yym, yyn, yystate;
#if YYDEBUG
    const char *yys;

    if ((yys = getenv("YYDEBUG")) != 0)
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = YYEMPTY;
    yystate = 0;

#if YYPURE
    memset(&yystack, 0, sizeof(yystack));
#endif

    if (yystack.s_base == NULL && yygrowstack(&yystack)) goto yyoverflow;
    yystack.s_mark = yystack.s_base;
    yystack.l_mark = yystack.l_base;
    yystate = 0;
    *yystack.s_mark = 0;

yyloop:
    if ((yyn = yydefred[yystate]) != 0) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
        {
            goto yyoverflow;
        }
        yystate = yytable[yyn];
        *++yystack.s_mark = yytable[yyn];
        *++yystack.l_mark = yylval;
        yychar = YYEMPTY;
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;

    yyerror("syntax error");

    goto yyerrlab;

yyerrlab:
    ++yynerrs;

yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yystack.s_mark]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yystack.s_mark, yytable[yyn]);
#endif
                if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
                {
                    goto yyoverflow;
                }
                yystate = yytable[yyn];
                *++yystack.s_mark = yytable[yyn];
                *++yystack.l_mark = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yystack.s_mark);
#endif
                if (yystack.s_mark <= yystack.s_base) goto yyabort;
                --yystack.s_mark;
                --yystack.l_mark;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = YYEMPTY;
        goto yyloop;
    }

yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    if (yym)
        yyval = yystack.l_mark[1-yym];
    else
        memset(&yyval, 0, sizeof yyval);
    switch (yyn)
    {
case 4:
#line 210 "blog.yacc"
	{
    if(yystack.l_mark[-1].stmt != NULL){
      blog->add(yystack.l_mark[-1].stmt);
    }
  }
break;
case 5:
#line 215 "blog.yacc"
	{ blog->add(yystack.l_mark[-1].stmt); }
break;
case 6:
#line 217 "blog.yacc"
	{
    yyerror("missing ; after statement");
  }
break;
case 7:
#line 220 "blog.yacc"
	{
    yyerror("missing ; after statement");
  }
break;
case 8:
#line 226 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 9:
#line 227 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 10:
#line 228 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 11:
#line 229 "blog.yacc"
	{
    yyerror("incorrect statement");
  }
break;
case 12:
#line 236 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 13:
#line 237 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].funcdec; }
break;
case 14:
#line 238 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].funcdec; }
break;
case 15:
#line 239 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].funcdec; }
break;
case 16:
#line 240 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].origdec; }
break;
case 17:
#line 241 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].numstdec; }
break;
case 18:
#line 242 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].distdec; }
break;
case 19:
#line 243 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 20:
#line 244 "blog.yacc"
	{ yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 21:
#line 249 "blog.yacc"
	{ yyval.stmt = new TypDecl(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue())); }
break;
case 22:
#line 251 "blog.yacc"
	{
    yyerror("invalid type declaration");
  }
break;
case 23:
#line 257 "blog.yacc"
	{ yyval.typ = new Ty(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue())); }
break;
case 24:
#line 258 "blog.yacc"
	{ yyval.typ = yystack.l_mark[0].typ; }
break;
case 25:
#line 262 "blog.yacc"
	{ yyval.sval = yystack.l_mark[-1].sval; }
break;
case 26:
#line 266 "blog.yacc"
	{ yyval.typ = new Ty(curr_line, curr_col, Symbol(yystack.l_mark[-1].sval->getValue()), 1); }
break;
case 27:
#line 268 "blog.yacc"
	{ yystack.l_mark[-2].typ->setDim(yystack.l_mark[-2].typ->getDim() + 1);
      yyval.typ = yystack.l_mark[-2].typ; }
break;
case 28:
#line 273 "blog.yacc"
	{ yyval.varlist = NULL; }
break;
case 29:
#line 274 "blog.yacc"
	{yyval.varlist = NULL; }
break;
case 30:
#line 275 "blog.yacc"
	{ yyval.varlist = yystack.l_mark[-1].varlist; }
break;
case 31:
#line 276 "blog.yacc"
	{
    yyerror("missing parentheses");
  }
break;
case 32:
#line 282 "blog.yacc"
	{ 
    yyval.vardec = new VarDecl(curr_line, curr_col, *yystack.l_mark[-1].typ, Symbol(yystack.l_mark[0].sval->getValue())); 
  }
break;
case 37:
#line 298 "blog.yacc"
	{ 
      yyval.varlist = yystack.l_mark[-2].varlist; 
      yyval.varlist->push_back(*yystack.l_mark[0].vardec);
      delete(yystack.l_mark[0].vardec);
    }
break;
case 38:
#line 303 "blog.yacc"
	{ 
      yyval.varlist = new vector<VarDecl>();
      yyval.varlist->push_back(*yystack.l_mark[0].vardec);
      delete(yystack.l_mark[0].vardec);
    }
break;
case 39:
#line 308 "blog.yacc"
	{
    yyerror("extra commas in type variable list");
  }
break;
case 40:
#line 311 "blog.yacc"
	{
    yyerror("missing commas");
  }
break;
case 41:
#line 315 "blog.yacc"
	{
    yyerror("incorrect variable declaration");
  }
break;
case 42:
#line 322 "blog.yacc"
	{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, false, *(yystack.l_mark[-4].typ), Symbol(yystack.l_mark[-3].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-2].varlist != NULL){
        for(size_t i = 0; i < yystack.l_mark[-2].varlist->size(); i++){
          yyval.funcdec->addArg((*yystack.l_mark[-2].varlist)[i]);
        }
        delete(yystack.l_mark[-2].varlist);
      }
    }
break;
case 43:
#line 332 "blog.yacc"
	{
    yyerror("error in fixed function declaration");
  }
break;
case 44:
#line 339 "blog.yacc"
	{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, *(yystack.l_mark[-2].typ), Symbol(yystack.l_mark[-1].sval->getValue()));
      if(yystack.l_mark[0].varlist != NULL){
        for(size_t i = 0; i < yystack.l_mark[0].varlist->size(); i++){
          yyval.funcdec->addArg((*yystack.l_mark[0].varlist)[i]);
        }
        delete(yystack.l_mark[0].varlist);
      }
    }
break;
case 45:
#line 349 "blog.yacc"
	{
    yyerror("error in external function declaration");
  }
break;
case 46:
#line 356 "blog.yacc"
	{ 
      yyval.funcdec = new FuncDecl(curr_line, curr_col, true, *(yystack.l_mark[-3].typ), Symbol(yystack.l_mark[-2].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-1].varlist != NULL){
        for(size_t i = 0; i < yystack.l_mark[-1].varlist->size(); i++){
          yyval.funcdec->addArg((*yystack.l_mark[-1].varlist)[i]);
        }
        delete(yystack.l_mark[-1].varlist);
      }
    }
break;
case 47:
#line 366 "blog.yacc"
	{
      yyerror("incorrect function header, return type, or function name");
    }
break;
case 48:
#line 370 "blog.yacc"
	{
      yyerror("error in random function declaration");
    }
break;
case 49:
#line 377 "blog.yacc"
	{
      yyval.numstdec = new NumStDecl(curr_line, curr_col, Symbol(yystack.l_mark[-2].sval->getValue()), yystack.l_mark[0].exp);
      if(yystack.l_mark[-1].varlst != NULL){
        for(size_t i = 0; i < yystack.l_mark[-1].varlst->size(); i++){
          yyval.numstdec->add(get<0>((*yystack.l_mark[-1].varlst)[i]), get<1>((*yystack.l_mark[-1].varlst)[i]));
        }
        delete(yystack.l_mark[-1].varlst);
      }
      /*$$->add(Symbol($4->getValue()), Symbol($6->getValue()));*/
    }
break;
case 50:
#line 388 "blog.yacc"
	{
    yyerror("missing type name in number statement");
  }
break;
case 51:
#line 392 "blog.yacc"
	{
    yyerror("missing body in number statement");
  }
break;
case 52:
#line 396 "blog.yacc"
	{
    yyerror("missing body in number statement");
  }
break;
case 53:
#line 400 "blog.yacc"
	{
    yyerror("error in number statement");
  }
break;
case 54:
#line 406 "blog.yacc"
	{yyval.varlst = yystack.l_mark[-1].varlst; }
break;
case 55:
#line 407 "blog.yacc"
	{yyval.varlst = NULL; }
break;
case 56:
#line 412 "blog.yacc"
	{
    yyval.varlst = yystack.l_mark[-4].varlst;
    yyval.varlst->push_back(make_tuple(Symbol(yystack.l_mark[-2].sval->getValue()), Symbol(yystack.l_mark[0].sval->getValue())));
  }
break;
case 57:
#line 417 "blog.yacc"
	{
    yyerror("extra commas");
  }
break;
case 58:
#line 421 "blog.yacc"
	{
    yyerror("missing origin variable name");
  }
break;
case 59:
#line 425 "blog.yacc"
	{
    yyerror("missing comma");
  }
break;
case 60:
#line 429 "blog.yacc"
	{ 
    yyval.varlst = new vector<tuple<Symbol, Symbol>>();
    yyval.varlst->push_back(make_tuple(Symbol(yystack.l_mark[-2].sval->getValue()), Symbol(yystack.l_mark[0].sval->getValue())));
  }
break;
case 61:
#line 434 "blog.yacc"
	{
    yyerror("missing =");
  }
break;
case 62:
#line 441 "blog.yacc"
	{ yyval.origdec = new OriginDecl(curr_line, curr_col, yystack.l_mark[-4].typ->getTyp(), Symbol(yystack.l_mark[-3].sval->getValue()), yystack.l_mark[-1].typ->getTyp());  }
break;
case 63:
#line 443 "blog.yacc"
	{ yyerror("syntax error in type argument of origin function"); }
break;
case 64:
#line 445 "blog.yacc"
	{
    yyerror("missing type or origin function name");
  }
break;
case 65:
#line 449 "blog.yacc"
	{
    yyerror("missing ( in origin function");
  }
break;
case 66:
#line 453 "blog.yacc"
	{
    yyerror("error in origin function definition");
  }
break;
case 67:
#line 460 "blog.yacc"
	{
      yyval.distdec = new DistinctDecl(curr_line, curr_col, Symbol(yystack.l_mark[-1].sval->getValue()));
      if (yystack.l_mark[0].symbintvect != NULL){
        for(size_t i = 0; i < yystack.l_mark[0].symbintvect->size(); i++){
          yyval.distdec->add(get<0>((*yystack.l_mark[0].symbintvect)[i]), get<1>((*yystack.l_mark[0].symbintvect)[i]));
        }
        delete(yystack.l_mark[0].symbintvect);
      }
    }
break;
case 68:
#line 473 "blog.yacc"
	{
      yyval.symbintvect = new vector<tuple<string, int>>();
      yyval.symbintvect->push_back(*yystack.l_mark[0].symbintpair);
      delete(yystack.l_mark[0].symbintpair);
    }
break;
case 69:
#line 479 "blog.yacc"
	{
      yyval.symbintvect = yystack.l_mark[-2].symbintvect;
      yyval.symbintvect->push_back(*yystack.l_mark[0].symbintpair);
      delete(yystack.l_mark[0].symbintpair);
    }
break;
case 70:
#line 485 "blog.yacc"
	{
      yyerror("missing comma");
    }
break;
case 71:
#line 489 "blog.yacc"
	{
      yyerror("extra comma");
    }
break;
case 72:
#line 497 "blog.yacc"
	{ 
        /*tuple<string, int> idint = make_tuple($1->getValue(), 1);*/
        yyval.symbintpair = new tuple<string, int>(yystack.l_mark[0].sval->getValue(), 1);
       }
break;
case 73:
#line 502 "blog.yacc"
	{ 
      /*tuple<string, int> idint2 = make_tuple($1->getValue(), $3->getValue());*/
      yyval.symbintpair = new tuple<string, int>(yystack.l_mark[-3].sval->getValue(), yystack.l_mark[-1].ival->getValue());
    }
break;
case 74:
#line 511 "blog.yacc"
	{ yyerror("customized distribution declaration is not supported yet"); }
break;
case 75:
#line 515 "blog.yacc"
	{ 
      yyval.sval = new BLOGSymbol<string>(curr_line, curr_col, yystack.l_mark[0].sval->getValue());
    }
break;
case 76:
#line 518 "blog.yacc"
	{
      yyval.sval = new BLOGSymbol<string>(curr_line, curr_col, yystack.l_mark[-2].sval->getValue() + "." + yystack.l_mark[0].sval->getValue());
    }
break;
case 77:
#line 525 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 78:
#line 531 "blog.yacc"
	{ }
break;
case 79:
#line 532 "blog.yacc"
	{ }
break;
case 80:
#line 536 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 81:
#line 537 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 82:
#line 538 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 83:
#line 539 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].exp;}
break;
case 84:
#line 540 "blog.yacc"
	{yyval.exp = yystack.l_mark[0].mapexp;}
break;
case 85:
#line 541 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 86:
#line 542 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].setexp; }
break;
case 87:
#line 543 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].cardexp; }
break;
case 88:
#line 544 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 89:
#line 545 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 90:
#line 550 "blog.yacc"
	{yyval.exp = new StringLiteral(curr_line, curr_col, yystack.l_mark[0].sval->getValue()); }
break;
case 91:
#line 552 "blog.yacc"
	{string charstr(1, yystack.l_mark[0].chrval->getValue()); yyval.exp = new StringLiteral(curr_line, curr_col, charstr); }
break;
case 92:
#line 554 "blog.yacc"
	{yyval.exp = new IntLiteral(curr_line, curr_col, yystack.l_mark[0].ival->getValue()); }
break;
case 93:
#line 556 "blog.yacc"
	{yyval.exp = new DoubleLiteral(curr_line, curr_col, yystack.l_mark[0].dblval->getValue()); }
break;
case 94:
#line 558 "blog.yacc"
	{yyval.exp = new BoolLiteral(curr_line, curr_col, yystack.l_mark[0].boolval->getValue()); }
break;
case 95:
#line 560 "blog.yacc"
	{yyval.exp = new NullLiteral(curr_line, curr_col); }
break;
case 96:
#line 565 "blog.yacc"
	{ 
      yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::PLUS, yystack.l_mark[-2].exp, yystack.l_mark[0].exp);   
    }
break;
case 97:
#line 569 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MINUS, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 98:
#line 571 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MUL, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 99:
#line 573 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::DIV, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 100:
#line 575 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MOD, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 101:
#line 577 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::POWER, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 102:
#line 579 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::LT, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 103:
#line 581 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::GT, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 104:
#line 583 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::LE, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 105:
#line 585 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::GE, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 106:
#line 587 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::EQ, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 107:
#line 589 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::NEQ, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 108:
#line 591 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::AND, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 109:
#line 593 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::OR, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 110:
#line 595 "blog.yacc"
	{ yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::IMPLY, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 111:
#line 597 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::SUB, yystack.l_mark[-3].exp, yystack.l_mark[-1].exp); }
break;
case 112:
#line 598 "blog.yacc"
	{ yyval.exp = yystack.l_mark[0].exp; }
break;
case 113:
#line 603 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::MINUS, nullptr, yystack.l_mark[0].exp); }
break;
case 114:
#line 605 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::NOT, NULL, yystack.l_mark[0].exp); }
break;
case 115:
#line 607 "blog.yacc"
	{yyval.exp = new OpExpr(curr_line, curr_col, AbsynConstant::AT, NULL, yystack.l_mark[0].exp); }
break;
case 116:
#line 608 "blog.yacc"
	{yyval.exp = yystack.l_mark[-1].exp; }
break;
case 117:
#line 613 "blog.yacc"
	{yyval.exp = new QuantExpr(curr_line, curr_col, AbsynConstant::FORALL, *(new VarDecl(curr_line, curr_col, *yystack.l_mark[-2].typ, Symbol(yystack.l_mark[-1].sval->getValue()))), yystack.l_mark[0].exp); }
break;
case 118:
#line 615 "blog.yacc"
	{yyval.exp = new QuantExpr(curr_line, curr_col, AbsynConstant::EXISTS, *(new VarDecl(curr_line, curr_col, *yystack.l_mark[-2].typ, Symbol(yystack.l_mark[-1].sval->getValue()))), yystack.l_mark[0].exp); }
break;
case 119:
#line 620 "blog.yacc"
	{ 
    yyval.exp = new FuncApp(curr_line, curr_col, Symbol(yystack.l_mark[-3].sval->getValue())); 
    if (yystack.l_mark[-1].explst != NULL){
      for(size_t i = 0; i < yystack.l_mark[-1].explst->size(); i++){
        yyval.exp->add((*yystack.l_mark[-1].explst)[i]);
      }
      delete(yystack.l_mark[-1].explst);
    }
  }
break;
case 120:
#line 630 "blog.yacc"
	{
    yyval.exp = new FuncApp(curr_line, curr_col, Symbol(yystack.l_mark[0].sval->getValue()));
  }
break;
case 121:
#line 634 "blog.yacc"
	{
    yyerror("error in body of function call");
  }
break;
case 122:
#line 641 "blog.yacc"
	{ yyval.exp = new IfExpr(curr_line, curr_col, yystack.l_mark[-4].exp, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 123:
#line 643 "blog.yacc"
	{ yyval.exp = new IfExpr(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); }
break;
case 124:
#line 648 "blog.yacc"
	{
    if (yystack.l_mark[-2].exp != NULL && yystack.l_mark[0].mapexp != NULL){
      yyval.exp = new CaseExpr(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].mapexp);
    }
    else{
      yyerror("error in case expression");
    }
  }
break;
case 125:
#line 659 "blog.yacc"
	{yyval.explst = yystack.l_mark[0].explst;}
break;
case 126:
#line 660 "blog.yacc"
	{yyval.explst = NULL; }
break;
case 127:
#line 665 "blog.yacc"
	{ yyval.explst = yystack.l_mark[-2].explst;
      yyval.explst->push_back(yystack.l_mark[0].exp);
    }
break;
case 128:
#line 669 "blog.yacc"
	{
    yyerror("extra commas in expression list");
  }
break;
case 129:
#line 673 "blog.yacc"
	{ 
      yyval.explst = new vector<Expr*>();
      yyval.explst->push_back(yystack.l_mark[0].exp);
    }
break;
case 130:
#line 683 "blog.yacc"
	{ yyval.exp = new ArrayExpr(curr_line, curr_col);
      for (size_t i = 0; i < yystack.l_mark[-1].explst->size(); i++ ) {
         yyval.exp->add((*yystack.l_mark[-1].explst)[i]);
      }
    }
break;
case 131:
#line 688 "blog.yacc"
	{
    /* TODO: semi_colon_expr should not recursively accept semi_colon_expr*/
    yyval.exp = new ArrayExpr(curr_line, curr_col, 2);
    for (size_t i = 0; i < yystack.l_mark[-1].explst->size(); i ++ ) {
      yyval.exp->add((*yystack.l_mark[-1].explst)[i]);
    }
  }
break;
case 132:
#line 698 "blog.yacc"
	{
      yyval.explst = yystack.l_mark[0].explst;
      yyval.explst->insert(yyval.explst->begin(), new ArrayExpr(curr_line, curr_col));
      for(size_t i = 0; i < yystack.l_mark[-2].explst->size(); i ++ ) {
        (*yyval.explst)[0]->add((*yystack.l_mark[-2].explst)[i]);
      }
    }
break;
case 133:
#line 706 "blog.yacc"
	{
    yyerror("extra semi-colons in semi-colon separated expression list");
  }
break;
case 134:
#line 709 "blog.yacc"
	{ 
      yyval.explst = new vector<Expr*>();
      yyval.explst->push_back(new ArrayExpr(curr_line, curr_col));
      yyval.explst->push_back(new ArrayExpr(curr_line, curr_col));
      for (size_t i = 0; i < yystack.l_mark[-2].explst->size(); i++ ) {
        (*yyval.explst)[0]->add((*yystack.l_mark[-2].explst)[i]);
      }
      for (size_t i = 0; i < yystack.l_mark[0].explst->size(); i++ ) {
        (*yyval.explst)[1]->add((*yystack.l_mark[0].explst)[i]);
      }
    }
break;
case 135:
#line 723 "blog.yacc"
	{ 
    /*$$ = $2; */
    yyval.mapexp = new MapExpr(curr_line, curr_col);
    for (size_t i = 0; i < yystack.l_mark[-1].exptuplst->size(); i++){
      yyval.mapexp->addMap(get<0>((*yystack.l_mark[-1].exptuplst)[i]), get<1>((*yystack.l_mark[-1].exptuplst)[i]));
    }
    delete(yystack.l_mark[-1].exptuplst);
    
  }
break;
case 136:
#line 736 "blog.yacc"
	{ 
      yyval.exptuplst = yystack.l_mark[-4].exptuplst;
      yyval.exptuplst->push_back(make_tuple(yystack.l_mark[-2].exp, yystack.l_mark[0].exp));
    }
break;
case 137:
#line 741 "blog.yacc"
	{ 
      yyval.exptuplst = new vector<tuple<Expr*, Expr*>>();
      yyval.exptuplst->push_back(make_tuple(yystack.l_mark[-2].exp, yystack.l_mark[0].exp));
    }
break;
case 138:
#line 749 "blog.yacc"
	{ yyval.cardexp = new CardinalityExpr(curr_line, curr_col, (Expr*)yystack.l_mark[0].setexp); }
break;
case 139:
#line 751 "blog.yacc"
	{ 
      VarDecl var(curr_line, curr_col, *yystack.l_mark[0].typ);
      yyval.cardexp = new CardinalityExpr(curr_line, curr_col, new CondSet(curr_line, curr_col, var));
  }
break;
case 140:
#line 756 "blog.yacc"
	{
    yyerror("expecting number expression here.");
  }
break;
case 141:
#line 763 "blog.yacc"
	{yyval.setexp = yystack.l_mark[0].setexp; }
break;
case 142:
#line 764 "blog.yacc"
	{yyval.setexp = yystack.l_mark[0].setexp; }
break;
case 143:
#line 769 "blog.yacc"
	{
      yyval.setexp = new ListSet(curr_line, curr_col);
      for(size_t i = 0; i < yystack.l_mark[-1].explst->size(); i++){
        yyval.setexp->add((*yystack.l_mark[-1].explst)[i]);
      }
      delete(yystack.l_mark[-1].explst);
    }
break;
case 144:
#line 780 "blog.yacc"
	{
      yyval.compexp[0] = yystack.l_mark[-4].explst; yyval.compexp[1] = yystack.l_mark[-2].varlist; yyval.compexp[2] = yystack.l_mark[0].exp;
    }
break;
case 145:
#line 784 "blog.yacc"
	{
      yyval.compexp[0] = yystack.l_mark[-2].explst; yyval.compexp[1] = yystack.l_mark[0].varlist; yyval.compexp[2] = NULL;
    }
break;
case 146:
#line 793 "blog.yacc"
	{ 
    if (yystack.l_mark[-1].compexp != NULL){
      yyval.setexp = new TupleSetExpr(curr_line, curr_col, *((vector<Expr*>*)yystack.l_mark[-1].compexp[0]), *((vector<VarDecl>*)yystack.l_mark[-1].compexp[1]), (Expr*)yystack.l_mark[-1].compexp[2]); 
      delete((vector<Expr*>*)yystack.l_mark[-1].compexp[0]);
      delete((vector<VarDecl>*)yystack.l_mark[-1].compexp[1]);
    }
    else{
      yyerror("invalid tupleset");
    }
  }
break;
case 147:
#line 806 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 148:
#line 808 "blog.yacc"
	{
    if (yystack.l_mark[0].varlist != NULL) {
      yyval.stmt = new Evidence(curr_line, curr_col, 
                      ((Evidence*)yystack.l_mark[-2].stmt)->getLeft(),
                      ((Evidence*)yystack.l_mark[-2].stmt)->getRight(),
                      *((vector<VarDecl>*)yystack.l_mark[0].varlist));
      ((Evidence*)yystack.l_mark[-2].stmt)->clear();
      delete yystack.l_mark[-2].stmt;
      delete yystack.l_mark[0].varlist;
    }
    else {
      yyval.stmt = yystack.l_mark[-2].stmt;
      yyerror("invalid *for-loop* in obs statement");
    }
  }
break;
case 149:
#line 824 "blog.yacc"
	{
    if (yystack.l_mark[-2].varlist != NULL && yystack.l_mark[0].exp != NULL) {
      yyval.stmt = new Evidence(curr_line, curr_col, 
                      ((Evidence*)yystack.l_mark[-4].stmt)->getLeft(),
                      ((Evidence*)yystack.l_mark[-4].stmt)->getRight(),
                      *((vector<VarDecl>*)yystack.l_mark[-2].varlist),
                      yystack.l_mark[0].exp);
      ((Evidence*)yystack.l_mark[-4].stmt)->clear();
      delete yystack.l_mark[-4].stmt;
      delete yystack.l_mark[-2].varlist;
    }
    else {
      yyval.stmt = yystack.l_mark[-4].stmt;
      if (yystack.l_mark[-2].varlist != NULL) delete yystack.l_mark[-2].varlist;
      yyerror("invalid *for-loop* in obs statement");
    }
  }
break;
case 150:
#line 842 "blog.yacc"
	{
    yyerror("incorrect obs statement");
  }
break;
case 151:
#line 846 "blog.yacc"
	{
    yyerror("incorrect obs statement");
  }
break;
case 152:
#line 850 "blog.yacc"
	{
    yyerror("incorrect obs statement");
  }
break;
case 153:
#line 856 "blog.yacc"
	{yyval.stmt = yystack.l_mark[0].stmt; }
break;
case 154:
#line 861 "blog.yacc"
	{
    yyval.stmt = new Evidence(curr_line, curr_col, yystack.l_mark[-2].exp, yystack.l_mark[0].exp); 
  }
break;
case 155:
#line 865 "blog.yacc"
	{
    yyerror("incorrect lefthand expression in evidence");
  }
break;
case 156:
#line 869 "blog.yacc"
	{
    yyerror("incorrect righthand expression in evidence");
  }
break;
case 157:
#line 876 "blog.yacc"
	{ yyval.stmt = new Query(curr_line, curr_col, yystack.l_mark[0].exp); }
break;
case 158:
#line 878 "blog.yacc"
	{
    yyerror("invalid query");
  }
break;
#line 2268 "parser.cpp"
    }
    yystack.s_mark -= yym;
    yystate = *yystack.s_mark;
    yystack.l_mark -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yystack.s_mark = YYFINAL;
        *++yystack.l_mark = yyval;
        if (yychar < 0)
        {
            if ((yychar = YYLEX) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yystack.s_mark, yystate);
#endif
    if (yystack.s_mark >= yystack.s_last && yygrowstack(&yystack))
    {
        goto yyoverflow;
    }
    *++yystack.s_mark = (short) yystate;
    *++yystack.l_mark = yyval;
    goto yyloop;

yyoverflow:
    yyerror("yacc stack overflow");

yyabort:
    yyfreestack(&yystack);
    return (1);

yyaccept:
    yyfreestack(&yystack);
    return (0);
}

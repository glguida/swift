(BlogProgram:
  (args:
    (TypDecl: AircraftType )
    (TypDecl: Length )
    (TypDecl: Aircraft )
    (TypDecl: Blip )
    (OriginDecl:
      :func WingType
      :typ AircraftType
      :arg Aircraft
    )
    (OriginDecl:
      :func Source
      :typ Aircraft
      :arg Blip
    )
    (DistinctDecl:
      :type AircraftType
      :var (:        (: Helicopter 1 )        (: FixedWingPlane 1 )      ) )
    )
    (DistinctDecl:
      :type Length
      :var (:        (: Short 1 )        (: Long 1 )      ) )
    )
    (NumStDecl:
      :type Aircraft
      (args:
        origin# WingType        var# w      )
      :expr
        (IfExpr:
          :cond
            (OpExpr:
              :op 6
              :left
                (VarRef: w )
              :right
                (VarRef: Helicopter )
            )
          :then
            (DistrExpr:
              :distr Poisson
              (args:
                (DoubleLiteral: 1.000000 )
              )
            )
          :else
            (DistrExpr:
              :distr Poisson
              (args:
                (DoubleLiteral: 4.000000 )
              )
            )
        )
    )
    (NumStDecl:
      :type Blip
      :expr
        (DistrExpr:
          :distr Poisson
          (args:
            (DoubleLiteral: 2.000000 )
          )
        )
    )
    (NumStDecl:
      :type Blip
      (args:
        origin# Source        var# a      )
      :expr
        (DistrExpr:
          :distr Poisson
          (args:
            (DoubleLiteral: 1.000000 )
          )
        )
    )
    (FuncDecl:
      :kind random
      :type Length
      :func RotorLength
      (args:
        (VarDecl: (: Aircraft a ) )
      )
      expr:
        (IfExpr:
          :cond
            (OpExpr:
              :op 6
              :left
                (FuncApp:
                  :func WingType
                  (args:
                    (VarRef: a )
                  )
                )
              :right
                (VarRef: Helicopter )
            )
          :then
            (DistrExpr:
              :distr Categorical
              (args:
                (MapExpr:
                  :from#0
                    (VarRef: Long )
                  :to#0
                    (DoubleLiteral: 0.400000 )
                  :from#1
                    (VarRef: Short )
                  :to#1
                    (DoubleLiteral: 0.600000 )
                )
              )
            )
        )
    )
    (FuncDecl:
      :kind random
      :type Boolean
      :func BladeFlash
      (args:
        (VarDecl: (: Blip b ) )
      )
      expr:
        (IfExpr:
          :cond
            (OpExpr:
              :op 6
              :left
                (FuncApp:
                  :func Source
                  (args:
                    (VarRef: b )
                  )
                )
              :right
                (NullLiteral: NULL )
            )
          :then
            (DistrExpr:
              :distr Bernoulli
              (args:
                (DoubleLiteral: 0.010000 )
              )
            )
          :else
            (IfExpr:
              :cond
                (OpExpr:
                  :op 12
                  :left
                    (OpExpr:
                      :op 6
                      :left
                        (FuncApp:
                          :func WingType
                          (args:
                            (FuncApp:
                              :func Source
                              (args:
                                (VarRef: b )
                              )
                            )
                          )
                        )
                      :right
                        (VarRef: Helicopter )
                    )
                  :right
                    (OpExpr:
                      :op 7
                      :left
                        (FuncApp:
                          :func RotorLength
                          (args:
                            (FuncApp:
                              :func Source
                              (args:
                                (VarRef: b )
                              )
                            )
                          )
                        )
                      :right
                        (NullLiteral: NULL )
                    )
                )
              :then
                (DistrExpr:
                  :distr TabularCPD
                  (args:
                    (MapExpr:
                      :from#0
                        (VarRef: Long )
                      :to#0
                        (DistrExpr:
                          :distr Bernoulli
                          (args:
                            (DoubleLiteral: 0.900000 )
                          )
                        )
                      :from#1
                        (VarRef: Short )
                      :to#1
                        (DistrExpr:
                          :distr Bernoulli
                          (args:
                            (DoubleLiteral: 0.600000 )
                          )
                        )
                    )
                    (FuncApp:
                      :func RotorLength
                      (args:
                        (FuncApp:
                          :func Source
                          (args:
                            (VarRef: b )
                          )
                        )
                      )
                    )
                  )
                )
              :else
                (DistrExpr:
                  :distr Bernoulli
                  (args:
                    (DoubleLiteral: 0.100000 )
                  )
                )
            )
        )
    )
    (Evidence:
      :left
        (CondSet:
          :var
            (VarDecl: (: Blip b ) )
        )
      :right
        (ListSet: (:
          (VarRef: b1 )
          (VarRef: b2 )
          (VarRef: b3 )
          (VarRef: b4 )
          (VarRef: b5 )
          (VarRef: b6 )
        ) )
    )
    (Evidence:
      :left
        (FuncApp:
          :func BladeFlash
          (args:
            (VarRef: b1 )
          )
        )
      :right
        (BoolLiteral: true )
    )
    (Evidence:
      :left
        (FuncApp:
          :func BladeFlash
          (args:
            (VarRef: b2 )
          )
        )
      :right
        (BoolLiteral: false )
    )
    (Evidence:
      :left
        (FuncApp:
          :func BladeFlash
          (args:
            (VarRef: b3 )
          )
        )
      :right
        (BoolLiteral: false )
    )
    (Evidence:
      :left
        (FuncApp:
          :func BladeFlash
          (args:
            (VarRef: b4 )
          )
        )
      :right
        (BoolLiteral: false )
    )
    (Evidence:
      :left
        (FuncApp:
          :func BladeFlash
          (args:
            (VarRef: b5 )
          )
        )
      :right
        (BoolLiteral: false )
    )
    (Evidence:
      :left
        (FuncApp:
          :func BladeFlash
          (args:
            (VarRef: b6 )
          )
        )
      :right
        (BoolLiteral: false )
    )
    (Query:
      :expr
        (FuncApp:
          :func WingType
          (args:
            (FuncApp:
              :func Source
              (args:
                (VarRef: b1 )
              )
            )
          )
        )
    )
    (Query:
      :expr
        (FuncApp:
          :func WingType
          (args:
            (FuncApp:
              :func Source
              (args:
                (VarRef: b2 )
              )
            )
          )
        )
    )
    (Query:
      :expr
        (FuncApp:
          :func WingType
          (args:
            (FuncApp:
              :func Source
              (args:
                (VarRef: b3 )
              )
            )
          )
        )
    )
    (Query:
      :expr
        (FuncApp:
          :func WingType
          (args:
            (FuncApp:
              :func Source
              (args:
                (VarRef: b4 )
              )
            )
          )
        )
    )
    (Query:
      :expr
        (FuncApp:
          :func WingType
          (args:
            (FuncApp:
              :func Source
              (args:
                (VarRef: b5 )
              )
            )
          )
        )
    )
    (Query:
      :expr
        (FuncApp:
          :func WingType
          (args:
            (FuncApp:
              :func Source
              (args:
                (VarRef: b6 )
              )
            )
          )
        )
    )
  )
)
